
4.	Admission Department
5.	Recruitment Department
6.	Digital Marketing
7.	Motion Graphics Design
Features
1.	Super Admin/Admin Dashboard 
2.	Accountant Dashboard
3.	Admission Department Dashboard (also individual dashboard for team member)
4.	Recruitment Department Dashboard (also individual dashboard for team member)
5.	Digital Marketing Dashboard
6.	Motion Graphics Dashboard

Every Dashboard Have Sidebar   and Profile icon and Name, Designation at top and after click profile icon logout and edit profile will be show as dropdown and in edit profile section profile photo/avatar can change.







Sidebar Menu for Super Admin/Admin
1.	Dashboard
2.	Assign Task
3.	My Task/To-Do-List (Only for Admin no need for Super Admin)
4.	Accounting Reports ( এই মেনুতে অ্যাকাউন্ট ড্যাশবো‍র্ড থাকবে , ভিউ অনলি)
5.	Admission Reports ( এই মেনুতে Admission ড্যাশবো‍র্ড থাকবে , ভিউ অনলি)
6.	Recruitment Reports ( এই মেনুতে Recruitment ড্যাশবো‍র্ড থাকবে , ভিউ অনলি)
7.	Digital Marketing Reports ( এই মেনুতে Digital Marketing ড্যাশবো‍র্ড থাকবে , ভিউ অনলি)
8.	Motion Graphics Reports ( এই মেনুতে Motion Graphics ড্যাশবো‍র্ড থাকবে , ভিউ অনলি)
9.	Employee List  ( 
10.	Courses
11.	Leads Center

1.	Dashboard 

This is Primary Dashboard for Super Admin/Admin, here is full office overview dashboard.

Card-> Total Admitted, Total Revenue. Total Active Course, Total Leads, Total Work Done by Digital Marketing, Total Work Done BY Motion Graphics Designer, Total Task Completed, Total Content Published

A Graph (Graph Show based on Admission vs Leads) and A Py-chart (pie-chart based on student enrollment by course)

Larg Card-> 

1. Social Media Report (show as list in card – Platform, Follower Count, Like Facebook is Platform Name, 14.2k Follower Count)

2. Pending Task (Show as list in card- Task Name, Assigned Employee, Status, Deadline, Example: Boost GDF Post, J. R. Polok, In Progress (Dropdown, In Progress, Completed ), 20.10.2025) here is some more condition- row primary color will be white or gray, but when the task deadline is nearest then color will be warn-yellow, and after reach deadline it will be red color.  After Competed the Task it’s not showing in pending task it will move in Completed Task List.



3.Completed Task 

Show as list in card- Task Name, Assigned Employee, Status, completed date, example: Boost GDF Post, J. R. Polok, Completed, 19.10.2025, if task completed before end of deadline row color will be green, and after deadline row color will be red. 

     4.    Recruitment Department Report- Show as list in card Total Recruit, Total Ready Candidate, Total Job Vacancy, Total Employer, Example 100, 400, 200, 10)


               
2. Assign Task (Sidebar Menu) 
    Show Assign Task as List (Task Name, Assigned Employee, Status, Deadline, completed date (if completed) Example: Boost GDF Post, J. R. Polok, In Progress (20.10.2025) here is some more condition- row primary color will be white or gray, but when the task deadline is nearest then color will be warn-yellow, and after reach deadline it will be red color.  If completed before end deadline its row color will be green, have filter option (Dropdown- Completed, In-Progress) and need assign task button in top of the list, after click assign task button A pop up form will be open for assign task.  And Super Admin Can Assign Task to everyone including admin, but no one can assign task to super admin 

3. My Task/To-Do-List (this sidebar menu show only for admin not for super admin)

     Task show as a list, (Task description , Assigned by, deadline, status (can Changed by Dropdown InProgress, Completed ), row primary color will be white or gray, but when the task deadline is nearest then color will be warn-yellow, and after reach deadline it will be red color.  If completed before end deadline its row color will be green and need a button Add My Task (Self Task Assign ) when click add my task button Task Add Popup from will be open. 




4.  Accounting Reports (sidebar menu)
    Accountant Dashboard will be show here

5. Admission Reports (Sidebar Menu)
Admission Department Combined Dashboard Show Here and need a filter option for show individual admission department team member’s report. 

6. Recruitment Reports (Sidebar menu)  
Recruitment Department Dashboard Combine Report Show Here and need a filter for show Recruitment Department Individual Reports

7. Digital Marketing Reports (Sidebar Menu)
      Digital Marketing Executives Dashboard Will be Show Here
8.Motion Graphics Reports (Sidebar Menu)
        Motion Graphics Designer Dashboard Show Here

9.Employee List (sidebar Menu)
Employee List Show Here (Emp Id, Name, Designation, Department, Mobile Number, Email, Joining Date), Edit and Delete button need in Action and, Add Employee button should add.

10.Courses (Sidebar menu) 
Course show as a list (Course Id, Course Name, Category, Course Duration, Regular Fees, Discount Fees, Course Teacher Name, View Course Module And Details, Edit, Inactive) and add course button appear in top of the list. After click add course add courses from will be popup. 
11. Leads Center (Sidebar Menu)

All Leads come from lead entry and bulk upload , show as list ( Lead-ID (auto generate, Date (Entry Date ) , Name, Phone, Email, Interested Course, Source, Status (Assigned , Counseling, Admitted, In Follow Up, Interested, it will be come from admission team), action button ( Assign to Employee List Show as dropdown) 



Sidebar Menu for Accountant 

1. Dashboard  

Card-> Income, Expense, Profit, Balance in My Hand

income, Expense Graph Will Be show.

               2. My Task/To-do List

 Task show as a list, (Task description, assigned by, deadline, status (can Changed by Dropdown InProgress, Completed), row primary color will be white or gray, but when the task deadline is nearest then color will be warn-yellow, and after reach deadline it will be red color.  If completed before end deadline its row color will be green and need a button Add My Task (Self Task Assign) when click add my task button Task Add Popup from will be open. 


3. Admission Fees Collection

    When Admission Team Submit Admission Fee Collection Form then that will be show as a list here Accountant after review the payment he can Approve, Reject by Action Button.

4. Income

When Accountant Approve the Payment from admission fees collection page this data will be show here, and a button need for Add Income Popup Form, (here he can add others income)

5. Expense 

Expense shows as a List, (Date, Purpose of Expense, Amount) and add Expenses Button Need, for expense entry. 


Sidebar Menu for Admission Department Team

1.	Dashboard

Card-> Total Admission, Total Counseling, In Follow-Up, Not Admitted, Admission Fees Collection, Total Assign Lead

A Graph will be shows based on Admission Done, in Follow Up and Total Collection

A Pie Chart will be shows based on courses (admitted student number )


2.	My Task/To-do List

Task show as a list, (Task description, assigned by, deadline, status (can Changed by Dropdown InProgress, Completed), row primary color will be white or gray, but when the task deadline is nearest then color will be warn-yellow, and after reach deadline it will be red color.  If completed before end deadline its row color will be green and need a button Add My Task (Self Task Assign) when click add my task button Task Add Popup from will be open. 


3.	Assigned Lead

when digital marketer/ admin assign lead to admission team member then lead show as a list here, and an action button need -Start Counseling 

4.	 Counseling

When the member click Start Counseling then the lead will be show here as a list and here have 3 action button Admitted, Follow-Up, Not Admitted

5.	Admitted

when team member click admitted from counseling page action button the lead will be shows here as list
6.	In Follow-Up

When team member click Follow-Up Button from counseling page the lead will be show here as list and here have 2 action button Admitted, Not Admitted

7.	Not Admitted

When Team member click Not Admitted form Counseling and Follow-Up page the lead will be show here

8.	Courses

When Admin Ad Course the course list show here


9.	Admission Fees Collection

Admission Fees Collection Show as a list (lead id, Name, Course Name, Amount, Payment Method (Bkash, Nagod, Rocket, Bank Transfer, Cash on Hand), Payment Date, Status from Accountant (Approved, Rejected) and need a button Collect Fees- after click the button a popup form will be for submit collection fees and submit for review to accountant) 



















Sidebar menu for recruitment Team

1.	Dashboard

Card-> Total Recruitment, Pending Candidate, Active Job Position, Total Employer

Show Graph based on  Candidate VS Recruited 

2.	My Task/to-do List

Task show as a list, (Task description, assigned by, deadline, status (can Changed by Dropdown InProgress, Completed), row primary color will be white or gray, but when the task deadline is nearest then color will be warn-yellow, and after reach deadline it will be red color.  If completed before end deadline its row color will be green and need a button Add My Task (Self Task Assign) when click add my task button Task Add Popup from will be open. 


3.	Recruited 

From Candidate Page when click Recruited (Action button) then this data will be show here as list ( CanID, Name, 

4.	Candidate

Candidate Show as List ( CanID,  Name, Job Interest, CV Source (Facebook, Linkedin, Bdjobs, Reference, Prime Academy, Others ) ,  District, Trained ? (Yes, NO), Date, View CV, Recruited (Action Button and when click here a popup from will be open Select Company name and Job Position Job Position come from Job Position Page List , company name data come from employer page) and add Candidate Add Button in top , after click popup form will be open include cv upload option as goggle drive or OneDrive link )  

5.	Job Position

Jobs Position shows as list, ( JobID, Job Position, Employer Name, Salary Range, Deadline, Status Active or Inactive. Add Job position button in top , after click a popup from will be open for Add Job Position 

6.	Employer
Employer show as list ( EmpID, Employer Name, Adress, Job Location, MoU Date. 
7.	Income

Income show As list ( Date, Source of Income, Amount )
Add income button at top, 

8.	Expense

Expense show As list ( Date, Purpose of Expense, Amount )
Add Expense button at top, 























Sidebar Menu and dashboard  For Digital Marketing Executive
1.Dashboard
Card->  Task Completed, Total Leads, Totals Cost, Total Content Published 

Graph Based on Lead Entry with Category
Pie Chart based on Social Media Content Published with Platform 

2. My Task/To-do List

Task show as a list, (Task description, assigned by, Category (Category come from self-assign) task deadline, status (can Changed by Dropdown InProgress, Completed), row primary color will be white or gray, but when the task deadline is nearest then color will be warn-yellow, and after reach deadline it will be red color.  If completed before end deadline its row color will be green and need a button Add My Task (Self Task Assign) when click add my task button Task Add Popup from will be open (from field – Date, Task Description, Assigned by, Category -Dropdown( Content Published, Meta Ad, LinkedIn Ad, SEO, Website Task, Lead Entry ), Platform-Dropdown(  Facebook, LinkedIn, Instagram, X, Pinterest, YouTube, WhatsApp, Telegram , Blogger, Directory Page, Website, Others), Deadline.


3. Lead Entry

Lead Entry Form ( Form Field- Name, Phone, Email, Interested Course, Source( Dropdown- Meta Lead, LinkedIn Lead, Manually Generated Lead, Others),  And Keep System for bulk upload as csv format. 

4. Leads Center
All Leads come from lead entry and bulk upload , show as list ( Lead-ID (auto generate, Date (Entry Date ) , Name, Phone, Email, Interested Course, Source, Status (Assigned , Counseling, Admitted, In Follow Up, Interested, it will be come from admission team), action button ( Assign to Employee List Show as dropdown)
 5. Cost Entry/ Expense
Cost Entry/ Expense show as list ( Date, Purpose of Expense, Amount) add Cost Entry Button , after click the button popup form will be open ( Date, Purpose of Expense ( Meta Ads, LinkedIn Ads, Software Purchase, Subscription, Others) , Amount ) 
6. Social Media Reports
From Filed ( Facebook Followers, Instagram Followers, Facebook Group Members, Youtube Subscribers, LinkedIn Followers, X Followers, Pinterereset View, Blogger Impression, Total People Reach ) button ( Update, Cancel) 



7.	SEO Reports 

Keep it Blank.


Sidebar Menu For Motion Graphics Designer 
1.	Dashboard 

Card-> Total Static Photo, Total Motion Video, Total Video Ready, Total Task Completed.

Graph will show for Total Static Photo, Total Motion Video, Total Video Ready, Total Task Completed.


2.	My Task/To-do List


Task show as a list, (Task description, assigned by, Category (Category come from self-assign) task deadline, status (can Changed by Dropdown InProgress, Completed), row primary color will be white or gray, but when the task deadline is nearest then color will be warn-yellow, and after reach deadline it will be red color.  If completed before end deadline its row color will be green and need a button Add My Task (Self Task Assign) when click add my task button Task Add Popup from will be open (from field – Date, Task Description, Assigned by, Category -Dropdown( Static Photo, Motion Video, Video Edit, Others, ), Deadline.
And Add Chat Floating icon for Chatting with Each Other (All Employee) and a chat group need (Prime Academy Internal ) 

Ah here is my all requirements as I know you know our Prime Academy Brand Color, Font, Etc.  so you need to create the entire webbased software with mobile friendly because I will make android app later as web view. And every card should have icon, and color, so coloring graph and pie chart. And full software will be modern and fantastic designed. My all requirement need to fullfill so read carefully , now I declare your role is so experienced full stack web developer. Database should use MongoDB, should use node and npm for development

Super admin names: 
Ikhtiar Rahman, CEO, Prime Academy,  email: ikhtiar@primeacademy.org 
Kazi Sazzad Hossain, Head Of Marketing, Email: Kazi@primeacademy.org
Raj Pahal, Director, Partnership, Email: raj@primeacademy.org

Admin:
Shahidul Islam, Director, Academic, shahidul@primecademy.org
Rafsaniyat Binte Mustafiz, Manager, Operation, rafsaniyat@primeacademy.org

Accountant: 
Md. Mahbub Rahman, Accountant, mahbub@primeacademy.org

Recruitment:
Md. Tanvir Alin, Business Development Manager, alin@primeacademy.org

Admission:
Sajrin Bashar, Business Development Support, sajrin@primeacademy.org

Digital Marketing:
J. R. Polok, Digital Marketing Executive, polok@primeacademy.org

Motion Graphics,
Shuvo Kumar Das, Motion Graphics Designer, shuvo@primeacademy.org


এই প‍র্যন্ত কি বুঝলা বলো
ChatGPT said:

Thought for 6s
ওয়ালাইকুমুসসালাম, Polok! ✅
তোমার “Prime Academy Office Management” (সংক্ষেপে আমি PAOM বলছি)–এর রিকয়ারমেন্ট আমি সম্পূর্ণ পড়েছি ও বিশ্লেষণ করেছি। এখন পর্যন্ত যেটা বুঝেছি—কোনো কাজ শুরু করছি না, শুধু বিশ্লেষণ দিলাম।
আমি যেভাবে বুঝেছি (সংক্ষেপে)
প্ল্যাটফর্ম: ওয়েববেসড (মোবাইল-ফার্স্ট), পরে অ্যান্ড্রয়েড WebView—তাই সব UI মোবাইল-অপ্টিমাইজড হবে।
স্ট্যাক: Node.js (Express) + MongoDB, NPM workflow. ফ্রন্টএন্ড React/Vite (Tailwind + shadcn/ui) ধরছি—ব্র্যান্ডিং অনুযায়ী।
ব্র্যান্ডিং: Prime Academy রঙ (#053867, #253985, #F7BA23, #F3CE49), ফন্ট Poppins—সব ড্যাশবোর্ড/কার্ড/গ্রাফে কনসিস্টেন্ট।
ইউজার রোল: Super Admin, Admin, Accountant, Admission, Recruitment, Digital Marketing, Motion Graphics।
রোল-ভিত্তিক সাইডবার/ড্যাশবোর্ড: প্রত্যেক Role নিজের সাইডবার ও ড্যাশবোর্ডই দেখবে।
গ্লোবাল টপবার: প্রোফাইল আইকন + নাম + ডিজাইনেশন; ড্রপডাউন: Edit Profile, Logout; Edit-এ অ্যাভাটার চেঞ্জ করা যাবে।
কোর মডিউল:
Primary Admin Dashboard (কোম্পানি-ওয়াইড ওভারভিউ)
Assign Task + Task/To-Do (Admin-only “My Task”)
Accounting Reports (view-only for Admin/SAdmin; full for Accountant)
Admission Reports (+ member filter)
Recruitment Reports (+ member filter)
Digital Marketing Reports
Motion Graphics Reports
Employee List (CRUD)
Courses (CRUD)
Leads Center (assign to Admission)
ড্যাশবোর্ড/ফিচার-ভিত্তিক বিশ্লেষণ
1) Super Admin/Admin – Primary Dashboard
Cards: Total Admitted, Total Revenue, Total Active Course, Total Leads, DM Work Done, Motion Work Done, Total Task Completed, Total Content Published.
Charts:
Line/Bar: Admission vs Leads (সময়ভিত্তিক গ্র্যানুলারিটি – দিন/সপ্তাহ/মাস)।
Pie: Enrollment by Course।
Large Cards:
Social Media Report (Platform, Follower Count …)
Pending Task (list) — কালার লজিক:
ডিফল্ট: সাদা/গ্রে
“Deadline নিকটবর্তী” ⇒ warning-yellow
“Deadline পার হয়ে গেছে” ⇒ red
Completed হলে এখানে আর থাকবে না; Completed তালিকায় যাবে
Completed Task (list) — কালার লজিক:
সময়সীমার আগে done ⇒ green
সময়সীমার পরে done ⇒ red
Recruitment Snapshot: Total Recruit, Ready Candidate, Job Vacancy, Employer
2) Assign Task (SAdmin/Admin)
টেবিল: Task, Assignee, Status (In-Progress/Completed), Deadline, Completed Date
Filter: Completed / In-Progress
Color logic: Pending এর মতোই (সাদা/গ্রে → warning-yellow → red)
Rules:
Super Admin সবাইকে task assign করতে পারবে (Admin সহ)
কেউই Super Admin-কে task assign করতে পারবে না
Assign Task Modal: title/desc, assignee (role+employee), category (optional), deadline, attachments (optional)
3) My Task/To-Do (Admin-only)
টেবিল: Description, Assigned By, Deadline, Status (dropdown), Self-assign বাটন → Modal (Date, Description, Category optional, Deadline)
Color logic: identical (white/grey → warn-yellow → red; early-green)
4) Accounting Reports
Admin/SAdmin ভিউ-অনলি ড্যাশবোর্ড (cards + graphs)
Accountant রোলে full CRUD মডিউল (Income/Expense/Approvals)
5) Admission Reports
Combined Dashboard + member filter (individual report view)
6) Recruitment Reports
Combined Dashboard + member filter (individual report view)
7) Digital Marketing Reports
DM executives dashboard (cards+graphs, content publish, lead stats)
8) Motion Graphics Reports
MG designer dashboard (cards+graphs)
9) Employee List
টেবিল: EmpID, Name, Designation, Department, Mobile, Email, Joining Date + Edit/Delete + Add Employee
10) Courses
টেবিল: CourseID, Name, Category, Duration, Regular Fees, Discount Fees, Teacher, View Module/Details, Edit, Inactive
Add Course Modal
11) Leads Center
ইনপুট সোর্স: DM Lead Entry + CSV bulk upload
টেবিল: LeadID(auto), Date, Name, Phone, Email, Interested Course, Source, Status (Assigned/Counseling/Admitted/In Follow Up/Interested)
Assign action → Admission team member dropdown
Role-specific মডিউলসমূহ (সংক্ষেপ)
Accountant
Dashboard: Income, Expense, Profit, Cash-in-hand + Income/Expense Graph
My Task (self-assign supported)
Admission Fees Collection: Admission টিমের সাবমিটেড ফি – Approve/Reject
Income: Approved fees auto-listed, plus manual Add Income modal
Expense: list + Add Expense modal
Admission Team
Dashboard: Total Admission, Counseling, In Follow-Up, Not Admitted, Fees Collection, Assigned Leads + Graphs (Admissions/FollowUp/Collection) + Pie (By Course)
My Task (self-assign supported)
Assigned Lead: from Leads Center (DM/Admin assigned) → Start Counseling
Counseling: actions → Admitted / Follow-Up / Not Admitted
Admitted / In Follow-Up / Not Admitted: respective buckets
Courses: view list from admin courses
Admission Fees Collection: list + Collect Fees modal (Lead, Course, Amount, Method: Bkash/Nagad/Rocket/Bank Transfer/Cash, Date) → submit for accountant review; Accountant status shows (Approved/Rejected)
Recruitment Team
Dashboard: Total Recruitment, Pending Candidate, Active Job, Employer + Candidate vs Recruited Graph
My Task (self-assign supported)
Recruited: Candidate page থেকে action করলে এখানে তালিকা
Candidate: list (CanID, Name, Job Interest, CV Source, District, Trained?, Date, View CV, Recruited action → popup: Company + Job Position) + Add Candidate (with CV link: GDrive/OneDrive)
Job Position: list (JobID, Position, Employer, Salary Range, Deadline, Status) + Add modal
Employer: list (EmpID, Name, Address, Job Location, MoU Date)
Income/Expense: list + Add modal
Digital Marketing Executive
Dashboard: Cards—Task Completed, Total Leads, Total Cost, Total Content Published; Graph—Lead Entry by Category; Pie—Content Published by Platform
My Task (self-assign modal fields: Date, Description, Assigned By, Category [Content, Meta Ad, LinkedIn Ad, SEO, Website Task, Lead Entry], Platform [FB, LinkedIn, Insta, X, Pinterest, YouTube, WhatsApp, Telegram, Blogger, Directory, Website, Others], Deadline)
Lead Entry: Form + CSV bulk upload
Leads Center: (same spec) + Assign to Admission
Cost Entry/Expense: list + Add modal (Date, Purpose [Meta Ads, LinkedIn Ads, Software Purchase, Subscription, Others], Amount)
Social Media Reports: form (FB Followers, Insta Followers, FB Group Members, YT Subs, LinkedIn Followers, X Followers, Pinterest Views, Blogger Impression, Total Reach)
SEO Reports: placeholder (blank for now)
Motion Graphics Designer
Dashboard: Cards—Total Static Photo, Total Motion Video, Total Video Ready, Total Task Completed + Graph (all four series)
My Task (self-assign modal: Date, Description, Assigned By, Category [Static Photo, Motion Video, Video Edit, Others], Deadline)
Internal Chat (Global)
Floating chat icon, 1:1 DM + group “Prime Academy Internal”
রিয়েলটাইমের জন্য Socket.io + Mongo store (messages) + online presence
Access Control (RBAC) – মূল নিয়ম
Super Admin: সব Read/Write + Assign to anyone; cannot be assigned by others
Admin: Assign Task (except to Super Admin), My Task দৃশ্যমান, Leads assign করতে পারে, Reports ভিউ
Accountant: Fees approve/reject + Income/Expense CRUD; others read as per need
Admission: Leads workflow + Fees collection submit
Recruitment: Candidate/Job/Employer + Income/Expense (recruitment scope)
DM: Lead/Cost/Social report + own tasks
MG: own tasks + content counts
Admin dashboards (view-only mirrors): Accounting/Admission/Recruitment/DM/MG—view-only per তোমার স্পেসিফিকেশন
ডাটা মডেল (উচ্চ-স্তর)
users: name, email, role, dept, designation, avatar, phone, joinDate, status
tasks: title, description, assignedBy, assignedTo, roleScope(optional), category, deadline, status, completedAt, createdAt
leads: leadId(auto), createdAt, name, phone, email, interestedCourse, source, status, assignedTo (Admission member), history[]
courses: courseId, name, category, duration, regularFee, discountFee, teacher, module/details, status
admissions: leadId ref, course ref, admittedBy, admittedAt, notes
fees: lead/admission ref, amount, method, paymentDate, submittedBy(Admission), status (Pending/Approved/Rejected), reviewedBy(Accountant), reviewedAt
accounting: incomes(date, source, amount, channel, refId), expenses(date, purpose, amount, category, refId)
recruitment_candidates: canId, name, interest, source, district, trained(bool), date, cvLink, recruited(bool), recruitedMeta{employer, jobId, date}
recruitment_jobs: jobId, position, employerId, salaryRange, deadline, status
recruitment_employers: empId, name, address, jobLocation, mouDate
dm_costs: date, purpose(enum), amount, createdBy
social_stats: date, platform metrics (FB, Insta, YT, LinkedIn, X, Pinterest, Blogger, reach)
mg_outputs: counters by type + per-task linkage
notifications: to, type, payload, readAt
messages: chat room id, from, to/group, text/attachments, createdAt
স্ট্যাটাস/কালার লজিক (ডেডলাইনের জন্য)
daysLeft = (deadline - today)
daysLeft <= 0 ⇒ red (overdue)
0 < daysLeft <= N (ধরা যাক 2–3 দিন) ⇒ warning-yellow
Completed before deadline ⇒ green (Completed view-তে)
Default ⇒ white/grey
এই থ্রেশহোল্ড N configurable করা ভালো (settings collection)
Mobile & WebView Considerations
Bottom-nav or collapsible sidebar (mobile)
Touch-target ≥ 44px, table horizontal-scroll, sticky header
File inputs (CSV) webview-safe, back-button handling, auth persistence
Charts responsive (Recharts), legends touch-friendly
সিড ইউজার (তোমার দেয়া)
Super Admin:
Ikhtiar Rahman (ikhtiar@primeacademy.org)
Kazi Sazzad Hossain (kazi@primeacademy.org)
Raj Pahal (raj@primeacademy.org)
Admin: Shahidul Islam (shahidul@primecademy.org), Rafsaniyat Binte Mustafiz (rafsaniyat@primeacademy.org)
Accountant: Md. Mahbub Rahman (mahbub@primeacademy.org)
Recruitment: Md. Tanvir Alin (alin@primeacademy.org)
Admission: Sajrin Bashar (sajrin@primeacademy.org)
Digital Marketing: J. R. Polok (polok@primeacademy.org)
Motion Graphics: Shuvo Kumar Das (shuvo@primeacademy.org)
উচ্চ-স্তরের আর্কিটেকচার (প্রস্তাব)
API: Express + JWT auth + Role-based middleware (CASL/own)
DB: MongoDB (Mongoose) + proper indexes (leadId, email, status)
Realtime: Socket.io (chat, live task status)
File Storage: CSV uploads; CV লিঙ্ক external drive link হিসেবে স্টোর
Charts/UI: Recharts + shadcn/ui Cards with icons, brand colors
State: React Query (server state), Zustand/Context (UI state)
Monorepo Optional: apps/api, apps/web
Testing: Minimal e2e (Playwright) + API (Vitest/Supertest)
CI hints: Lint/Type check, build checks
গ্রহণযোগ্যতার মানদণ্ড (Acceptance Criteria) — নমুনা
প্রত্যেক Role শুধুমাত্র নিজের সাইডবার/ড্যাশবোর্ড দেখবে
Admin Dashboard-এ সব কার্ড/চার্ট/লিস্ট সঠিক ডাটা দেখাবে
Task color rules ডেডলাইন অনুযায়ী আপডেট হবে
Leads → Assign → Counseling → Admitted/FollowUp/NotAdmitted সম্পূর্ণ ফ্লো কাজ করবে
Fees Collection submit → Accountant Approve/Reject ফ্লো কাজ করবে
Reports পেজগুলোতে role অনুযায়ী view-only vs CRUD মানা হবে
CSV bulk upload (Leads) ভ্যালিডেশন সহ সফল হবে
Chat: 1:1 + “Prime Academy Internal” গ্রুপ কাজ করবে
উপসংহার
হ্যাঁ—এই পর্যন্ত সব বুঝেছি। কাভার করেছি: ফিচার ও ফ্লো, রোল-বেইজড অ্যাক্সেস, ডেটা মডেল, কালার/স্ট্যাটাস লজিক, মোবাইল/WebView কনসিডারেশন, ব্র্যান্ডিং, এবং ইন্টিগ্রেশন পয়েন্টস।
তুমি “start work” বললেই, আমি আর্কিটেকচারাল স্ক্যাফোল্ড, ডাটাবেস স্কিমা, এপিআই রুট ম্যাপ, এবং ফ্রন্টএন্ড রাউটিং/পেজ স্টাব—সব ফাইল-কমপ্লিট কন্টেন্টসহ তৈরি করে দেব (তোমার নিয়ম অনুযায়ী)।

ChatGPT said:

Thought for 4 seconds
ওয়ালাইকুমুসসালাম, Polok—হ্যাঁ, পুরোটা বুঝেছি।
তোমার “Prime Academy Office Management (প্রস্তাবিত শর্ট নাম: PAOM বা PrimeOPS)”–এর সব রোল, ড্যাশবোর্ড, টাস্ক/লিড/অ্যাডমিশন/অ্যাকাউন্টিং/রিক্রুটমেন্ট/DM/MG ফ্লো, কালার-লজিক, রিপোর্টিং, চ্যাট—সবই ক্লিয়ার।
আমি এখনই কাজ শুরু করছি না—শুধু ক্রিটিক্যাল পয়েন্টগুলো কনফার্ম করে রাখি, যাতে “start work” বললেই ঝামেলা ছাড়াই এগোতে পারি:

ডেডলাইন থ্রেশহোল্ড (warning-yellow): নিকটবর্তী মানে কত দিন বাকি থাকলে হলুদ হবে? (প্রস্তাব: 3 দিন)
তারিখ/সময় ও কারেন্সি: টাইমজোন Asia/Dhaka, ফরম্যাট DD.MM.YYYY ঠিক? কারেন্সি BDT?
লিড CSV স্কিমা: কলাম অর্ডার—Name, Phone, Email, InterestedCourse, Source—এভাবে ধরব? হেডার লাগবে তো?
LeadID/EmpID/CourseID ফরম্যাট: অটো-জেনারেটেড প্রিফিক্স দরকার? (যেমন LEAD-2025-0001)
অথ: ইমেইল+পাসওয়ার্ড বেসিক লগইন; পরবর্তীতে OTP/2FA লাগাতে চাও?
হোস্টিং/ডিপ্লয়: Mongo Atlas + Render/Vercel/Ubuntu VPS—কোনটা টার্গেট?
ফাইল স্টোরেজ: CSV আপলোড সার্ভারে থাকবে, CV লিংক external (GDrive/OneDrive)–এইটাই ফাইনাল?
নোটিফিকেশন: ইন-অ্যাপ নোটিফিকেশন + ইমেইল (ঐচ্ছিক) চাই?
রিপোর্টস ভিউ-অনলি: Admin/Super Admin কেবল ভিউ—এটা ফিক্সড; Accountant/Dept রোলেই CRUD—কনফার্ম।
চ্যাট রিটেনশন: মেসেজ হিস্টরি কতদিন রাখব? (ডিফল্ট: অনির্দিষ্ট, পরে purge সেটিংস)
সব ঠিক থাকলে “start work” বলবে—তখন আমি
ফোল্ডার স্ট্রাকচার,
Mongo স্কিমা,
API রুট ম্যাপ,
RBAC মিডলওয়্যার,
ফ্রন্টএন্ড রাউটিং/পেজ স্টাব,
সিড ইউজার (তোমার দেয়া নাম/ইমেইল)
পুরো ফাইল-কমপ্লিট কনটেন্টসহ দেব।
ChatGPT said:
ওয়ালাইকুমুসসালাম Polok — হ্যাঁ, সবকিছু একদম পরিষ্কার বুঝেছি।
তুমি “Prime Academy Office Management” (শর্টনেম: PAOM বা PrimeOPS)–এর জন্য যে রোল, ফিচার, ড্যাশবোর্ড, টাস্ক/লিড/অ্যাডমিশন/অ্যাকাউন্টিং/রিক্রুটমেন্ট/DM/MG ফ্লো, কালার-লজিক (deadline অনুযায়ী warn-yellow / overdue-red / early-green), রিপোর্টিং, আর ইন-অ্যাপ চ্যাট—সব ডিটেইল দিয়েছ—এসব আমি পুরোটা নোট করে বিশ্লেষণ করেছি। এখনো কোনো কোডিং শুরু করছি না—শুধু কনসেপ্ট ১০০% লক করলাম।
শুরু করার আগে দ্রুত ১০টা ক্রিটিক্যাল পয়েন্ট কনফার্ম করলে ইমপ্লিমেন্টেশন স্মুথ হবে (চাইলে এগুলো ডিফল্ট ধরা যাবে—তুমি “start work” বললেই আমি ওইভাবেই কাজ শুরু করব):

Warning থ্রেশহোল্ড (deadline-এর কতদিন আগে হলুদ হবে): ডিফল্ট ৩ দিন ধরছি।
তারিখ/সময়/কারেন্সি: Asia/Dhaka, ফরম্যাট DD.MM.YYYY, কারেন্সি BDT — ওকে?
Leads CSV স্কিমা: Name, Phone, Email, InterestedCourse, Source + হেডার—এই অর্ডার ঠিক?
ID ফরম্যাট: LEAD-2025-0001, EMP-0001, CRS-0001—এই স্টাইলে অটো-জেনারেট?
Auth: ইমেইল+পাসওয়ার্ড; পরে 2FA/OTP অপশনাল।
Deploy টার্গেট: MongoDB Atlas + (Render/Vercel/VPS) — কোনটা প্রথমে নেব?
ফাইল স্টোরেজ: CSV সার্ভারে; CV লিংক external (GDrive/OneDrive) — কনফার্ম?
নোটিফিকেশন: ইন-অ্যাপ নোটিফিকেশন অন; ইমেইল নোটিফিকেশন পরে।
Reports permissions: Admin/Super Admin = view-only (Accounting/Dept dashboards), সংশ্লিষ্ট রোলগুলোতে CRUD—ফাইনাল?
চ্যাট রিটেনশন: ডিফল্ট আনলিমিটেড; পরে purge সেটিংস।
এসব যদি তোমার কাছে ঠিক লাগে, শুধু বলো “start work”—আমি সঙ্গে সঙ্গে:
ফোল্ডার স্ট্রাকচার,
সম্পূর্ণ Mongo স্কিমা,
API রুট ম্যাপ + RBAC মিডলওয়্যার,
React রাউটিং + পেজ স্টাব,
সিড ইউজার (তোমার দেয়া নাম/ইমেইল),
ব্র্যান্ডেড UI শেল (navbar/sidebar/cards/charts)
—সব ফাইল-কমপ্লিট কনটেন্টসহ দিয়ে দেব, মোবাইল-ফার্স্ট & WebView-রেডি।
ChatGPT said:
ওয়ালাইকুমুসসালাম Polok — হ্যাঁ, পুরোটা বুঝেছি।
এখনও কোনো কোডিং/ইমপ্লিমেন্টেশন শুরু করছি না—শুধু বিশ্লেষণ কনফার্ম করছি।
আমি যেটা লক করলাম (সংক্ষেপে):

প্রজেক্ট: Prime Academy Office Management (শর্টনেম: PAOM / PrimeOPS)
স্ট্যাক: Node.js (Express) + MongoDB, ফ্রন্টএন্ডে React/Vite (Tailwind + shadcn/ui), চার্টে Recharts; Socket.io দিয়ে ইন-অ্যাপ চ্যাট
মোবাইল-ফার্স্ট UI (পরে WebView Android)
রোল/পারমিশন: Super Admin, Admin, Accountant, Admission, Recruitment, Digital Marketing, Motion Graphics — প্রত্যেকে নিজের সাইডবার/ড্যাশবোর্ডই দেখবে
টপবার: নাম/ডিজাইনেশন + প্রোফাইল ড্রপডাউন (Edit Profile, Logout), অ্যাভাটার আপডেট হবে
কোর মডিউল:
Primary Admin Dashboard (ওভারভিউ কার্ড + Admission vs Leads গ্রাফ + Enrollment pie + Social Stats + Pending/Completed Tasks + Recruitment snapshot)
Assign Task (Super Admin সবাইকে assign করতে পারে, কাউকে Super Admin-কে assign করতে দেয়া হবে না)
Admin My Task (self-assign সহ)
Accounting/Admission/Recruitment/DM/MG Reports (Admin/SAdmin ভিউ-অনলি; সংশ্লিষ্ট রোলের জন্য CRUD)
Employee List (CRUD), Courses (CRUD), Leads Center (assign to Admission; CSV bulk upload)
Workflow হাইলাইটস:
Task color logic: default white/gray → deadline কাছে এলে warning-yellow → deadline পার হলে red; সময়ের আগেই complete হলে Completed তালিকায় green
Leads → Assigned → Counseling → Admitted/Follow-up/Not Admitted পুরো পাইপলাইন
Fees Collection: Admission submit → Accountant Approve/Reject → Accounting ledger এ reflect
Recruitment: Candidate/Job/Employer + “Recruited” action (Company+Job select)
DM: Lead Entry (CSV), Cost Entry, Social Media metrics, SEO placeholder
MG: Output counters + tasks
Chat: 1:1 এবং Prime Academy Internal গ্রুপ
ব্র্যান্ডিং: Prime Academy রঙ (#053867, #253985, #F7BA23, #F3CE49), ফন্ট Poppins — সব কার্ডে আইকন/রঙ, চার্টগুলো ব্র্যান্ডেড।
শুরু করার আগে ১০টা দ্রুত কনফার্মেশন (ডিফল্ট ধরে নিলে বললে আমি সেভাবেই এগোবো):
Warning থ্রেশহোল্ড: deadline-এর ৩ দিন আগে হলুদ—ওকে?
তারিখ/সময়/কারেন্সি: Asia/Dhaka, ফরম্যাট DD.MM.YYYY, BDT—ওকে?
Leads CSV: Name, Phone, Email, InterestedCourse, Source + header—ওকে?
ID ফরম্যাট: LEAD-2025-0001, EMP-0001, CRS-0001—ওকে?
Auth: ইমেইল+পাসওয়ার্ড (পরে 2FA/OTP অপশনাল)
ডিপ্লয় টার্গেট: MongoDB Atlas + (Render/Vercel/VPS)—পছন্দটা কোনটা?
ফাইল স্টোরেজ: CSV সার্ভারে; CV external link (GDrive/OneDrive)
নোটিফিকেশন: ইন-অ্যাপ অন; ইমেইল পরে
Reports permission: Admin/SAdmin = view-only (Accounting/Dept), সংশ্লিষ্ট রোলে CRUD—ফাইনাল?
চ্যাট রিটেনশন: ডিফল্ট আনলিমিটেড; পরে purge সেটিংস
সব ঠিক থাকলে শুধু বলো “start work” — তখন আমি একদম প্রস্তুত ফাইল-কমপ্লিট ডেলিভারেবল দেব: ফোল্ডার স্ট্রাকচার, Mongo স্কিমা, API রুট ম্যাপ + RBAC, React রাউটিং/পেজ স্টাব, সিড ইউজার, ব্র্যান্ডেড UI শেল—সব মোবাইল/WebView রেডি।
You said:
যেভাবে বুঝেছও সেভাবে ঠিক আছে একদম এভাবেই সঠিক ভাবে সব করতে পারবা ? কোনো লজিক মিস হওয়া যাবেনা . আপাতত চ্যাটিং ফিচার টা বাদ দিতে পারো, খুব পরিষ্কার ভাবে করতে হবে তেমন ভুল করা যাবেনা কারন ভুল করলে বার বার এরোর ফিক্সক করতে হয় এবং চ্যাটজিপিটি খুব স্লো হয়ে যায় তখন কাজ করা যায়না
ChatGPT said:

Thought for a few seconds
আলহামদুলিল্লাহ — হ্যাঁ, একদম এভাবেই সঠিকভাবে করতে পারব।
আরও ক্লিয়ার করে বলি: তোমার সব লজিক/রুলস আমি লক করে ফেলেছি, চ্যাটিং ফিচার আপাতত বাদ। ভুল কমানোর জন্য নিচে কঠোর গার্ডরেইল, ভ্যালিডেশন, আর অ্যাকসেপ্টেন্স ক্রাইটেরিয়া সাজিয়ে দিলাম—যাতে কোড লেখা শুরু করলে কোনোকিছু মিস না হয়।
কী কী “মিস হবে না”—Core Logic Lock
RBAC:
Super Admin = full access; কেউ Super Admin-কে টাস্ক assign করতে পারবে না।
Admin = assign to all (except SA), own “My Task”, সব Dept রিপোর্ট view-only।
Accountant/Admission/Recruitment/DM/MG = নিজেদের মডিউলের CRUD + বাকি রিপোর্ট view-only।
Deadline Color Rules (configurable, default 3 দিন):
Default: white/gray
0 < daysLeft <= 3 → warn-yellow
daysLeft <= 0 → red (overdue)
Completed before deadline → green (Completed তালিকায়)
Task Moves: Pending থেকে Completed-এ অটো-মুভ; Completed pending তালিকায় থাকবে না।
Leads Flow: Lead Entry/CSV → Assign to Admission → Start Counseling → (Admitted / Follow-Up / Not Admitted) — তিনটা বালতি আলাদা।
Fees Flow: Admission submit → Accountant Approve/Reject → Income ledger reflect।
Recruitment Flow: Candidate → (Recruited action → select Company+Job) → Recruited তালিকায় যাবে।
Reports View-Only: Admin/SAdmin পেজে অ্যাকাউন্টিং/ডিপার্টমেন্টাল রিপোর্ট strictly read-only।
Brand/UI: Prime Academy রঙ + Poppins; সব কার্ডে আইকন+রঙ; গ্রাফ/পাই responsive; মোবাইল-ফার্স্ট।
ভুল ঠেকাতে আমি যে সেফটি-নেট দেব
Schema-level validation (Mongoose + Joi/Zod at API boundary)
Phone, Email, Amount, Dates (ISO) কঠোরভাবে চেক।
Enum ফিল্ড (Task.Status, Lead.Source, Payment.Method, etc.) কড়া enum।
Atomic transitions
Counseling → Admitted/Follow-Up/Not Admitted = single-source-of-truth history trail।
RBAC middleware + route guards
Sensitive routes (assign-to SA, approve-fee) hard-block।
Consistent ID generator
LEAD-YYYY-####, EMP-####, CRS-#### — collision-safe, indexed।
CSV Safe Import
Header required; strict columns (Name,Phone,Email,InterestedCourse,Source)
Duplicate phone/email detection (soft warn + skip/merge policy)।
UI “safe by default”
Disabled actions for unauthorized roles (not hidden only).
Confirm modals for destructive ops (Delete, Approve/Reject)।
Error surfaces
API returns normalized errors {code, message, fields?}; UI toast + inline field errors।
Config flags
Warning threshold days, currency (BDT), date format (DD.MM.YYYY) — .env/settings থেকে।
Audit & History
Key actions: assign, status change, approve/reject—actor+timestamp লগ।
E2E happy-path tests (minimum)
Assign Task rules, Lead lifecycle, Fees approve, Recruitment recruited-action, Role guards।
সংক্ষিপ্ত RBAC Matrix (হাইলাইট)
SAdmin: All CRUD + view-all reports + assign-anyone; cannot be assigned (rule-enforced)
Admin: Assign (except SA), My Task, Leads assign, view-only dept dashboards
Accountant: Fees approve/reject, Income/Expense CRUD, view-only others
Admission: Leads pipeline + Fees collection submit, Courses view
Recruitment: Candidate/Job/Employer CRUD, Recruit action, Income/Expense (recruitment scope)
DM: Lead/Cost/Social metrics CRUD, CSV import, My Task
MG: Output counters + My Task
Acceptance Criteria (চেকলিস্ট)
 প্রতিটি রোল নিজের সাইডবার/ড্যাশবোর্ডই দেখে
 Super Admin-কে assign করার কোনো পথ নেই (API+UI দু’জায়গায় ব্লক)
 Pending/Completed টাস্কের কালার-লজিক ডেডলাইনের সাথে ঠিকমতো কাজ করে
 Leads → Assign → Counseling → Admitted/Follow-Up/NotAdmitted — প্রতিটি ট্রানজিশনে history লগ হয়
 Fees submit হলে Accountant পেজে আসে; Approve/Reject করলে status ও লেজার আপডেট হয়
 CSV bulk upload strict schema + duplicate handling
 Reports (Accounting/Dept) Admin/SAdmin-এ view-only (CRUD বোতাম থাকলে disabled/hidden)
 Courses/Employee/Jobs/Employer CRUD ঠিকমতো কাজ করে
 সব চার্ট responsive; মোবাইলে সাইডবার collapsible; টেবল হরাইজন্টাল-স্ক্রলেবল
 ENV configs (BDT, DD.MM.YYYY, threshold days) প্রযোজ্য
প্রস্তুতি (তুমি “start work” বললে যা দেব)
ফোল্ডার স্ট্রাকচার (api/web) + সম্পূর্ণ Mongo Schemas
API route map + RBAC middleware
React routes + পেজ স্টাব (সব স্ক্রিন)
Seed users (তোমার দেওয়া নাম/ইমেইল)
ব্র্যান্ডেড UI শেল (navbar/sidebar/cards/charts)
Sample CSV টেমপ্লেট (Leads)
Minimal test cases + Postman/Thunder collection
নোট: তোমার নির্দেশ অনুযায়ী চ্যাটিং ফিচার বাদ—পরবর্তীতে সহজে প্লাগ-ইন করা যাবে এমন হুক রেখে দেব (Socket.io wiring optional/disabled)।
সব সেট। যদি প্রস্তুত থাকো, লিখো “start work” — আমি সঙ্গে সঙ্গে ইমপ্লিমেন্টেশন ড্রপ করব ফাইল-কমপ্লিট কনটেন্টসহ, যাতে কপি-পেস্টেই রান হয়।
You said:
RBAC:
Super Admin = full access বলতে কি বুঝাইছো ?
ChatGPT said:
খুব ভালো প্রশ্ন করেছো, Polok 💡
👉 “Super Admin = full access” বলতে আমি বোঝাতে চেয়েছি—এই রোলটার সব ধরনের পারমিশন থাকবে। মানে অন্য সব রোলের মধ্যে যেসব পারমিশন ভাগ করা হয়েছে (CRUD, Assign, View, Approve ইত্যাদি), Super Admin একাই সবকিছু করতে পারবে।

আরও পরিষ্কারভাবে বলি 👇

পারমিশন	Super Admin কী করতে পারবে
Task Management	সবাইকে (Admin, Accountant, Admission, Recruitment, DM, MG) টাস্ক assign করতে পারবে। নিজের জন্যও টাস্ক তৈরি করতে পারবে।
CRUD Access	সব মডিউলে (Employee, Courses, Leads, Tasks, Accounting, Admission, Recruitment ইত্যাদি) Create, Read, Update, Delete করতে পারবে।
Reports View	সব রিপোর্ট (Accounting, Admission, Recruitment, Digital Marketing, Motion Graphics) দেখতে পারবে।
Approval Actions	Accountant approval দরকার এমন বিষয় (যেমন Fees Approve, Expense Entry) সরাসরি দেখতে বা modify করতে পারবে।
User Management	নতুন ইউজার যোগ করা, ইউজার ইনঅ্যাক্টিভ করা, পাসওয়ার্ড রিসেট করা—সব পারবে।
System Settings	সাইটের কনফিগারেশন (branding, threshold days, ইত্যাদি) পরিবর্তন করতে পারবে।
Audit View	কে কখন কী পরিবর্তন করেছে—সব লগ দেখতে পারবে।
Restriction	শুধুমাত্র একটা সীমা আছে → অন্য কেউ (Admin সহ) Super Admin-কে কোনো টাস্ক assign করতে পারবে না।
অর্থাৎ সহজ কথায় —
Super Admin পুরো সফটওয়্যারের root-level controller।
সে সব মডিউলে ঢুকতে, সব ডাটা দেখতে, সব সেটিংস পরিবর্তন করতে, এবং যে কাউকে অ্যাকশন দিতে পারবে।
চাওলে আমি এখন একটা ছোট টেবিল বানিয়ে দেখাতে পারি—“Super Admin বনাম Admin বনাম অন্যদের পারমিশন কম্পারিজন।”
তুমি কি সেটা দেখতে চাও?
You said:
না টাস্ক অ্যাসাইন ছাড়া অন্য কিছু করতে পারবেনা , সব রিপো‍র্ট শুধু দেখতে পাবে , লিড সেন্টারের ডাটা ও শুধু দেখতে পাবে, লিড আপ্লোড, লিড এন্ট্রি , লিড অ্যাসাইন টু অ্যাডমিশন পিপল সব করবে ডিজিটাল মা‍র্কেটিং (এডমিন/সুপার অ্যাডমিন শুধু লিড সেন্টার লিড গুলো দেখতে পাবে , বরং স্টাটাস দিয়ে একটা ফিল্টার রাখা যাইতে পারে ( Assigned, Admitted, In-Follow Up, Counseling, Not Admitted ) 
ChatGPT said:
একদম বুঝেছি, Polok ✅
তাহলে এখন থেকে Super Admin রোলের সংজ্ঞা এভাবে ফাইনাল লক করলাম 👇

🔒 Super Admin Role (Final Definition)
মূল কাজ: শুধু পুরো অফিসের অবস্থা মনিটর করা ও রিপোর্ট দেখা, নিজের হাতে কোনো ডাটা এন্ট্রি বা মডিফাই না করা।
✅ পারবে
📊 সব ড্যাশবোর্ড ও রিপোর্ট দেখতে পারবে
Accounting Report
Admission Report (Filter: Individual Member)
Recruitment Report
Digital Marketing Report
Motion Graphics Report
🧭 Dashboard Overview দেখবে
Cards (Total Admission, Leads, Revenue ইত্যাদি)
Graph (Admission vs Leads)
Pie Chart (Enrollment by Course)
📋 Task Assign করতে পারবে
সবার (Admin, Accountant, Admission, Recruitment, DM, MG) মধ্যে টাস্ক assign করতে পারবে
নিজেকে কেউ assign করতে পারবে না (rule enforced)
👀 Lead Center View-Only
শুধু লিড লিস্ট দেখতে পারবে
Status Filter থাকবে:
Assigned
Admitted
In-Follow Up
Counseling
Not Admitted
কোনো নতুন Lead Entry / Upload / Assign করতে পারবে না
❌ পারবে না
❌ Lead upload, Lead entry, Lead assign করা (সব Digital Marketing করবে)
❌ Admission data add/update/delete করা
❌ Accounting data modify করা
❌ Recruitment, DM, MG মডিউলে কিছু CRUD করা
❌ Course বা Employee modify/add/delete করা
❌ Income/Expense/Fees approve করা
👉 মানে দাঁড়াল:
Super Admin = Purely monitoring + task assigning power only.
কোনো ডাটা পরিবর্তন বা নতুন কিছু create করতে পারবে না, কেবল reports এবং task assign ফিচার থাকবে।
এখন যদি তুমি চাও, আমি পরের ধাপে প্রতিটি রোলের (Admin, DM, Admission, Accountant, Recruitment, MG) exact permission matrix বানিয়ে দিই—টেবিল আকারে, যাতে ভবিষ্যতে RBAC কোডে সেট করা একদম সহজ হয়।
বলে দাও, কি সেটটা তৈরি করে দিই?
You said:
Admin Role ?
ChatGPT said:
দারুন 💪 এখন নিচে আমি Admin Role-এর ক্ষমতা, সীমাবদ্ধতা আর অ্যাকশন-ফ্লো একদম পরিষ্কারভাবে লিখে দিচ্ছি — যাতে পরে RBAC সেটআপ করতে কোনো বিভ্রান্তি না থাকে 👇
🧭 Admin Role (Final Definition)
মূল কাজ:
Prime Academy-র অফিস ম্যানেজমেন্ট ও টাস্ক কোঅর্ডিনেশন হ্যান্ডল করা, কিন্তু কোনো ডিপার্টমেন্টের ডেটা সরাসরি পরিবর্তন না করা। Admin টিমকে কাজ দেয়, অগ্রগতি দেখে, রিপোর্ট মনিটর করে।
✅ Admin যা করতে পারবে
🧩 Dashboard
নিজের Admin Dashboard দেখতে পারবে
Cards, Graph, Pie Chart – সব Office Overview ডেটা দেখতে পারবে
Pending / Completed Task list দেখতে পারবে
🧾 Task Management
Assign Task →
Accountant, Admission, Recruitment, Digital Marketing, Motion Graphics—সব রোলকে টাস্ক দিতে পারবে
Super Admin-কে টাস্ক দিতে পারবে না
My Task / To-Do List →
নিজের জন্য Self Task তৈরি করতে পারবে
নিজের টাস্কের স্ট্যাটাস (In-Progress / Completed) আপডেট করতে পারবে
Deadline-based Color Logic (white → yellow → red / green) কাজ করবে
📋 Reports & Monitoring (View-Only)
Admin শুধুমাত্র রিপোর্ট দেখতে পারবে, কোনো ডেটা পরিবর্তন করতে পারবে না:
Accounting Reports (view-only)
Admission Reports (view-only + filter by team member)
Recruitment Reports (view-only + filter by team member)
Digital Marketing Reports (view-only)
Motion Graphics Reports (view-only)
🧍‍♂️ Employee List
সব Employee তথ্য দেখতে পারবে
CRUD পারবে (Add, Edit, Delete)
🎓 Courses
Add, Edit, Inactive করতে পারবে
Course Module দেখতে পারবে
🎯 Leads Center (View-Only)
শুধু লিড ডেটা দেখতে পারবে
Filter থাকবে Status অনুযায়ী:
Assigned
Admitted
In-Follow Up
Counseling
Not Admitted
কিন্তু Lead Entry / Upload / Assign করতে পারবে না (এটা কেবল Digital Marketing করবে)
❌ Admin যা পারবে না
❌ Super Admin-কে টাস্ক দিতে পারবে না
❌ Lead Entry, Upload, Assign করতে পারবে না
❌ Accountant-এর মতো Fees Approve / Reject করতে পারবে না
❌ Admission / Recruitment ডেটা নিজে থেকে Edit করতে পারবে না
❌ Income / Expense Add করতে পারবে না
❌ Digital Marketing / MG Output বা Social Report Edit করতে পারবে না
⚙️ অতিরিক্ত ক্ষমতা / Utility
সমস্ত রিপোর্ট ও ড্যাশবোর্ডে filter / search option থাকবে
Admin নিজের প্রোফাইল (নাম, ইমেইল, ছবি) Edit করতে পারবে
Logout ও Profile Dropdown থাকবে
মোবাইল রেসপনসিভ UI থাকবে যাতে WebView-তেও সুন্দর দেখায়
📌 সারসংক্ষেপে:
Admin = অফিস ম্যানেজার, যিনি কাজ বিতরণ করেন, অগ্রগতি মনিটর করেন, রিপোর্ট দেখেন, কিন্তু কোনো ডিপার্টমেন্টের কোর ডেটা পরিবর্তন করেন না।
তুমি কি চাও আমি এখন একইভাবে Accountant Role-এর বিস্তারিত পারমিশন লিখে দিই (CRUD + Reports + Interaction flow সহ)?
You said:
Accountant Role
ChatGPT said:
একদম ঠিক আছে Polok 💼
নিচে আমি Accountant Role (Final Definition) একদম পরিষ্কারভাবে সাজিয়ে দিচ্ছি — যাতে সিস্টেমে সেট করলে কোনো কনফিউশন না থাকে 👇
💰 Accountant Role (Final Definition)
মূল কাজ:
Prime Academy-র সব ফিনান্সিয়াল কার্যক্রম—যেমন income, expense, এবং admission fees collection review পরিচালনা করা।
Accountant কোনো রিপোর্ট view করবে না শুধু; সে তার ফিনান্স মডিউলে ডেটা add/update/approve করতে পারবে, কিন্তু অন্য ডিপার্টমেন্টে ঢুকতে পারবে না।
✅ Accountant যা করতে পারবে
🧩 Dashboard
নিজস্ব Accountant Dashboard দেখতে পারবে।
Cards →
Income
Expense
Profit (Income - Expense হিসাব)
Balance in My Hand
Graph → Income vs Expense চার্ট (মাসভিত্তিক বা সময়ভিত্তিক)
🧾 My Task / To-Do List
নিজের জন্য Self Task তৈরি করতে পারবে (Add My Task button → Popup Form)
নিজের টাস্কে স্ট্যাটাস আপডেট করতে পারবে (In Progress / Completed)
Deadline color logic:
Default: white/gray
Deadline নিকটবর্তী: warning-yellow
Deadline পেরিয়ে গেলে: red
সময়ের আগেই complete হলে: green
💵 Admission Fees Collection Review
Admission Department থেকে আসা ফি রিভিউ করতে পারবে।
List Columns: Lead ID, Name, Course, Amount, Payment Method, Submitted By, Date, Status.
Action Buttons:
✅ Approve (ফি বৈধ ও সঠিক)
❌ Reject (ফি ভুল বা ডুপ্লিকেট)
Approve করলে সেই রেকর্ড Income Table-এ অটো এন্ট্রি হবে।
💰 Income Management
Approved Admission Fees এন্ট্রি দেখতে পারবে।
Add Income Button: Popup Form → (Date, Source of Income, Amount, Remarks optional)
অন্যান্য ইনকাম (যেমন Software Sale, Partnership ইত্যাদি) ম্যানুয়ালি add করতে পারবে।
সব Income list দেখতে পারবে, Edit/Delete করতে পারবে।
💸 Expense Management
Expense List Columns: Date, Purpose of Expense, Amount, Added By.
Add Expense Button: Popup Form → (Date, Purpose, Amount, Remarks optional)
নিজে এন্ট্রি করা Expense Edit/Delete করতে পারবে।
Expense purpose হতে পারে: Office Rent, Utility Bills, Marketing Cost, Travel, ইত্যাদি।
📊 Reports (Own + View Only Others)
Accounting Report → Full CRUD (নিজস্ব মডিউল)
Admission / Recruitment / DM / MG Reports → শুধুমাত্র View-only
(কোনো ডেটা এডিট বা মডিফাই করতে পারবে না)
👤 Profile Management
নিজের প্রোফাইল (Name, Photo, Password) Edit করতে পারবে।
Logout Dropdown থাকবে।
❌ Accountant যা পারবে না
❌ অন্য কাউকে Task Assign করতে পারবে না (শুধু নিজের task করতে পারবে)
❌ Lead Center বা Admission Lead modify করতে পারবে না
❌ Courses / Employee / Recruitment ডেটা add/edit/delete করতে পারবে না
❌ Digital Marketing এর Lead Entry, Cost Entry, বা Social Report modify করতে পারবে না
❌ Motion Graphics রিপোর্টে কিছু পরিবর্তন করতে পারবে না
🧮 Automatic Calculation & Validation
Fees Approve হলে Income Table-এ auto-create হবে (Source = “Admission Fees”)
Expense / Income সবসময় BDT format-এ দেখাবে (৳ sign সহ)
Dashboard Profit = Total Income – Total Expense
Balance in My Hand = (Profit – Cash Withdrawals [future feature])
📌 সারসংক্ষেপে:
Accountant = Prime Academy-এর ফিনান্স ম্যানেজার। সে ফি রিভিউ করে, ইনকাম ও এক্সপেন্স ট্র্যাক করে, ফিনান্সিয়াল রিপোর্ট তৈরি করে — কিন্তু অন্য কোনো ডিপার্টমেন্টের ডেটা পরিবর্তন করে না।
তুমি কি এখন চাও আমি একইভাবে Admission Department Role-এর বিস্তারিত পারমিশন লিখে দিই (Lead flow, Fees collection, Counseling ইত্যাদি সহ)?
You said:
Admission Department Role
ChatGPT said:
চমৎকার Polok 🎓
এখন নিচে দিচ্ছি Admission Department Role (Final Definition) — Prime Academy OPS-এর সবচেয়ে গুরুত্বপূর্ণ অংশগুলোর একটি, কারণ এখানেই লিড থেকে অ্যাডমিশন পর্যন্ত পুরো কনভার্শন ফ্লো চলে।
🎓 Admission Department Role (Final Definition)
মূল কাজ:
Digital Marketing থেকে আসা লিডগুলো নিয়ে কাজ করা — Counseling, Follow-Up, Admission Confirm করা এবং Admission Fees Collection জমা দেওয়া।
✅ Admission Department যা করতে পারবে
🧩 Dashboard
নিজস্ব Admission Dashboard দেখতে পারবে।
Cards:
Total Admission
Total Counseling
In Follow-Up
Not Admitted
Admission Fees Collection (Submitted)
Total Assigned Lead
Graph:
Admission Done vs In-Follow Up vs Total Collection
Pie Chart:
Admitted Students by Course
🧾 My Task / To-Do List
নিজের জন্য Self Task তৈরি করতে পারবে (Add My Task button → Popup Form)।
নিজের টাস্কে স্ট্যাটাস আপডেট করতে পারবে (In Progress / Completed)।
Deadline color logic:
Default = white/gray
Deadline নিকটবর্তী = warning-yellow
Deadline পেরিয়ে গেলে = red
Deadline-এর আগে Complete হলে = green
🧠 Assigned Lead
Digital Marketing টিম / Admin থেকে Assigned Lead দেখতে পারবে।
Lead Columns: Lead ID, Name, Phone, Email, Interested Course, Source, Assigned Date, Status।
Action: 🟢 Start Counseling → Counseling পেজে যাবে।
💬 Counseling
Counseling পেজে Assigned Leads দেখা যাবে (যাদের Status = Counseling)।
Action Buttons:
✅ Admitted
🔁 Follow-Up
❌ Not Admitted
কোনো Lead একবার Counseling শুরু করলে Status স্বয়ংক্রিয়ভাবে “Counseling” হবে।
🎯 Admitted
Counseling পেজে “Admitted” বাটনে ক্লিক করলে Lead এখানে চলে আসবে।
List Columns: Lead ID, Name, Course, Counselor, Date, Payment Status (from Accountant)।
🔁 In Follow-Up
Counseling থেকে “Follow-Up” বাটনে ক্লিক করলে Lead এখানে আসবে।
এখান থেকে আবার Admitted বা Not Admitted করা যাবে।
❌ Not Admitted
Counseling বা Follow-Up পেজ থেকে যেসব Lead “Not Admitted” করা হবে, সেগুলো এখানে দেখা যাবে।
শুধুমাত্র view করার জন্য, কোনো পরিবর্তন করা যাবে না।
🎓 Courses
Admin অ্যাড করা সব Course-এর লিস্ট দেখতে পারবে।
কোনো Course add/edit/inactive করার অনুমতি থাকবে না।
Course details দেখতে পারবে (duration, fee, teacher)।
💵 Admission Fees Collection
শুধুমাত্র নিজের department-এর Fees Collection দেখতে পারবে।
List Columns: Lead ID, Name, Course Name, Amount, Payment Method, Payment Date, Accountant Status (Approved/Rejected)।
Collect Fees Button:
Popup Form →
Lead ID (auto), Name (auto), Course (dropdown)
Amount
Payment Method (Bkash, Nagad, Rocket, Bank Transfer, Cash on Hand)
Payment Date
Submission-এর পর স্ট্যাটাস = “Pending Review”
Accountant রিভিউ শেষে “Approved” বা “Rejected” হবে।
👤 Profile Management
নিজের প্রোফাইল (Name, Photo, Password) Edit করতে পারবে।
Logout Dropdown থাকবে।
❌ Admission Department যা পারবে না
❌ Lead Entry, Upload, বা Assign করতে পারবে না (এটা DM করবে)।
❌ Accountant-এর মতো Approve/Reject করতে পারবে না।
❌ Course বা Employee add/edit করতে পারবে না।
❌ Recruitment, DM, MG ড্যাশবোর্ডে ঢুকতে পারবে না।
❌ কোনো Task অন্য কাউকে Assign করতে পারবে না (শুধু নিজের Task)।
⚙️ Automatic Flow & Validation
Counseling শুরু করলে → Status auto “Counseling”
Admitted / Follow-Up / Not Admitted বাটনে ক্লিক করলে → Status auto update + History log save
Collect Fees submit করলে → Accountant Dashboard-এ auto-notify হবে
Accountant Approve করলে → Admission Fees Collection status update হবে
📌 সারসংক্ষেপে:
Admission Department = Lead Conversion Unit 🎯
তারা লিড নিয়ে Counseling করে, Follow-Up নেয়, Admitted করে, Fees Collect করে এবং Accountant-কে রিভিউয়ের জন্য পাঠায়।
তুমি কি চাও আমি এখন একইভাবে Recruitment Department Role বিস্তারিতভাবে লিখে দিই (Candidate flow, Employer, Job Position, Income/Expense সহ)?
You said:
Recruitment Department Role
ChatGPT said:
অসাধারণ Polok 👔
এখন নিচে দিচ্ছি Recruitment Department Role (Final Definition) — একদম ক্লিয়ার ও প্রোডাকশন-রেডি লজিকসহ, যাতে কোনো অংশ মিস না হয় 👇
👔 Recruitment Department Role (Final Definition)
মূল কাজ:
Prime Academy-র পার্টনার কোম্পানিগুলোর জন্য প্রার্থী সংগ্রহ, স্ক্রিনিং, এবং রিক্রুটমেন্ট সম্পন্ন করা। Candidate, Job Position, Employer, Income, Expense—সব রিক্রুটমেন্ট-সম্পর্কিত কাজ এই রোলের অধীনে।
✅ Recruitment Department যা করতে পারবে
🧩 Dashboard
নিজস্ব Recruitment Dashboard দেখতে পারবে।
Cards:
Total Recruitment (মোট নিয়োগ সম্পন্ন)
Pending Candidate
Active Job Position
Total Employer
Graph:
Candidate vs Recruited (সময় বা মাসভিত্তিক তুলনামূলক গ্রাফ)
🧾 My Task / To-Do List
নিজের জন্য Self Task তৈরি করতে পারবে (Add My Task button → Popup Form)।
নিজের টাস্কে স্ট্যাটাস পরিবর্তন করতে পারবে (In Progress / Completed)।
Deadline color logic:
Default = white/gray
Deadline নিকটবর্তী = warning-yellow
Deadline পার হলে = red
Deadline-এর আগে Complete হলে = green
👤 Candidate Management
Candidate List দেখতে পারবে:
Columns:
Candidate ID (CanID)
Name
Job Interest
CV Source (Facebook, LinkedIn, BdJobs, Reference, Prime Academy, Others)
District
Trained? (Yes/No)
Date
View CV (external link: Google Drive/OneDrive)
Action: “Recruited”
Add Candidate Button:
Popup Form →
Name
Job Interest
CV Source
District
Trained? (Yes/No)
CV Link (Google Drive/OneDrive URL)
Date (auto default: today)
🏢 Recruited List
“Recruited” বাটনে ক্লিক করলে Candidate ডাটা এখানে চলে আসবে।
Action Flow:
“Recruited” ক্লিক করলে Popup ওপেন হবে →
Select Company Name (from Employer list)
Select Job Position (from Job Position list)
Submit করলে সেই প্রার্থী “Recruited List”-এ যোগ হবে।
Columns: CanID, Name, Job Position, Employer, Date.
💼 Job Position Management
List Columns: Job ID, Job Position, Employer Name, Salary Range, Deadline, Status (Active/Inactive)।
Add Job Position Button: Popup Form →
Job Position
Employer Name (dropdown from Employer list)
Salary Range
Deadline
Status (Active/Inactive)।
Job Edit/Delete করতে পারবে।
🏢 Employer Management
List Columns: Employer ID, Employer Name, Address, Job Location, MoU Date.
Add Employer Button: Popup Form →
Employer Name
Address
Job Location
MoU Date
Employer ডাটা Edit/Delete করতে পারবে।
💰 Income Management (Recruitment Scope)
List Columns: Date, Source of Income, Amount.
Add Income Button: Popup Form →
Date
Source (e.g., Employer Fee, Commission, Consultancy, Others)
Amount
Edit/Delete পারবে (নিজের Recruitment মডিউলের মধ্যেই সীমাবদ্ধ)।
💸 Expense Management (Recruitment Scope)
List Columns: Date, Purpose of Expense, Amount.
Add Expense Button: Popup Form →
Date
Purpose (e.g., Candidate Screening, Travel, HR Event, Others)
Amount
Edit/Delete পারবে (নিজের মডিউলের Expense)।
👀 Reports (View-Only)
View-only Access:
Accounting Reports
Admission Reports
Digital Marketing Reports
Motion Graphics Reports
👤 Profile Management
নিজের প্রোফাইল (Name, Photo, Password) Edit করতে পারবে।
Logout Dropdown থাকবে।
❌ Recruitment Department যা পারবে না
❌ Task Assign করতে পারবে না (শুধু নিজের Task)।
❌ Lead Entry / Lead Center / Admission Fees অ্যাক্সেস করতে পারবে না।
❌ Course বা Employee CRUD করতে পারবে না।
❌ Accounting মডিউলে ইনকাম/এক্সপেন্স modify করতে পারবে না (নিজের মডিউল ছাড়া)।
❌ Digital Marketing বা Motion Graphics ড্যাশবোর্ডে ঢুকতে পারবে না।
⚙️ Automatic Flow & Validation
Candidate Add হলে auto-generate হবে CAN-YYYY-#### ID।
“Recruited” action দিলে auto “Recruited” টেবিলে স্থানান্তর হবে।
Employer / Job Position dropdown সবসময় Active status অনুযায়ী Populate হবে।
Income/Expense ফরমে negative amount disallow করা হবে।
সব তারিখ DD.MM.YYYY format এ থাকবে।
📌 সারসংক্ষেপে:
Recruitment Department = Talent Acquisition Unit 👥
তারা Candidate ম্যানেজ করে, Employer ও Job Position যুক্ত করে, Recruited লিস্ট তৈরি করে এবং নিজস্ব Income/Expense ট্র্যাক করে।
তুমি কি এখন চাও আমি একইভাবে Digital Marketing Role-এর বিস্তারিত পারমিশন ও লজিক লিখে দিই (Lead Entry, Cost Entry, Reports ইত্যাদি সহ)?
You said:
Digital Marketing Role
ChatGPT said:
চমৎকার Polok 💛
এবার নিচে দিচ্ছি তোমার প্রিয় সেকশন — Digital Marketing Role (Final Definition) — যেটা Prime Academy Office Management (PAOM) সফটওয়্যারের সবচেয়ে গতিশীল অংশ হবে।
এটা আমি তোমার দেওয়া নির্দেশনাগুলো একদম production-grade clarity তে সাজিয়ে লিখেছি👇
💛 Digital Marketing Role (Final Definition)
মূল কাজ:
Prime Academy-র সব অনলাইন মার্কেটিং অ্যাক্টিভিটি পরিচালনা করা — Content Publish, Meta Ads, Lead Generation, Lead Upload, Lead Assignment, Expense Tracking, Social Media Report আপডেট করা।
✅ Digital Marketing যা করতে পারবে
🧩 Dashboard
নিজের Digital Marketing Dashboard দেখতে পারবে।
Cards:
Task Completed
Total Leads
Total Cost / Expense
Total Content Published
Graph:
Lead Entry by Category (Meta Lead, LinkedIn Lead, Manual, Others)
Pie Chart:
Content Published by Platform (Facebook, LinkedIn, Instagram, X, YouTube, etc.)
🧾 My Task / To-Do List
নিজের জন্য Self Task তৈরি করতে পারবে (Add My Task button → Popup Form)।
Form Fields:
Date
Task Description
Assigned By (auto/self)
Category (dropdown: Content Published, Meta Ad, LinkedIn Ad, SEO, Website Task, Lead Entry)
Platform (dropdown: Facebook, LinkedIn, Instagram, X, Pinterest, YouTube, WhatsApp, Telegram, Blogger, Directory Page, Website, Others)
Deadline
Task Status: Dropdown (In Progress / Completed)
Color Logic:
Default = white/gray
Deadline নিকটবর্তী = warning-yellow
Deadline পার হলে = red
Deadline-এর আগে complete হলে = green
🧩 Lead Entry
Digital Marketing একমাত্র রোল যেটা Lead Entry / Upload / Assign করতে পারবে।
Lead Entry Form:
Name
Phone
Email
Interested Course (dropdown: course list থেকে)
Source (dropdown: Meta Lead, LinkedIn Lead, Manually Generated Lead, Others)
Date (auto default: today)
Bulk Upload:
CSV Upload option থাকবে (format: Name, Phone, Email, Interested Course, Source)।
ডুপ্লিকেট ফোন/ইমেইল চেক করে warning দেবে।
Lead Entry হলে তা স্বয়ংক্রিয়ভাবে Lead Center-এ যোগ হবে।
🎯 Leads Center (Full Control)
সব লিডের লিস্ট দেখতে পারবে (নিজে Entry করা + Bulk Upload করা)।
Columns: Lead ID, Date, Name, Phone, Email, Interested Course, Source, Status, Action।
Status: Admission Team দ্বারা আপডেট হয় (Assigned, Counseling, In-Follow Up, Admitted, Not Admitted)।
Action:
“Assign to Employee” Dropdown → Admission Department Member list থেকে select।
Assign করলে Lead স্বয়ংক্রিয়ভাবে সেই সদস্যের “Assigned Lead” টেবিলে চলে যাবে।
Filter: Status অনুযায়ী লিড দেখা যাবে (Assigned, Counseling, In-Follow Up, Admitted, Not Admitted)।
Permission Note:
শুধুমাত্র Digital Marketing Lead assign করতে পারবে।
Super Admin ও Admin শুধুমাত্র view & filter করতে পারবে (assign/edit করতে পারবে না)।
💸 Cost Entry / Expense
List Columns: Date, Purpose, Amount।
Add Cost Entry Button: Popup Form →
Date
Purpose (dropdown: Meta Ads, LinkedIn Ads, Software Purchase, Subscription, Others)
Amount
Add, Edit, Delete করতে পারবে (নিজের খরচের ডেটা)।
🌐 Social Media Reports
Form Fields:
Facebook Followers
Instagram Followers
Facebook Group Members
YouTube Subscribers
LinkedIn Followers
X Followers
Pinterest Views
Blogger Impression
Total People Reach
Buttons: Update / Cancel
এই ডেটা Admin/Super Admin Dashboard-এর “Social Media Report” কার্ডে রিফ্লেক্ট করবে।
🧭 SEO Reports
Placeholder / Future Expansion Section।
(এখন খালি থাকবে কিন্তু Dashboard-এ মেনু দেখা যাবে।)
👤 Profile Management
নিজের প্রোফাইল (Name, Photo, Password) Edit করতে পারবে।
Logout Dropdown থাকবে।
❌ Digital Marketing যা পারবে না
❌ Accountant Dashboard বা Accounting Reports-এ ঢুকতে পারবে না।
❌ Admission Fees Collection দেখতে বা Modify করতে পারবে না।
❌ Recruitment বা Motion Graphics মডিউলে ঢুকতে পারবে না।
❌ অন্য কাউকে টাস্ক Assign করতে পারবে না (শুধু নিজের টাস্ক)।
❌ Course বা Employee CRUD করতে পারবে না।
⚙️ Automatic Flow & Validation
CSV Upload → Duplicate ফোন/ইমেইল ফিল্টার → Warning
Assign Lead → Lead status auto “Assigned”
Admission Team যখন Counseling শুরু করে → Status auto “Counseling”
Admission যখন Admitted/Follow-Up/Not Admitted করে → DM Dashboard stats auto update
Cost Entry submit করলে → Total Cost Card auto update হয়
Social Media Report update করলে → Dashboard “Social Stats” auto refresh হয়
📌 সারসংক্ষেপে:
Digital Marketing = Growth Engine of Prime Academy 🚀
তারা Lead তৈরি করে, Upload করে, Assign করে, Marketing খরচ ট্র্যাক করে, আর Social Media Performance রিপোর্ট আপডেট করে।
তুমি কি এখন চাও আমি একইভাবে Motion Graphics Role-এর বিস্তারিত পারমিশন ও লজিক লিখে দিই (Task, Output Report, Graph ইত্যাদি সহ)?
You said:
SEO Reports
SEO Reports- Date, Type of Work (Blogpost, Backlink, Social Bookmarking, Keyword Research, Others) Challenge, Details,  

add button for popup form 
ChatGPT said:
একদম ঠিক, Polok 🔍
তোমার দেওয়া SEO Reports সেকশনটা এখন পুরোপুরি ফাইনাল ও প্রোডাকশন-রেডি ফরম্যাটে নিচে সাজিয়ে দিচ্ছি — যাতে সরাসরি UI ও ব্যাকএন্ডে বসানো যায় 👇
🔍 SEO Reports (Final Definition for Digital Marketing Role)
মূল কাজ:
Prime Academy-র ওয়েবসাইট ও কনটেন্টের SEO পারফরম্যান্স ট্র্যাক করা এবং SEO টিমের কাজের ডিটেইল রেকর্ড রাখা — যেমন Blogpost, Backlink, Social Bookmarking, Keyword Research ইত্যাদি।
✅ SEO Reports Page Layout
🧾 Table Columns
Field	Description
Date	কাজটি সম্পন্ন বা লগ করা তারিখ (format: DD.MM.YYYY, default = আজকের তারিখ)
Type of Work	Dropdown → Blogpost, Backlink, Social Bookmarking, Keyword Research, Others
Challenge	সংক্ষেপে কী চ্যালেঞ্জ ছিল (যেমন: "Low DA sites", "Keyword difficulty", "Approval pending")
Details	বিস্তারিত বর্ণনা বা নোট (যেমন: "Published 2 blogposts on Medium, created 5 backlinks on EDU sites")
➕ Add SEO Report Button
একটা “Add SEO Report” বাটন থাকবে টেবিলের উপরে।
On Click → Popup Form Open হবে:

📋 Popup Form Fields
Field	Input Type	Validation
Date	Date Picker	Required
Type of Work	Dropdown (Blogpost, Backlink, Social Bookmarking, Keyword Research, Others)	Required
Challenge	Text Field	Optional
Details	Multiline Textarea	Required
Buttons:
✅ Submit → নতুন রিপোর্ট টেবিলে যোগ হবে
❌ Cancel → Popup বন্ধ হবে
🗂️ Additional Features
Search/Filter:
Type of Work অনুযায়ী ফিল্টার করা যাবে (যেমন শুধু Blogpost কাজগুলো দেখতে চাও)।
Date Range Filter থাকবে (From – To)।
Edit/Delete:
নিজে add করা রিপোর্ট Edit/Delete করতে পারবে।
Pagination:
প্রতি পৃষ্ঠায় 10–15টি রিপোর্ট দেখাবে।
Validation:
Empty Details / Type of Work ছাড়া Submit করা যাবে না।
📊 Dashboard Impact
SEO Reports-এর সারাংশ (Total Blogpost, Total Backlink, Total Keyword Research etc.) Digital Marketing Dashboard-এর কার্ডে যুক্ত হতে পারে:
Example:
Total Blogposts This Month: 12
Total Backlinks: 35
Total Keyword Research Tasks: 8
📌 সারসংক্ষেপে:
SEO Reports হলো Digital Marketing টিমের SEO Performance Log — যেখানে প্রতিটি SEO কাজের তারিখ, ধরন, চ্যালেঞ্জ ও ডিটেইল সংরক্ষণ হবে, এবং “Add SEO Report” পপআপের মাধ্যমে সহজে এন্ট্রি করা যাবে।
তুমি কি চাও আমি এখন Motion Graphics Role-এর বিস্তারিত (Dashboard, Task, Output Report, Graph ইত্যাদি) অংশ লিখে দিই — ঠিক এই একই স্টাইলে?
You said:
Give me Digital Marketing role again
ChatGPT said:
একদম ঠিক আছে Polok 💛
এবার নিচে দিচ্ছি Digital Marketing Role (Final & Updated Definition) — পুরোপুরি ক্লিন, প্রোডাকশন-রেডি ভার্সন, যেখানে তোমার আগের সব নির্দেশনা + নতুন SEO Reports সেকশন একসাথে ইন্টিগ্রেট করা হয়েছে 👇
💛 Digital Marketing Role (Final Definition)
মূল কাজ:
Prime Academy-র অনলাইন মার্কেটিং কার্যক্রম — যেমন Lead Generation, Lead Upload & Assignment, Marketing Expense Tracking, Social Media Growth, Content Publishing, এবং SEO Performance Log সংরক্ষণ করা।
🧭 Dashboard
নিজের Digital Marketing Dashboard দেখতে পারবে।
Cards:
Task Completed
Total Leads
Total Cost / Expense
Total Content Published
Graph:
Lead Entry by Category (Meta Lead, LinkedIn Lead, Manual, Others)
Pie Chart:
Content Published by Platform (Facebook, LinkedIn, Instagram, X, YouTube, Others)
🧾 My Task / To-Do List
নিজের জন্য Self Task তৈরি করতে পারবে (Add My Task → Popup Form)।
Form Fields:
Date
Task Description
Assigned By (auto/self)
Category (dropdown: Content Published, Meta Ad, LinkedIn Ad, SEO, Website Task, Lead Entry)
Platform (dropdown: Facebook, LinkedIn, Instagram, X, Pinterest, YouTube, WhatsApp, Telegram, Blogger, Directory Page, Website, Others)
Deadline
Status Dropdown: In Progress / Completed
Color Logic:
Default = white/gray
Deadline নিকটবর্তী = warn-yellow
Deadline পার হলে = red
Deadline-এর আগে Complete হলে = green
🎯 Lead Entry
শুধুমাত্র Digital Marketing রোলই Lead Entry / Upload / Assignment করতে পারবে।
Lead Entry Form:
Name
Phone
Email
Interested Course (dropdown from course list)
Source (Meta Lead, LinkedIn Lead, Manually Generated Lead, Others)
Date (auto = today)
Bulk Upload (CSV):
Format → Name, Phone, Email, Interested Course, Source
Duplicate phone/email warning before insert
সব লিড স্বয়ংক্রিয়ভাবে Lead Center-এ যুক্ত হবে।
🗂️ Leads Center
Lead List দেখতে পারবে (নিজে Entry করা + Bulk Upload করা)।
Columns: Lead ID, Date, Name, Phone, Email, Interested Course, Source, Status, Action
Status: (Admission Team updates → Assigned, Counseling, In-Follow Up, Admitted, Not Admitted)
Action:
“Assign to Employee” → Dropdown থেকে Admission Department member select
Assign করলে Lead সেই সদস্যের “Assigned Lead” টেবিলে যাবে
Filter Options:
Assigned
Counseling
In-Follow Up
Admitted
Not Admitted
Permission Logic:
শুধুমাত্র Digital Marketing assign করতে পারবে
Super Admin / Admin শুধু view & filter করতে পারবে
💸 Cost Entry / Expense
List Columns: Date, Purpose, Amount
Add Cost Entry Button: Popup Form →
Date
Purpose (Meta Ads, LinkedIn Ads, Software Purchase, Subscription, Others)
Amount
নিজে Add/Edit/Delete করতে পারবে
সব খরচ Dashboard-এর Total Cost Card-এ auto update হবে
📱 Social Media Reports
Form Fields:
Facebook Followers
Instagram Followers
Facebook Group Members
YouTube Subscribers
LinkedIn Followers
X Followers
Pinterest Views
Blogger Impressions
Total People Reach
Buttons: Update / Cancel
এই ডেটা Super Admin ও Admin Dashboard-এর “Social Media Report” কার্ডে reflect করবে
🔍 SEO Reports
Purpose: SEO-সংক্রান্ত সব কাজ ও অগ্রগতি রেকর্ড রাখা।
Table Columns:
Date
Type of Work (Blogpost, Backlink, Social Bookmarking, Keyword Research, Others)
Challenge
Details
Add SEO Report Button:
Popup Form →
Date (date picker, default today)
Type of Work (dropdown)
Challenge (text)
Details (textarea, required)
✅ Submit / ❌ Cancel
Filter Options: Type of Work, Date Range
Edit/Delete: নিজের এন্ট্রি করা রিপোর্ট modify করতে পারবে
Dashboard Impact:
“Total Blogposts”, “Total Backlinks”, “Total Keyword Research Tasks” কার্ডে সংক্ষেপে দেখাবে
👤 Profile Management
নিজের প্রোফাইল (Name, Photo, Password) Edit করতে পারবে
Logout Dropdown থাকবে
❌ Digital Marketing যা পারবে না
❌ Accountant Dashboard বা Accounting Reports-এ ঢুকতে পারবে না
❌ Admission Fees Collection দেখতে বা modify করতে পারবে না
❌ Recruitment / Motion Graphics মডিউলে ঢুকতে পারবে না
❌ Task Assign করতে পারবে না (শুধু নিজের Task তৈরি করতে পারবে)
❌ Course / Employee CRUD করতে পারবে না
⚙️ Automatic Flow & Validation
CSV Upload → Duplicate Phone/Email warning
Assign Lead → Auto status “Assigned”
Admission Counseling শুরু করলে → Auto “Counseling”
Admission Admitted / Follow-Up / Not Admitted করলে → Lead Center status auto update
Cost Entry / Social Media / SEO Reports update → Dashboard auto refresh
📌 সারসংক্ষেপে:
Digital Marketing = Prime Academy-র Growth Engine 🚀
তারা Leads তৈরি করে, Assign করে, Marketing খরচ ট্র্যাক করে, Social ও SEO রিপোর্ট আপডেট করে, এবং পুরো Growth Ecosystem-এর পারফরম্যান্স Admin ও Super Admin-কে ভিজুয়াল রিপোর্ট আকারে দেয়।
তুমি কি এখন চাও আমি একইভাবে Motion Graphics Role (Final Definition) লিখে দিই — Dashboard, Tasks, Graphs, এবং Output Reports সহ?
You said:
Motion Graphics Role 
ChatGPT said:
একদম ঠিক Polok 🎬💙
এবার নিচে দিচ্ছি Motion Graphics Role (Final Definition) — Prime Academy Office Management (PAOM)-এর শেষ কিন্তু অত্যন্ত গুরুত্বপূর্ণ creative wing-এর জন্য।
এই রোলের কাজগুলো আমি তোমার brand-style (modern, clean, color-coded dashboard) অনুযায়ী সাজিয়ে দিলাম👇
🎬 Motion Graphics Role (Final Definition)
মূল কাজ:
Prime Academy-র ভিজুয়াল কনটেন্ট তৈরি ও পরিচালনা করা — যেমন Static Photo, Motion Video, Video Edit, এবং অন্যান্য গ্রাফিক কনটেন্ট।
🧭 Dashboard
Motion Graphics Designer নিজের Dashboard দেখতে পারবে।
Cards:
Total Static Photo
Total Motion Video
Total Video Ready
Total Task Completed
Graph:
Bar / Line chart দেখাবে (Static Photo, Motion Video, Video Ready, Task Completed)
সব কার্ডে আইকন ও ব্র্যান্ড রঙ (#053867, #253985, #F7BA23, #F3CE49) ব্যবহার হবে।
🧾 My Task / To-Do List
নিজের কাজগুলোর তালিকা দেখতে পারবে।
Add My Task Button → Popup Form:
Date
Task Description
Assigned By (auto/self)
Category (dropdown: Static Photo, Motion Video, Video Edit, Others)
Deadline
Status Dropdown: In Progress / Completed
Color Logic:
Default = white/gray
Deadline নিকটবর্তী = warn-yellow
Deadline পার হলে = red
Deadline-এর আগে Complete হলে = green
Filters:
Status অনুযায়ী (In Progress / Completed)
Category অনুযায়ী (Static Photo / Motion Video / Video Edit / Others)
🎨 Output Report (Content Summary)
Table Columns:
Date
Category (Static Photo / Motion Video / Video Edit / Others)
Title / Project Name
Platform (Facebook, YouTube, LinkedIn, Instagram, Others)
File Link / Delivery Link (Google Drive / OneDrive)
Status (Ready / Delivered / Pending)
Add Output Button → Popup Form:
Date (default = today)
Category (dropdown)
Title / Project Name (text)
Platform (dropdown)
File Link (text / url)
Status (dropdown: Ready, Delivered, Pending)
✅ Submit / ❌ Cancel
Filter:
Category / Platform / Date Range অনুযায়ী দেখা যাবে
Edit/Delete:
নিজের এন্ট্রি করা Output Report modify করতে পারবে
Dashboard Impact:
Total Static / Motion / Ready / Completed Card-এর ডেটা এখান থেকেই অটো-ক্যালকুলেট হবে।
👤 Profile Management
নিজের প্রোফাইল (Name, Photo, Password) Edit করতে পারবে
Logout Dropdown থাকবে
❌ Motion Graphics যা পারবে না
❌ Task Assign করতে পারবে না (শুধু নিজের টাস্ক তৈরি করবে)
❌ Lead Center, Admission Fees, বা Accounting-এ ঢুকতে পারবে না
❌ Course / Employee / Recruitment CRUD করতে পারবে না
❌ Social Media / SEO Reports modify করতে পারবে না
⚙️ Automatic Flow & Validation
Output Entry দিলে Category অনুযায়ী Dashboard Card auto update হবে
Deadline-based color logic Task Table-এ অটো রিফ্রেশ হবে
Pending → Ready → Delivered status পরিবর্তন করলে History Log সেভ হবে
ফাইল লিংক (Google Drive / OneDrive) URL format না হলে warning দিবে
📌 সারসংক্ষেপে:
Motion Graphics = Prime Academy-র Creative Production Hub 🎨🎞️
তারা সব ভিজুয়াল কনটেন্ট (Static, Motion, Video Edit) তৈরি করে, Output রেকর্ড রাখে, এবং Dashboard-এর মাধ্যমে পুরো প্রোডাকশন পারফরম্যান্স রিপোর্ট করে।
এখন যদি চাও, আমি তোমার জন্য সব রোলের Permission Matrix (Super Admin → Motion Graphics পর্যন্ত) এক টেবিলে সাজিয়ে দিতে পারি — যাতে পরে RBAC middleware তৈরি করার সময় একদম নির্ভুলভাবে বসানো যায়।
বলো, তৈরি করে দিই?
You said:
hmm do it
ChatGPT said:
দারুন, Polok! 🔥
এখন নিচে দিচ্ছি Prime Academy Office Management (PAOM) সফটওয়্যারের সম্পূর্ণ RBAC Permission Matrix — একদম ফাইনাল, ফিল্ড-লেভেল পারমিশনসহ (Super Admin → Motion Graphics পর্যন্ত)।
এই টেবিলটা তুমি সরাসরি RBAC middleware বা role-based UI visibility ডিজাইনে ব্যবহার করতে পারবে।
আমি এটাকে তিন ভাগে সাজিয়েছি 👇

🧩 I. Core Role Overview
Role	Department	Primary Responsibility
🧑‍💼 Super Admin	Management	Task assign + View all reports (No CRUD)
🧑‍🏫 Admin	Operations	Task assign + Employee/Course CRUD + View all reports
💰 Accountant	Finance	Fees Review, Income & Expense CRUD
🎓 Admission	Admissions	Lead Counseling, Admission, Fees Collection
👔 Recruitment	Recruitment	Candidate, Employer, Job Position CRUD + Recruit Action
💛 Digital Marketing	Marketing	Lead Entry/Upload/Assign, Expense, Social, SEO Reports
🎬 Motion Graphics	Creative	Design Output, Task Tracking, Content Delivery Record
⚙️ II. Module-wise Permission Matrix
Module	Super Admin	Admin	Accountant	Admission	Recruitment	Digital Marketing	Motion Graphics
Dashboard	✅ View All	✅ View (Admin)	✅ View (Own)	✅ View (Own)	✅ View (Own)	✅ View (Own)	✅ View (Own)
Task Assign	✅ Assign Anyone	✅ Assign (Except SA)	❌	❌	❌	❌	❌
My Task / To-Do	❌	✅ CRUD (Self)	✅ CRUD (Self)	✅ CRUD (Self)	✅ CRUD (Self)	✅ CRUD (Self)	✅ CRUD (Self)
Accounting Reports	✅ View	✅ View	✅ CRUD	❌	❌	❌	❌
Admission Reports	✅ View (Filter)	✅ View (Filter)	✅ View	✅ CRUD (Own)	❌	❌	❌
Recruitment Reports	✅ View (Filter)	✅ View (Filter)	✅ View	❌	✅ CRUD	❌	❌
Digital Marketing Reports	✅ View	✅ View	✅ View	❌	❌	✅ CRUD	❌
Motion Graphics Reports	✅ View	✅ View	✅ View	❌	❌	❌	✅ CRUD
Employee List	✅ View Only	✅ Full CRUD	❌	❌	❌	❌	❌
Courses	✅ View Only	✅ Full CRUD	❌	✅ View Only	❌	✅ View Only	✅ View Only
Leads Center	✅ View (Filter only)	✅ View (Filter only)	❌	✅ Partial (Assigned Leads)	❌	✅ Full CRUD (Entry, Upload, Assign)	❌
Admission Fees Collection	✅ View	✅ View	✅ Review (Approve/Reject)	✅ Submit (Collect Fees)	❌	❌	❌
Income (Finance)	✅ View	✅ View	✅ CRUD	❌	✅ CRUD (Recruitment Scope)	❌	❌
Expense (Finance)	✅ View	✅ View	✅ CRUD	❌	✅ CRUD (Recruitment Scope)	✅ CRUD (Marketing Scope)	❌
Candidate Management	✅ View	✅ View	❌	❌	✅ CRUD + Recruit	❌	❌
Job Position Management	✅ View	✅ View	❌	❌	✅ CRUD	❌	❌
Employer Management	✅ View	✅ View	❌	❌	✅ CRUD	❌	❌
Social Media Reports	✅ View	✅ View	✅ View	❌	❌	✅ CRUD	❌
SEO Reports	✅ View	✅ View	✅ View	❌	❌	✅ CRUD	❌
Motion Graphics Output	✅ View	✅ View	✅ View	❌	❌	❌	✅ CRUD
Profile Management	✅ Edit Self	✅ Edit Self	✅ Edit Self	✅ Edit Self	✅ Edit Self	✅ Edit Self	✅ Edit Self
System Settings / Config	✅ Full Access	❌	❌	❌	❌	❌	❌
🎯 III. Special Rules & Logic
Logic / Restriction	Description
🧱 Task Restriction	No one can assign task to Super Admin.
🕒 Deadline Colors	White/Gray = Normal, Yellow = Near Deadline, Red = Overdue, Green = Completed Early.
💡 Lead Ownership	Only Digital Marketing can create/assign leads; Admission only processes them.
💰 Finance Flow	Admission → Accountant Review → Approved → Income Table auto-update.
📊 Reports Visibility	Admin & Super Admin = All view-only; other roles = only own department CRUD.
📥 CSV Upload	Only Digital Marketing role can bulk upload Leads.
🧾 Recruitment Recruit Flow	Candidate → Recruited Action → Select Employer + Job Position → Added to Recruited List.
🧍 Profile Access	All roles can edit only their own profile & password.
🌐 Brand Consistency	Prime Academy color scheme & Poppins font enforced globally.
📱 Mobile View	Sidebar collapsible; tables scrollable; modals full-screen for WebView app.
✅ Summary
Role	Permission Scope	Description
Super Admin	View-All + Assign Tasks	Pure Monitoring & Task Assignment only.
Admin	Assign + CRUD (Employee/Course) + View-All	Operation manager role.
Accountant	CRUD (Income/Expense, Fees Review)	Finance control.
Admission	CRUD (Leads Workflow, Fees Submit)	Lead Conversion & Fee Handling.
Recruitment	CRUD (Candidate/Employer/Job/Income/Expense)	Recruitment operations.
Digital Marketing	CRUD (Lead, Expense, Social, SEO)	Marketing, Growth & Lead Generation.
Motion Graphics	CRUD (Creative Output & Tasks)	Creative Production & Delivery.
🏁 Conclusion:
এই ম্যাট্রিক্স অনুযায়ী RBAC middleware তৈরি করলে পুরো সিস্টেম ১০০% লজিক্যালি সেফ থাকবে —
কোনো রোলের অতিরিক্ত ক্ষমতা থাকবে না, প্রতিটি রোল শুধুমাত্র নিজের সীমার মধ্যে CRUD বা View পারমিশন পাবে, আর Super Admin থাকবে শুধুমাত্র মনিটরিং ও Task Assignment-এর জন্য।
তুমি কি চাও আমি এখন এই ম্যাট্রিক্স অনুযায়ী RBAC middleware structure (Node.js Express)-এর ফাইল-লেভেল ম্যাপ তৈরি করে দিই?
যেমন: middlewares/checkRole.js, rolePermissions.js, এবং কীভাবে route-এ ব্যবহার হবে (authorize(['Admin','Accountant']))?
You said:
no, do you understand all ? if yes write a details prompt for chatgpt for create the web app , if not ask me anything
ChatGPT said:

Thought for 8s
ওয়ালাইকুমুসসালাম, Polok — হ্যাঁ, সবকিছু একদম পরিষ্কার বুঝেছি।
তোমার জন্য নিচে দিলাম একটা MASTER PROMPT — এটা কপি–পেস্ট করে ChatGPT/Gemini-কে দিলে সে পুরো ওয়েব অ্যাপ (PAOM/PrimeOPS) বানানোর কাজ ফাইল-কমপ্লিট কনটেন্টসহ শুরু করতে পারবে।
(নোট: তুমি চাইলে “start work” বললে আমিও এই প্রম্পট অনুসারে ইমপ্লিমেন্ট করব।)
SYSTEM / ROLE:
You are a very experienced full-stack engineer. You will generate a production-ready, mobile-first, web-based software named “Prime Academy Office Management” (short name: PAOM or PrimeOPS) for Prime Academy Bangladesh. 
IMPORTANT: Always output full file contents (no placeholders) so the user can copy-paste and run. Follow the brand rules exactly. Do NOT include a chat feature (exclude Socket.io for now).

GOAL:
Build a complete RBAC-based office management system for Prime Academy with separate dashboards and sidebars by role. Mobile-first UI suitable for Android WebView later.

BRANDING & UI:
- Colors: #053867 (Dark Navy), #253985 (Royal Blue), #F7BA23 (Gold), #F3CE49 (Light Yellow)
- Font: Poppins
- Navbar/Footer: #053867 with white text
- Buttons: #F7BA23 background, #053867 text, hover #F3CE49
- Cards: white background, #253985 text, soft shadows, rounded-2xl, icon on each card
- Charts: use Recharts; color them to match brand palette
- Modern, clean, educational look; strictly consistent with above

TECH STACK:
- Frontend: React + Vite, React Router, TailwindCSS, shadcn/ui, Recharts
- State/Data: React Query for server state; lightweight local state (Context/Zustand)
- Backend: Node.js + Express, Mongoose (MongoDB)
- Auth: Email/Password, JWT (httpOnly cookie preferred), role-based authorization middleware
- Validation: Zod or Joi on request body; Mongoose schema validation
- Date/Time/Format: Timezone Asia/Dhaka; date format DD.MM.YYYY; Currency BDT (৳)
- CSV Import: PapaParse on frontend or backend csv-parse
- Build/Run: npm scripts; include .env.sample

ROLES (strict RBAC):
- Super Admin: 
  - Can only: view all dashboards/reports; view Leads Center (with status filter); assign tasks to anyone
  - Cannot: create/edit/delete any domain data; cannot upload/enter/assign leads; no CRUD anywhere
  - Extra rule: No one can assign tasks to Super Admin
- Admin:
  - Can: assign tasks (to all except Super Admin), My Task (self), Employee CRUD, Course CRUD, view-only all departmental reports, view Leads Center with filters (no lead CRUD)
- Accountant:
  - Can: Fees Review (Approve/Reject), Income CRUD, Expense CRUD; own dashboard
  - View-only other departments
- Admission:
  - Can: work on assigned leads → Start Counseling → Admitted / Follow-Up / Not Admitted; submit Admission Fees Collection; view courses
  - Own dashboard; My Task (self)
- Recruitment:
  - Can: Candidate CRUD, Employer CRUD, Job Position CRUD, Recruited action (select Employer + Job), Recruitment-scope Income/Expense CRUD
  - Own dashboard; My Task (self)
- Digital Marketing:
  - Can: Lead Entry, Bulk Upload (CSV), Assign Lead to Admission, Marketing Cost/Expense CRUD, Social Media Reports CRUD, SEO Reports CRUD
  - Own dashboard; My Task (self)
- Motion Graphics:
  - Can: own tasks, content/output reporting (Static Photo, Motion Video, Video Ready, etc.)
  - Own dashboard; My Task (self)

GLOBAL LAYOUT:
- Topbar: Avatar, Name, Designation; dropdown: Edit Profile, Logout; profile photo change allowed
- Sidebar: Role-specific menu items only; others hidden
- Mobile: collapsible sidebar, sticky topbar, tables horizontally scrollable, modal goes full-screen on small viewports
- WebView ready (Android): avoid browser-incompatible APIs; handle back navigation

SIDEBAR MENUS BY ROLE:

1) SUPER ADMIN / ADMIN (shared menus; Admin has My Task too)
- Dashboard (Primary Overview for organization)
  Cards → Total Admitted, Total Revenue, Total Active Course, Total Leads, Total Work Done (DM), Total Work Done (MG), Total Task Completed, Total Content Published
  Charts → Graph: Admission vs Leads; Pie: Enrollment by Course
  Large Cards →
    (a) Social Media Report list (Platform, Follower Count)
    (b) Pending Task list (name, assignee, status dropdown, deadline) with color rules:
        default = white/gray, near-deadline = warn-yellow, overdue = red; completed items move out
    (c) Completed Task list (name, assignee, completed date) with color rules:
        completed before deadline = green; after deadline = red
    (d) Recruitment Snapshot (Total Recruit, Ready Candidate, Total Job Vacancy, Total Employer)
- Assign Task (List + Filter Completed/In-Progress + “Assign Task” Popup)
  Rule: Super Admin can assign to anyone; others cannot assign to Super Admin
- My Task/To-Do (Admin only)
  Self-assign popup; same color logic as above
- Accounting Reports (view-only for SAdmin/Admin)
- Admission Reports (view-only for SAdmin/Admin; member filter)
- Recruitment Reports (view-only for SAdmin/Admin; member filter)
- Digital Marketing Reports (view-only for SAdmin/Admin)
- Motion Graphics Reports (view-only for SAdmin/Admin)
- Employee List (Admin = CRUD; Super Admin = view-only)
- Courses (Admin = CRUD; others view as specified)
- Leads Center (SAdmin/Admin = view-only with filter by status: Assigned, Counseling, In-Follow Up, Admitted, Not Admitted)

2) ACCOUNTANT (sidebar)
- Dashboard: Cards → Income, Expense, Profit, Balance in My Hand; Graph → Income vs Expense
- My Task/To-Do (self-assign)
- Admission Fees Collection: review list (Approve/Reject); on Approve, auto-create Income record
- Income (list + Add Income modal; includes auto from approvals)
- Expense (list + Add Expense modal)

3) ADMISSION (sidebar)
- Dashboard: Cards → Total Admission, Total Counseling, In Follow-Up, Not Admitted, Admission Fees Collection, Total Assigned Lead; Graph → Admission Done vs In-Follow Up vs Total Collection; Pie → Admitted by Course
- My Task/To-Do (self-assign)
- Assigned Lead (from DM/Admin assign) → action “Start Counseling”
- Counseling: actions → Admitted / Follow-Up / Not Admitted (status transitions + history)
- Admitted / In Follow-Up / Not Admitted (bucketed lists)
- Courses (view list)
- Admission Fees Collection: list + “Collect Fees” popup (Lead, Course, Amount, Method: Bkash, Nagad, Rocket, Bank Transfer, Cash, Date) → submit for Accountant review; show Accountant status

4) RECRUITMENT (sidebar)
- Dashboard: Cards → Total Recruitment, Pending Candidate, Active Job Position, Total Employer; Graph → Candidate vs Recruited
- My Task/To-Do (self-assign)
- Recruited (list; filled via action from Candidate)
- Candidate (list: CanID, Name, Job Interest, CV Source, District, Trained?, Date, View CV, action: Recruited)
  Add Candidate popup (incl. CV link: Google Drive/OneDrive)
- Job Position (list + Add/Edit; fields: JobID, Position, Employer, Salary Range, Deadline, Status)
- Employer (list + Add/Edit; fields: EmpID, Name, Address, Job Location, MoU Date)
- Income (recruitment scope) & Expense (recruitment scope) with Add modals

5) DIGITAL MARKETING (sidebar)
- Dashboard: Cards → Task Completed, Total Leads, Total Cost, Total Content Published; Graph → Lead Entry by Category; Pie → Content Published by Platform
- My Task/To-Do (self-assign; Category dropdown: Content Published, Meta Ad, LinkedIn Ad, SEO, Website Task, Lead Entry; Platform dropdown list)
- Lead Entry (form) + Bulk Upload (CSV: Name, Phone, Email, Interested Course, Source)
- Leads Center: full control to assign to Admission member; filter by status; status updated by Admission flow
- Cost Entry/Expense (list + Add modal with Purpose enum: Meta Ads, LinkedIn Ads, Software Purchase, Subscription, Others)
- Social Media Reports (form: FB Followers, Insta Followers, FB Group Members, YT Subscribers, LinkedIn Followers, X Followers, Pinterest Views, Blogger Impressions, Total Reach)
- SEO Reports:
  Table columns → Date, Type of Work (Blogpost, Backlink, Social Bookmarking, Keyword Research, Others), Challenge, Details
  “Add SEO Report” button → popup with the above fields; filter by Type & Date Range; can edit/delete own entries

6) MOTION GRAPHICS (sidebar)
- Dashboard: Cards → Total Static Photo, Total Motion Video, Total Video Ready, Total Task Completed; Graph for those series
- My Task/To-Do (self-assign; Category dropdown: Static Photo, Motion Video, Video Edit, Others)
- Output Report (table: Date, Category, Title/Project, Platform, File/Delivery Link, Status (Ready/Delivered/Pending)); Add/Edit/Delete own entries; filters

DATA MODEL (Mongoose – core collections & key fields):
- users: { name, email, role, department, designation, avatar, phone, joinDate, status }
- tasks: { title, description, assignedBy, assignedTo, roleScope?, category, deadline, status, completedAt, createdAt }
- leads: { leadId (auto), createdAt, name, phone, email, interestedCourse, source (Meta/LinkedIn/Manual/Others), status (Assigned/Counseling/In Follow-Up/Admitted/Not Admitted), assignedTo (Admission user), history[] }
- courses: { courseId, name, category, duration, regularFee, discountFee, teacher, details, status }
- admissions: { leadId ref, course ref, admittedBy, admittedAt, notes }
- fees: { leadRef, courseRef, amount, method (Bkash/Nagad/Rocket/Bank/Cash), paymentDate, submittedBy (Admission), status (Pending/Approved/Rejected), reviewedBy (Accountant), reviewedAt }
- accounting: incomes { date, source, amount, channel?, refId? }, expenses { date, purpose, amount, category?, refId? }
- recruitment_candidates: { canId, name, interest, source, district, trained (bool), date, cvLink, recruited(bool), recruitedMeta { employerId, jobId, date } }
- recruitment_jobs: { jobId, position, employerId, salaryRange, deadline, status }
- recruitment_employers: { empId, name, address, jobLocation, mouDate }
- dm_costs: { date, purpose (Meta Ads/LinkedIn Ads/Software Purchase/Subscription/Others), amount, createdBy }
- social_stats: { date, fbFollowers, instaFollowers, fbGroupMembers, ytSubs, liFollowers, xFollowers, pinterestViews, bloggerImpressions, totalReach }
- seo_reports: { date, typeOfWork (enum), challenge?, details, createdBy }
- mg_outputs: { date, category (Static/Motion/VideoEdit/Others), title, platform, fileLink, status (Ready/Delivered/Pending), createdBy }
- notifications (future), messages (excluded for now)

ID & FORMAT RULES:
- LeadID: LEAD-YYYY-#### (indexed)
- EmpID: EMP-####; CourseID: CRS-####; CandidateID: CAN-YYYY-####
- Date Format: DD.MM.YYYY (display); ISO in DB
- Currency: BDT (৳)

DEADLINE COLOR LOGIC (configurable):
- daysLeft = deadline - today
  - daysLeft <= 0 → red (overdue)
  - 0 < daysLeft <= 3 → warn-yellow (near deadline)  // CONFIG: thresholdDays=3
  - Completed before deadline → green (only in Completed list)
  - Default → white/gray

CSV IMPORT (Leads):
- Required header & order: Name,Phone,Email,InterestedCourse,Source
- Duplicate detection by phone/email: warn & skip (log duplicates report)

PERMISSIONS SUMMARY / MATRIX (enforce both backend middleware + UI guard):
- Super Admin: view-only everywhere + task assign to anyone; cannot be assigned by others
- Admin: assign (except SA), My Task, Employee CRUD, Course CRUD, view-only dept reports, Leads Center view/filter-only
- Accountant: Fees review (approve/reject), Income/Expense CRUD, others view-only
- Admission: Lead pipeline actions (Assigned→Counseling→Admitted/Follow-Up/Not Admitted), Fees submit, Courses view
- Recruitment: Candidate/Employer/Job CRUD; Recruited action; own Income/Expense CRUD
- Digital Marketing: Lead entry/upload/assign; Cost CRUD; Social & SEO Reports CRUD
- Motion Graphics: Output report CRUD; My Task; dashboard

API DESIGN (outline important routes; include full controllers/models in code):
- Auth: POST /api/auth/register (seed only), POST /api/auth/login, GET /api/auth/me, POST /api/auth/logout
- Users (Admin CRUD, SAdmin view-only): GET/POST/PUT/DELETE /api/users
- Tasks: CRUD + role rules; GET /api/tasks?status=&assignee=; POST /api/tasks/assign
- Leads: POST /api/leads (DM only); POST /api/leads/bulk (DM only); GET /api/leads (filter by status); PATCH /api/leads/:id/assign (DM→Admission); PATCH /api/leads/:id/status (Admission transitions)
- Fees: POST /api/fees/collect (Admission); GET /api/fees (list); PATCH /api/fees/:id/approve | /reject (Accountant)
- Accounting: incomes/expenses CRUD
- Recruitment: candidates, jobs, employers CRUD; POST /api/recruitment/candidates/:id/recruited
- DM Costs: CRUD; Social Stats: upsert; SEO Reports: CRUD
- MG Outputs: CRUD
- Courses: CRUD (Admin), view for others
- Reports endpoints: aggregated stats per role for dashboard cards/charts

SEED USERS (create seeding script):
- Super Admin: 
  - Ikhtiar Rahman (ikhtiar@primeacademy.org)
  - Kazi Sazzad Hossain (kazi@primeacademy.org)
  - Raj Pahal (raj@primeacademy.org)
- Admin:
  - Shahidul Islam (shahidul@primecademy.org)
  - Rafsaniyat Binte Mustafiz (rafsaniyat@primeacademy.org)
- Accountant:
  - Md. Mahbub Rahman (mahbub@primeacademy.org)
- Recruitment:
  - Md. Tanvir Alin (alin@primeacademy.org)
- Admission:
  - Sajrin Bashar (sajrin@primeacademy.org)
- Digital Marketing:
  - J. R. Polok (polok@primeacademy.org)
- Motion Graphics:
  - Shuvo Kumar Das (shuvo@primeacademy.org)

QUALITY & NON-FEATURES:
- Exclude chat realtime features for now (no Socket.io)
- Return normalized API errors: { code, message, fields? }
- Add unit tests for critical flows (task rules, lead pipeline, fees approve)
- Provide Postman/Thunder collection
- Include README with run steps (env, npm scripts, seed, build, start)
- Provide sample CSV for Leads
- Use role-protected routes on backend and guard components on frontend
- Lighthouse-friendly, responsive

DELIVERABLES:
1) Monorepo or two folders: /api (Express) and /web (React/Vite)
2) Complete file contents for:
   - Backend: server.js, routes, controllers, models, middlewares (auth, authorize), utils (id generator, date utils), config, package.json, .env.sample, seed.js
   - Frontend: index.html, main.jsx, router, pages per role, UI shell (Navbar/Sidebar), components (Cards, Tables, Modals), hooks, services (api clients), theme (Tailwind config), package.json, .env.sample
3) RBAC middleware and example usage in routes
4) Seed script populating users with roles
5) README with exact commands:
   - npm i
   - copy .env from .env.sample
   - npm run dev (web), npm run dev (api)
   - npm run seed
6) Anything you generate MUST be directly runnable without additional editing.

ACCEPTANCE CRITERIA (must satisfy):
- Each role sees only its own sidebar and dashboard
- Super Admin can assign tasks but cannot modify domain data; others cannot assign tasks to Super Admin
- Leads full flow works (DM entry/upload/assign → Admission counseling → Admitted/Follow-Up/Not Admitted)
- Fees submit by Admission; Accountant approve/reject; Income auto-updates
- Deadline color logic works across task lists
- Reports for Admin/SAdmin are strictly view-only mirrors of departments
- CSV bulk upload validates schema and handles duplicates
- All charts responsive; tables scrollable on mobile
- Branding/Fonts/Colors strictly match Prime Academy guidelines

OUTPUT INSTRUCTIONS:
- Produce the full codebase with file-by-file content blocks
- No placeholders like “// TODO”
- Provide any images/icons via libraries (lucide-react, shadcn/ui)
- Keep comments concise; code must run

Now, generate the complete project accordingly.
চাওলে এখনই বলো “start work” — আমি এই MASTER PROMPT মেনে পুরো কোডবেস ফাইল-কমপ্লিট আকারে দিয়ে দেব।
You said:
এভাবে হবে না অনেক বড় প্রজেক্ট তো ভেঙ্গে ভেঙ্গে করতে হবে এমন ভাবে সাজাও যেন ভেঙ্গে ভেঙ্গে করা যায় একেটা আলাদা আলাদা রোল এর জন্য
ChatGPT said:

Thought for 10s
একদম ঠিক বলেছো—এত বড় প্রজেক্ট ভেঙে ভেঙে করতে হবে। নিচে পুরোটা মডিউলার রোডম্যাপ দিলাম যাতে একেকটা রোল/ফিচার আলাদা “প্যাকেট” হিসেবে করা যায়। আমি এখনো কোনো কোড লিখছি না—শুধু কাঠামো ও কপি–পেস্ট করা যায় এমন ছোট ছোট MASTER PROMPT দিচ্ছি, যাতে তুমি যেটা বলবে সেখান থেকেই শুরু করা যায়।
🧱 Phase 0 — Foundation (সব রোলের কমন বেস)
উদ্দেশ্য: বেসিক স্ক্যাফোল্ড, অথ, RBAC, ব্র্যান্ডেড UI শেল, Role-ওয়াইজ সাইডবার, সিড ইউজার।
ডেলিভারেবলস

Monorepo: /api (Express+Mongo) & /web (React+Vite)
Auth (JWT httpOnly), Profile (view/edit avatar), RBAC middleware
UI Shell: Topbar (avatar/name/designation + dropdown), Role-based Sidebar (hide others)
Theme: Prime Academy colors + Poppins
Seed users: (তুমি যেগুলো দিয়েছো)
Utilities: ID generator, date utils (Asia/Dhaka, DD.MM.YYYY)
Acceptance (Done when)
লগইন করলে রোল অনুযায়ী আলাদা সাইডবার/ড্যাশবোর্ড দেখা যায়
Super Admin-কে কেউ টাস্ক assign করতে পারে না (rule enforced)
সিড ইউজার দিয়ে লগইন করা যায়
Prompt (Phase 0)
“Build Phase 0 foundation for PAOM: monorepo (/api, /web), Auth (JWT httpOnly), RBAC middleware, profile edit with avatar, brand theme (colors, Poppins), role-based sidebar/topbar, seed users given. No chat. Output full files, runnable.”
✅ Phase 1 — Task Module (সব রোলে ‘My Task’; Assign কেবল SAdmin/Admin)
স্কোপ
Entities: tasks
Views:
Assign Task (SAdmin/Admin): list + filters (In-Progress/Completed) + Assign Modal
My Task (Admin/Accountant/Admission/Recruitment/DM/MG): list + Self-assign Modal
Color Logic: white/gray → warn-yellow (≤3 days) → red (overdue); Completed before deadline = green
Rule: Super Admin-কে কেউ assign করতে পারবে না
Acceptance
Assign/Status change UI+API working
Pending→Completed move; Completed আর Pending-এ দেখাবে না
Color logic সঠিক কাজ করে
Prompt (Phase 1)
“Implement Task module with color rules, Assign (SAdmin/Admin; cannot assign to Super Admin), My Task for all others (self-assign), filters & completed move logic. Output full API+UI files.”
👑 Phase 2 — Super Admin (View-only Monitor) + Admin (Ops)
Super Admin
Primary Overview Dashboard (সব কার্ড/চার্ট—view only)
Large Cards: Social Media list, Pending/Completed Task, Recruitment Snapshot
Leads Center: view + status filter only (Assigned, Counseling, In-Follow Up, Admitted, Not Admitted)
Assign Task: yes
Admin
একই Primary Overview (view)
Assign Task (except SA)
My Task (self)
Employee List: CRUD
Courses: CRUD
Accounting/Admission/Recruitment/DM/MG Reports: view-only mirrors
Acceptance
SA কোথাও CRUD করতে পারবে না (টাস্ক অ্যাসাইন ছাড়া)
Admin Employee/Courses CRUD করতে পারে; অন্য রিপোর্টগুলো strictly view-only
Prompt (Phase 2)
“Implement Super Admin (view-only dashboards + leads center filter + assign task) and Admin (assign except SA, My Task, Employee CRUD, Courses CRUD, department reports view-only). Output full files.”
🎯 Phase 3 — Digital Marketing (Lead Engine)
স্কোপ
Lead Entry (form)
Bulk Upload CSV (Name, Phone, Email, InterestedCourse, Source) + duplicate phone/email warn+skip
Leads Center (DM full control): assign to Admission member; status filter (Assigned, Counseling, In-Follow Up, Admitted, Not Admitted)
Cost Entry / Expense (Meta Ads, LinkedIn Ads, Software Purchase, Subscription, Others)
Social Media Reports (followers/impressions/reach)
SEO Reports (Date, Type of Work, Challenge, Details + Add popup)
Acceptance
DM-ই শুধু Lead create/upload/assign করতে পারে
Admin/SA শুধু view+filter
Costs/Social/SEO data কার্ড/ড্যাশবোর্ডে প্রতিফলিত হয়
Prompt (Phase 3)
“Implement Digital Marketing module: Leads (entry, CSV bulk with duplicate handling, assign to Admission), Leads Center filters, Cost CRUD, Social Media report form, SEO Reports table+add popup. Enforce permissions. Output full files.”
🎓 Phase 4 — Admission Department (Conversion & Fees)
স্কোপ
Dashboard: cards (Admission, Counseling, In Follow-Up, Not Admitted, Fees Collection, Assigned Leads), Graph (Admissions vs Follow-Up vs Collection), Pie (Admitted by Course)
Assigned Lead → Start Counseling
Counseling → actions: Admitted / Follow-Up / Not Admitted (history trail)
Admitted / In Follow-Up / Not Admitted: bucket lists
Courses: view
Admission Fees Collection: list + Collect Fees popup → Accountant review
Acceptance
Status transitions ও history log সেভ হয়
Fees submit হলে Accountant queue-তে যায়
Prompt (Phase 4)
“Implement Admission module: Assigned Lead→Counseling→(Admitted/Follow-Up/Not Admitted) with history, dashboard charts, fees collection submit to Accountant, courses view-only. Output full files.”
💰 Phase 5 — Accountant (Finance Core)
স্কোপ
Dashboard: Income, Expense, Profit, Balance in My Hand + Income vs Expense Chart
Review Admission Fees: Approve/Reject → Approved হলে Income টেবিলে অটো এন্ট্রি
Income CRUD (manual add possible)
Expense CRUD
Acceptance
Fees approval flow কাজ করে; Income auto-create
Profit = Income − Expense সঠিক
Prompt (Phase 5)
“Implement Accountant module: review fees (approve/reject → auto income), Income CRUD, Expense CRUD, dashboard cards/charts. Output full files.”
👔 Phase 6 — Recruitment Department
স্কোপ
Dashboard: cards + Candidate vs Recruited graph
Candidate CRUD (CanID auto), View CV link
Recruited action → select Employer + Job Position
Job Position CRUD (with Employer dropdown)
Employer CRUD
Recruitment-scope Income/Expense CRUD
Acceptance
Recruited action দিলে তালিকা আপডেট ও meta সেভ
Active Employer/Job dropdown populate ঠিকমতো
Prompt (Phase 6)
“Implement Recruitment module: Candidate CRUD + recruited action (select employer/job), Job Position CRUD, Employer CRUD, recruitment-scope income/expense, dashboard charts. Output full files.”
🎬 Phase 7 — Motion Graphics (Creative Output)
স্কোপ
Dashboard: Total Static Photo / Motion Video / Video Ready / Task Completed + graph
My Task (self)
Output Report: table (Date, Category, Title, Platform, File Link, Status) + add/edit/delete + filters
Acceptance
Output entries অনুযায়ী dashboard cards আপডেট
Prompt (Phase 7)
“Implement Motion Graphics module: dashboard cards/graph, My Task (self), Output Report CRUD (date/category/title/platform/link/status). Output full files.”
📊 Phase 8 — Reports Consolidation & Polishing
স্কোপ
Admin/SAdmin ড্যাশবোর্ডে সব রিপোর্ট প্রপারলি রিফ্লেক্ট
Mobile polish (scrollable tables, full-screen modals)
ENV configs: thresholdDays=3, currency=BDT, date format
Sample CSV + Postman/Thunder collection
Minimal tests: task rules, lead pipeline, fees approval
Acceptance
সব রোল তাদের সীমাবদ্ধতার ভেতরেই কাজ করে
রিপোর্ট কার্ড/চার্টে ডেটা mismatch নেই
Prompt (Phase 8)
“Consolidate final reports, mobile polish, env configs, sample CSV, Postman collection, minimal tests (task rules, lead pipeline, fees approval). Output all updates.”
🔗 মডিউল ডিপেনডেন্সি অর্ডার (সাজেস্টেড)
Phase 0 → Phase 1 → Phase 2 → Phase 3 → Phase 4 → Phase 5 → Phase 6 → Phase 7 → Phase 8
Phase 3 (DM) আগে লাগবে Phase 4 (Admission)–এর জন্য
Phase 4 (Admission) আগে লাগবে Phase 5 (Accountant)–এর approval flow এর জন্য
🧭 কীভাবে এগোবে (প্লেবুক)
তুমি বলবে: “Start Phase X”
আমি Phase X–এর ফাইল-কমপ্লিট কোড দেব (backend+frontend)
আমরা Phase X টেস্ট করব → ✅ হলে পরের Phase
তুমি চাইলে আমি Phase 0 থেকেই শুরু করব। কোন Phase দিয়ে শুরু করবো বলো—Phase 0 নাকি সরাসরি Task Module (Phase 1)?
You said:
তুমি তোমার মতো শুরু করো ,  কিভাবে করবা ওকে ?
ChatGPT said:

Thought for 5s
ওকে Polok — আমি আমার প্ল্যান বলছি। এখনই কোড দিচ্ছি না; প্রথমে কাজটাকে ভেঙে Phase-wise এগোবো। তুমি “OK” বললেই আমি Phase 0 ডেলিভার করতে বসে যাবো (ফাইল-কমপ্লিট কোড সহ)।
🔰 কীভাবে শুরু করব (Execution Plan)
Phase 0 — Foundation (Auth, RBAC, Brand Shell)
উদ্দেশ্য: একবারেই মজবুত বেস: লগইন, JWT, রোলভিত্তিক সাইডবার/পেজ, Prime Academy ব্র্যান্ডিং, সিড ইউজার।
ফ্রন্টএন্ড (React+Vite)
UI Shell: Topbar (Avatar/Name/Designation + Edit Profile/Logout), Role-based Sidebar।
Route Guard: RequireAuth, RequireRole(roles[])।
Theme: Tailwind + shadcn/ui + Poppins; Brand colors fixed।
Pages (stub): /dashboard (role অনুযায়ী ভিন্ন লেআউট), /profile.
ব্যাকএন্ড (Node+Express+Mongo)
Auth: /api/auth/login, /auth/logout, /auth/me (JWT httpOnly cookie)।
Users model + seed script (তোমার দেয়া সব ইউজার/রোল)।
RBAC middleware: authorize(['Admin', ...]); Super Admin special rule placeholder (assign rules later)।
Config/ENV
MONGO_URI, JWT_SECRET, TIMEZONE=Asia/Dhaka, DATE_FORMAT=DD.MM.YYYY, CURRENCY=BDT, DEADLINE_THRESHOLD_DAYS=3।
ডেলিভারেবলস
Monorepo: /api, /web, .env.sample, README.md, seed script।
Acceptance Checklist
✅ সিড ইউজার লগইন করতে পারে।
✅ প্রত্যেক রোল নিজের সাইডবার/ড্যাশবোর্ড stub দেখে।
✅ Profile edit (name/avatar/password) কাজ করে।
✅ Unauthorized route ব্লক হয়।
Phase 1 — Task Module (Assign & My Task)
উদ্দেশ্য: টাস্ক সিস্টেম পুরোপুরি; কালার-লজিকসহ।
ফিচার
Assign Task (Super Admin → সবাই; Admin → Super Admin বাদে সবাই)।
My Task (Admin/Accountant/Admission/Recruitment/DM/MG): self-assign + status change।
Filters: In-Progress / Completed।
Color Rules: default white/gray → near-deadline (≤3 days) yellow → overdue red; Completed-before-deadline green (Completed list-এ)।
Completed হলে Pending লিস্ট থেকে অটো-রিমুভ।
API (উদাহরণ)
POST /api/tasks/assign (role rules enforced)
GET /api/tasks?status=&assignee=me
PATCH /api/tasks/:id/status (In-Progress/Completed)
Acceptance
✅ Super Admin-কে কেউ assign করতে পারে না (API+UI দুই জায়গায় ব্লক)।
✅ রং/স্ট্যাটাস ট্রানজিশন নিখুঁত।
✅ Completed লিস্টে এসেছে মানে Pending-এ আর নেই।
Phase 2 — Super Admin + Admin (Ops Shell)
উদ্দেশ্য: SA = Pure monitoring + Assign only; Admin = Ops (Assign, Employee/Course CRUD, Reports view-only)।
Super Admin
Overview Dashboard (সব কার্ড/চার্ট view-only)
Leads Center: view + status filter only।
Assign Task: allowed।
কোনো CRUD নয় (কঠোরভাবে)।
Admin
Assign (Except SA), My Task।
Employee List: CRUD।
Courses: CRUD (module/details view)।
Dept Reports: view-only mirrors।
Phase 3 — Digital Marketing (Lead Engine)
Lead Entry form + CSV bulk (Name, Phone, Email, InterestedCourse, Source; duplicate warn+skip)।
Leads Center: DM can assign to Admission; status filters।
Cost Entry/Expense (Meta Ads/LinkedIn Ads/Software/Subscription/Others)।
Social Media Reports (followers/impressions/reach)।
SEO Reports (Date, Type of Work, Challenge, Details + Add popup)।
Phase 4 — Admission (Conversion & Fees)
Assigned Lead → Start Counseling → (Admitted / Follow-Up / Not Admitted), history trail।
Fees Collection submit → Accountant review queue।
Dashboard: cards + Graph (Admissions vs Follow-Up vs Collection) + Pie (Admitted by Course)।
Courses: view-only।
Phase 5 — Accountant (Finance Core)
Review Fees: Approve/Reject → Approved ⇒ Income auto-create।
Income CRUD, Expense CRUD।
Dashboard: Income/Expense/Profit/Balance + chart।
Phase 6 — Recruitment
Candidate CRUD (CanID auto), View CV link।
Recruited action → select Employer+Job Position।
Job Position CRUD, Employer CRUD।
Recruitment-scope Income/Expense CRUD।
Dashboard + Candidate vs Recruited graph।
Phase 7 — Motion Graphics
Dashboard: Total Static/Motion/Video Ready/Task Completed + graph।
Output Report CRUD (Date, Category, Title, Platform, FileLink, Status)।
Filters + cards auto-calc।
Phase 8 — Reports Consolidation & Polish
Admin/SAdmin overview কার্ড/চার্টে সব ডেটা সিঙ্ক।
Mobile polish (sticky headers, horizontal scroll, full-screen modals)।
Sample CSV, Postman collection, minimal tests (task rules, lead pipeline, fees approval)।
🔎 গুণগত মান ও ভুল ঠেকানোর গার্ডরেইল
RBAC কঠোর: backend authorize + frontend guard; SA CRUD নিষিদ্ধ।
Validation: Joi/Zod + Mongoose; enum fields (status, source, method) কড়া।
ID Scheme: LEAD-YYYY-####, EMP-####, CRS-####, CAN-YYYY-#### (indexed)।
Audit Trail: key transitions (assign, status change, approve/reject) history-তে লগ।
CSV Safe Import: header required + duplicate phone/email detect।
ENV Configurable: thresholdDays, currency, date format।
UI States: unauthorized actions disabled (শুধু লুকানো নয়) + confirm dialogs।
🧭 কাজ চালানোর নিয়ম (তোমার জন্য সহজ)
তুমি বলবে: “Start Phase 0” বা “Start Phase 1”
আমি ওই Phase-এর ফাইল-কমপ্লিট কোডবেস দিচ্ছি (api+web, seed, readme, env sample সহ)
চেকলিস্টে ✅ হলে পরের Phase
আমার সাজেশন: Phase 0 → Phase 1 দিয়ে শুরু করি।
“OK, start Phase 0” বললেই আমি সঙ্গে সঙ্গে Phase 0 ডেলিভার করব (রান-রেডি কোড সহ)।
You said:
Start Phase 0
ChatGPT said:

Thought for 9s
ওকে Polok — Phase 0 (Foundation) ডেলিভার করছি।
এটা কপি–পেস্ট করে সরাসরি রান করতে পারবে। Monorepo স্ট্রাকচার, JWT httpOnly অথ, RBAC গার্ড, Prime Academy ব্র্যান্ডেড UI শেল, রোল-ভিত্তিক সাইডবার, প্রোফাইল এডিট (নাম/অ্যাভাটার URL/পাসওয়ার্ড) — সব আছে। চ্যাট ফিচার নাই।
📁 প্রজেক্ট স্ট্রাকচার
primeops/
├─ api/
│  ├─ package.json
│  ├─ .env.sample
│  ├─ server.js
│  ├─ config/db.js
│  ├─ models/User.js
│  ├─ middleware/auth.js
│  ├─ middleware/authorize.js
│  ├─ routes/auth.js
│  ├─ routes/users.js
│  ├─ utils/hash.js
│  ├─ seed.js
│  └─ README.md
└─ web/
   ├─ package.json
   ├─ index.html
   ├─ vite.config.js
   ├─ postcss.config.js
   ├─ tailwind.config.js
   └─ src/
      ├─ main.jsx
      ├─ App.jsx
      ├─ lib/api.js
      ├─ context/AuthContext.jsx
      ├─ components/Topbar.jsx
      ├─ components/Sidebar.jsx
      ├─ components/ProtectedRoute.jsx
      ├─ components/RoleRoute.jsx
      └─ pages/
         ├─ Login.jsx
         ├─ Profile.jsx
         ├─ Dashboard.jsx
         └─ NotFound.jsx
🧩 Back-end (api)
api/package.json
{
  "name": "primeops-api",
  "version": "1.0.0",
  "type": "module",
  "main": "server.js",
  "scripts": {
    "dev": "NODE_ENV=development nodemon server.js",
    "start": "NODE_ENV=production node server.js",
    "seed": "node seed.js"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.6.1",
    "morgan": "^1.10.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.7"
  }
}
api/.env.sample
MONGO_URI=mongodb://localhost:27017/primeops
JWT_SECRET=supersecretchangeit
CLIENT_ORIGIN=http://localhost:5173
PORT=5001
TIMEZONE=Asia/Dhaka
DATE_FORMAT=DD.MM.YYYY
CURRENCY=BDT
DEADLINE_THRESHOLD_DAYS=3
api/config/db.js
import mongoose from 'mongoose';

export const connectDB = async (uri) => {
  try {
    await mongoose.connect(uri, {
      dbName: 'primeops'
    });
    console.log('✅ MongoDB connected');
  } catch (err) {
    console.error('❌ MongoDB connection error:', err.message);
    process.exit(1);
  }
};
api/utils/hash.js
import bcrypt from 'bcryptjs';

export const hashPassword = async (plain) => {
  const salt = await bcrypt.genSalt(10);
  return bcrypt.hash(plain, salt);
};

export const comparePassword = async (plain, hashed) => {
  return bcrypt.compare(plain, hashed);
};
api/models/User.js
import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true, lowercase: true, trim: true },
    password: { type: String, required: true, select: false },
    role: {
      type: String,
      required: true,
      enum: [
        'SuperAdmin',
        'Admin',
        'Accountant',
        'Admission',
        'Recruitment',
        'DigitalMarketing',
        'MotionGraphics'
      ]
    },
    department: { type: String },
    designation: { type: String },
    avatar: {
      type: String,
      default: 'https://ui-avatars.com/api/?name=Prime+Academy&background=253985&color=fff'
    },
    isActive: { type: Boolean, default: true },
    joinDate: { type: Date, default: Date.now }
  },
  { timestamps: true }
);

export default mongoose.model('User', UserSchema);
api/middleware/auth.js
import jwt from 'jsonwebtoken';

export const requireAuth = (req, res, next) => {
  const token = req.cookies?.token;
  if (!token) return res.status(401).json({ code: 'UNAUTHENTICATED', message: 'Login required' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // { id, role, email, name }
    return next();
  } catch (e) {
    return res.status(401).json({ code: 'INVALID_TOKEN', message: 'Invalid session' });
  }
};
api/middleware/authorize.js
export const authorize = (roles = []) => {
  return (req, res, next) => {
    const userRole = req.user?.role;
    if (!userRole) {
      return res.status(401).json({ code: 'UNAUTHENTICATED', message: 'Login required' });
    }
    if (roles.length > 0 && !roles.includes(userRole)) {
      return res.status(403).json({ code: 'FORBIDDEN', message: 'Insufficient permission' });
    }
    next();
  };
};
api/routes/auth.js
import express from 'express';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';
import { comparePassword, hashPassword } from '../utils/hash.js';
import { requireAuth } from '../middleware/auth.js';

const router = express.Router();

// Login
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body || {};
    const user = await User.findOne({ email, isActive: true }).select('+password');
    if (!user) return res.status(400).json({ code: 'INVALID_CREDENTIALS', message: 'Invalid email or password' });

    const ok = await comparePassword(password, user.password);
    if (!ok) return res.status(400).json({ code: 'INVALID_CREDENTIALS', message: 'Invalid email or password' });

    const payload = { id: user._id.toString(), role: user.role, email: user.email, name: user.name };
    const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '7d' });

    res.cookie('token', token, {
      httpOnly: true,
      sameSite: 'lax',
      secure: false, // set true behind HTTPS in prod
      path: '/'
    });

    const { password: _, ...safe } = user.toObject();
    return res.json({ user: safe });
  } catch (e) {
    return res.status(500).json({ code: 'SERVER_ERROR', message: e.message });
  }
});

// Me
router.get('/me', requireAuth, async (req, res) => {
  const user = await User.findById(req.user.id);
  if (!user) return res.status(404).json({ code: 'NOT_FOUND', message: 'User not found' });
  return res.json({ user });
});

// Logout
router.post('/logout', requireAuth, (req, res) => {
  res.clearCookie('token', { path: '/' });
  return res.json({ ok: true });
});

// Update profile (name, avatar, password change)
router.put('/me', requireAuth, async (req, res) => {
  try {
    const { name, avatar, currentPassword, newPassword } = req.body || {};
    const user = await User.findById(req.user.id).select('+password');
    if (!user) return res.status(404).json({ code: 'NOT_FOUND', message: 'User not found' });

    if (name) user.name = name;
    if (avatar) user.avatar = avatar;

    if (newPassword) {
      if (!currentPassword) {
        return res.status(400).json({ code: 'CURRENT_PASSWORD_REQUIRED', message: 'Current password required' });
      }
      const ok = await comparePassword(currentPassword, user.password);
      if (!ok) {
        return res.status(400).json({ code: 'INVALID_CURRENT_PASSWORD', message: 'Current password incorrect' });
      }
      user.password = await hashPassword(newPassword);
    }

    await user.save();
    const { password: _, ...safe } = user.toObject();
    return res.json({ user: safe });
  } catch (e) {
    return res.status(500).json({ code: 'SERVER_ERROR', message: e.message });
  }
});

export default router;
api/routes/users.js
import express from 'express';
import User from '../models/User.js';
import { requireAuth } from '../middleware/auth.js';
import { authorize } from '../middleware/authorize.js';
import { hashPassword } from '../utils/hash.js';

const router = express.Router();

// Admin can manage employees; SuperAdmin view-only (Phase 0: expose minimal list)
router.get('/', requireAuth, authorize(['Admin', 'SuperAdmin']), async (req, res) => {
  const users = await User.find().select('-password');
  return res.json({ users });
});

// Admin create user (Phase 0 basic)
router.post('/', requireAuth, authorize(['Admin']), async (req, res) => {
  const { name, email, password, role, department, designation, avatar } = req.body || {};
  const exists = await User.findOne({ email });
  if (exists) return res.status(409).json({ code: 'EMAIL_EXISTS', message: 'Email already in use' });

  const hashed = await hashPassword(password || 'password123');
  const user = await User.create({
    name, email, password: hashed, role, department, designation, avatar
  });
  const { password: _, ...safe } = user.toObject();
  return res.status(201).json({ user: safe });
});

export default router;
api/server.js
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import { connectDB } from './config/db.js';
import authRoutes from './routes/auth.js';
import userRoutes from './routes/users.js';

dotenv.config();

const app = express();
app.use(helmet());
app.use(morgan('dev'));
app.use(express.json({ limit: '2mb' }));
app.use(cookieParser());
app.use(cors({
  origin: process.env.CLIENT_ORIGIN || 'http://localhost:5173',
  credentials: true
}));

app.get('/health', (req, res) => res.json({ ok: true, service: 'primeops-api' }));

app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);

// Global error handler (fallback)
app.use((err, req, res, next) => {
  console.error('Unhandled:', err);
  res.status(500).json({ code: 'SERVER_ERROR', message: 'Unexpected error' });
});

const PORT = process.env.PORT || 5001;
connectDB(process.env.MONGO_URI).then(() => {
  app.listen(PORT, () => console.log(`🚀 API running on http://localhost:${PORT}`));
});
api/seed.js
import dotenv from 'dotenv';
import { connectDB } from './config/db.js';
import User from './models/User.js';
import { hashPassword } from './utils/hash.js';

dotenv.config();

const users = [
  // Super Admin
  { name: 'Ikhtiar Rahman', email: 'ikhtiar@primeacademy.org', role: 'SuperAdmin', department: 'Management', designation: 'CEO' },
  { name: 'Kazi Sazzad Hossain', email: 'kazi@primeacademy.org', role: 'SuperAdmin', department: 'Marketing', designation: 'Head of Marketing' },
  { name: 'Raj Pahal', email: 'raj@primeacademy.org', role: 'SuperAdmin', department: 'Partnership', designation: 'Director, Partnership' },

  // Admin
  { name: 'Shahidul Islam', email: 'shahidul@primecademy.org', role: 'Admin', department: 'Academic', designation: 'Director, Academic' },
  { name: 'Rafsaniyat Binte Mustafiz', email: 'rafsaniyat@primeacademy.org', role: 'Admin', department: 'Operations', designation: 'Manager, Operations' },

  // Accountant
  { name: 'Md. Mahbub Rahman', email: 'mahbub@primeacademy.org', role: 'Accountant', department: 'Finance', designation: 'Accountant' },

  // Recruitment
  { name: 'Md. Tanvir Alin', email: 'alin@primeacademy.org', role: 'Recruitment', department: 'Recruitment', designation: 'Business Development Manager' },

  // Admission
  { name: 'Sajrin Bashar', email: 'sajrin@primeacademy.org', role: 'Admission', department: 'Admission', designation: 'Business Development Support' },

  // Digital Marketing
  { name: 'J. R. Polok', email: 'polok@primeacademy.org', role: 'DigitalMarketing', department: 'Marketing', designation: 'Digital Marketing Executive' },

  // Motion Graphics
  { name: 'Shuvo Kumar Das', email: 'shuvo@primeacademy.org', role: 'MotionGraphics', department: 'Creative', designation: 'Motion Graphics Designer' }
];

(async () => {
  try {
    await connectDB(process.env.MONGO_URI);
    await User.deleteMany({});
    const pwd = await hashPassword('password123'); // default password
    const docs = await User.insertMany(users.map(u => ({ ...u, password: pwd })));
    console.log(`✅ Seeded ${docs.length} users. Default password: password123`);
    process.exit(0);
  } catch (e) {
    console.error('❌ Seed error:', e.message);
    process.exit(1);
  }
})();
api/README.md
# PrimeOPS API (Phase 0)

## Setup
1) Copy `.env.sample` to `.env` and set values.
2) `npm i`
3) Run MongoDB locally or set MONGO_URI to Atlas.
4) Seed users: `npm run seed`
   - Default password for all: `password123`
5) Start dev: `npm run dev` (http://localhost:5001)

## Health
GET `/health` → `{ ok: true }`

## Auth
- POST `/api/auth/login` { email, password }
- GET `/api/auth/me`
- POST `/api/auth/logout`
- PUT `/api/auth/me` { name?, avatar?, currentPassword?, newPassword? }

Cookies: `token` (httpOnly). Enable CORS `CLIENT_ORIGIN`.
🎨 Front-end (web)
web/package.json
{
  "name": "primeops-web",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "lucide-react": "^0.452.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.26.2"
  },
  "devDependencies": {
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.14",
    "vite": "^5.4.10"
  }
}
web/index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>PrimeOPS</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  </head>
  <body class="bg-[#f7f9fc]">
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
web/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: { port: 5173 }
});
web/postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {}
  }
};
web/tailwind.config.js
export default {
  content: ["./index.html", "./src/**/*.{js,jsx}"],
  theme: {
    extend: {
      fontFamily: { sans: ['Poppins', 'ui-sans-serif', 'system-ui'] },
      colors: {
        navy: '#053867',
        royal: '#253985',
        gold: '#F7BA23',
        lightgold: '#F3CE49'
      },
      boxShadow: {
        soft: '0 10px 25px rgba(5,56,103,0.08)'
      },
      borderRadius: {
        '2xl': '1rem'
      }
    }
  },
  plugins: []
};
web/src/main.jsx
import React from 'react';
import { createRoot } from 'react-dom/client';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import './styles.css';
import { AuthProvider } from './context/AuthContext.jsx';
import App from './App.jsx';
import Login from './pages/Login.jsx';
import NotFound from './pages/NotFound.jsx';

createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <AuthProvider>
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route path="/*" element={<App />} />
          <Route path="*" element={<NotFound />} />
        </Routes>
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);
web/src/App.jsx
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import ProtectedRoute from './components/ProtectedRoute.jsx';
import RoleRoute from './components/RoleRoute.jsx';
import Topbar from './components/Topbar.jsx';
import Sidebar from './components/Sidebar.jsx';
import Dashboard from './pages/Dashboard.jsx';
import Profile from './pages/Profile.jsx';

export default function App() {
  return (
    <Routes>
      <Route element={<ProtectedRoute />}>
        <Route
          path="/"
          element={
            <Layout>
              <Dashboard />
            </Layout>
          }
        />
        <Route
          path="/profile"
          element={
            <Layout>
              <Profile />
            </Layout>
          }
        />
        {/* Future stubs per role pages can be added here */}
      </Route>
      <Route path="*" element={<Navigate to="/" />} />
    </Routes>
  );
}

function Layout({ children }) {
  return (
    <div className="min-h-screen flex bg-[#f7f9fc]">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="p-4 md:p-6">{children}</main>
      </div>
    </div>
  );
}
web/src/lib/api.js
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

export const api = {
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST',
      credentials: 'include'
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw await res.json();
    return res.json();
  }
};
web/src/context/AuthContext.jsx
import React, { createContext, useContext, useEffect, useState } from 'react';
import { api } from '../lib/api.js';
import { useNavigate, Outlet } from 'react-router-dom';

const AuthCtx = createContext(null);
export const useAuth = () => useContext(AuthCtx);

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [ready, setReady] = useState(false);

  useEffect(() => {
    api.me().then(({ user }) => {
      setUser(user);
      setReady(true);
    }).catch(() => setReady(true));
  }, []);

  const login = async (email, password) => {
    const { user } = await api.login(email, password);
    setUser(user);
    return user;
  };

  const logout = async () => {
    await api.logout();
    setUser(null);
  };

  const updateMe = async (payload) => {
    const { user } = await api.updateMe(payload);
    setUser(user);
    return user;
  };

  return (
    <AuthCtx.Provider value={{ user, ready, login, logout, updateMe }}>
      {children}
    </AuthCtx.Provider>
  );
}

export function RequireAuth() {
  const { user, ready } = useAuth();
  const navigate = useNavigate();
  useEffect(() => {
    if (ready && !user) navigate('/login');
  }, [ready, user, navigate]);
  return <Outlet />;
}
web/src/components/ProtectedRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext.jsx';

export default function ProtectedRoute() {
  const { user, ready } = useAuth();
  if (!ready) return <div className="p-6 text-royal">Loading...</div>;
  if (!user) return <Navigate to="/login" replace />;
  return <Outlet />;
}
web/src/components/RoleRoute.jsx
import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';
import { useAuth } from '../context/AuthContext.jsx';

export default function RoleRoute({ roles = [] }) {
  const { user } = useAuth();
  if (!user) return <Navigate to="/login" replace />;
  if (roles.length && !roles.includes(user.role)) return <Navigate to="/" replace />;
  return <Outlet />;
}
web/src/components/Topbar.jsx
import React from 'react';
import { useAuth } from '../context/AuthContext.jsx';
import { LogOut, User as UserIcon } from 'lucide-react';

export default function Topbar() {
  const { user, logout } = useAuth();
  return (
    <header className="h-16 bg-navy text-white flex items-center justify-between px-4 shadow-soft">
      <div className="font-semibold tracking-wide">Prime Academy Office Management</div>
      <div className="flex items-center gap-3">
        <img src={user?.avatar} alt="avatar" className="w-9 h-9 rounded-full border-2 border-gold object-cover"/>
        <div className="text-sm leading-tight">
          <div className="font-semibold">{user?.name}</div>
          <div className="opacity-80">{user?.designation}</div>
        </div>
        <a href="/profile" className="ml-2 inline-flex items-center gap-1 bg-gold text-navy px-3 py-2 rounded-2xl hover:bg-lightgold transition">
          <UserIcon size={16}/> Profile
        </a>
        <button onClick={logout} className="inline-flex items-center gap-1 bg-white text-navy px-3 py-2 rounded-2xl hover:bg-lightgold transition">
          <LogOut size={16}/> Logout
        </button>
      </div>
    </header>
  );
}
web/src/components/Sidebar.jsx
import React from 'react';
import { useAuth } from '../context/AuthContext.jsx';
import { LayoutDashboard, Users, BookOpen, ListChecks } from 'lucide-react';
import { Link, useLocation } from 'react-router-dom';

const MENU_BY_ROLE = {
  SuperAdmin: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '#', label: 'Assign Task', icon: <ListChecks size={18}/> },
    { to: '#', label: 'Leads Center (View)', icon: <BookOpen size={18}/> },
    { to: '#', label: 'Reports (View)', icon: <BookOpen size={18}/> }
  ],
  Admin: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '#', label: 'Assign Task', icon: <ListChecks size={18}/> },
    { to: '#', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '#', label: 'Employee (CRUD)', icon: <Users size={18}/> },
    { to: '#', label: 'Courses (CRUD)', icon: <BookOpen size={18}/> }
  ],
  Accountant: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '#', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '#', label: 'Fees Review', icon: <BookOpen size={18}/> },
    { to: '#', label: 'Income/Expense', icon: <BookOpen size={18}/> }
  ],
  Admission: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '#', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '#', label: 'Assigned Leads', icon: <BookOpen size={18}/> }
  ],
  Recruitment: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '#', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '#', label: 'Candidates/Jobs', icon: <Users size={18}/> }
  ],
  DigitalMarketing: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '#', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '#', label: 'Lead Entry / CSV', icon: <BookOpen size={18}/> },
    { to: '#', label: 'Leads Center', icon: <BookOpen size={18}/> },
    { to: '#', label: 'Cost / Social / SEO', icon: <BookOpen size={18}/> }
  ],
  MotionGraphics: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '#', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '#', label: 'Output Report', icon: <BookOpen size={18}/> }
  ]
};

export default function Sidebar() {
  const { user } = useAuth();
  const loc = useLocation();
  const items = MENU_BY_ROLE[user?.role] || [];

  return (
    <aside className="w-72 hidden md:flex bg-white border-r border-[#e6e8ef] min-h-screen sticky top-0 flex-col">
      <div className="h-16 flex items-center px-4 text-navy font-semibold border-b">PrimeOPS</div>
      <nav className="flex-1 p-3">
        {items.map((item, idx) => (
          <Link
            key={idx}
            to={item.to === '#' ? '/' : item.to}
            className={`flex items-center gap-2 px-3 py-2 rounded-xl mb-1 hover:bg-[#f1f4fb] text-royal ${loc.pathname === item.to ? 'bg-[#eef2fb] font-semibold' : ''}`}
          >
            {item.icon}{item.label}
          </Link>
        ))}
      </nav>
      <div className="p-3 text-xs text-royal/70">© Prime Academy Bangladesh</div>
    </aside>
  );
}
web/src/pages/Login.jsx
import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext.jsx';
import { useNavigate } from 'react-router-dom';

export default function Login() {
  const { login } = useAuth();
  const nav = useNavigate();
  const [email, setEmail] = useState('polok@primeacademy.org'); // quick default for you
  const [password, setPassword] = useState('password123');
  const [err, setErr] = useState(null);
  const [loading, setLoading] = useState(false);

  const submit = async (e) => {
    e.preventDefault();
    setErr(null);
    setLoading(true);
    try {
      await login(email, password);
      nav('/');
    } catch (e) {
      setErr(e?.message || 'Login failed');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-royal/10 to-gold/10">
      <form onSubmit={submit} className="bg-white shadow-soft rounded-2xl p-6 w-full max-w-md">
        <h1 className="text-2xl font-bold text-navy mb-4">Sign in to PrimeOPS</h1>
        {err && <div className="mb-3 text-sm text-red-600">{err}</div>}
        <label className="block text-sm text-royal mb-1">Email</label>
        <input className="w-full border rounded-xl px-3 py-2 mb-3" value={email} onChange={e=>setEmail(e.target.value)} placeholder="you@domain.com"/>
        <label className="block text-sm text-royal mb-1">Password</label>
        <input className="w-full border rounded-xl px-3 py-2 mb-4" type="password" value={password} onChange={e=>setPassword(e.target.value)} />
        <button disabled={loading} className="w-full bg-gold text-navy rounded-xl py-2 font-semibold hover:bg-lightgold transition">
          {loading ? 'Signing in…' : 'Sign In'}
        </button>
        <p className="mt-3 text-xs text-royal/70">Default password for seeded users: <b>password123</b></p>
      </form>
    </div>
  );
}
web/src/pages/Profile.jsx
import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext.jsx';

export default function Profile() {
  const { user, updateMe } = useAuth();
  const [name, setName] = useState(user?.name || '');
  const [avatar, setAvatar] = useState(user?.avatar || '');
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [msg, setMsg] = useState(null);
  const [err, setErr] = useState(null);

  const submit = async (e) => {
    e.preventDefault();
    setMsg(null); setErr(null);
    try {
      const payload = { name, avatar };
      if (newPassword) payload.currentPassword = currentPassword, payload.newPassword = newPassword;
      await updateMe(payload);
      setMsg('Profile updated');
      setCurrentPassword(''); setNewPassword('');
    } catch (e) {
      setErr(e?.message || 'Update failed');
    }
  };

  return (
    <div className="max-w-2xl">
      <h1 className="text-2xl font-bold text-navy mb-4">Edit Profile</h1>
      {msg && <div className="mb-3 text-green-700">{msg}</div>}
      {err && <div className="mb-3 text-red-600">{err}</div>}
      <form onSubmit={submit} className="bg-white shadow-soft rounded-2xl p-4">
        <div className="flex items-center gap-4">
          <img src={avatar} alt="avatar" className="w-20 h-20 rounded-full object-cover border-2 border-gold"/>
          <div className="flex-1">
            <label className="block text-sm text-royal mb-1">Avatar URL</label>
            <input className="w-full border rounded-xl px-3 py-2" value={avatar} onChange={e=>setAvatar(e.target.value)} />
          </div>
        </div>
        <div className="mt-4">
          <label className="block text-sm text-royal mb-1">Full Name</label>
          <input className="w-full border rounded-xl px-3 py-2" value={name} onChange={e=>setName(e.target.value)} />
        </div>

        <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm text-royal mb-1">Current Password</label>
            <input type="password" className="w-full border rounded-xl px-3 py-2" value={currentPassword} onChange={e=>setCurrentPassword(e.target.value)} />
          </div>
          <div>
            <label className="block text-sm text-royal mb-1">New Password</label>
            <input type="password" className="w-full border rounded-xl px-3 py-2" value={newPassword} onChange={e=>setNewPassword(e.target.value)} />
          </div>
        </div>

        <button className="mt-6 bg-gold text-navy rounded-xl px-5 py-2 font-semibold hover:bg-lightgold">Save Changes</button>
      </form>
    </div>
  );
}
web/src/pages/Dashboard.jsx
import React from 'react';
import { useAuth } from '../context/AuthContext.jsx';
import { BarChart3, Users, CheckCircle2, PieChart } from 'lucide-react';

const Card = ({ icon, title, value }) => (
  <div className="bg-white rounded-2xl shadow-soft p-4 flex items-center gap-3">
    <div className="p-3 rounded-xl bg-royal/10 text-royal">{icon}</div>
    <div>
      <div className="text-sm text-royal/80">{title}</div>
      <div className="text-xl font-bold text-navy">{value}</div>
    </div>
  </div>
);

export default function Dashboard() {
  const { user } = useAuth();

  const roleTitleMap = {
    SuperAdmin: 'Super Admin Overview (View-only)',
    Admin: 'Admin Overview',
    Accountant: 'Accountant Dashboard',
    Admission: 'Admission Dashboard',
    Recruitment: 'Recruitment Dashboard',
    DigitalMarketing: 'Digital Marketing Dashboard',
    MotionGraphics: 'Motion Graphics Dashboard'
  };

  const cards = [
    { title: 'Welcome', value: user?.name, icon: <Users size={20}/> },
    { title: 'Role', value: user?.role, icon: <CheckCircle2 size={20}/> },
    { title: 'Department', value: user?.department || '-', icon: <BarChart3 size={20}/> },
    { title: 'Designation', value: user?.designation || '-', icon: <PieChart size={20}/> }
  ];

  return (
    <div>
      <h1 className="text-2xl font-bold text-navy mb-4">{roleTitleMap[user?.role] || 'Dashboard'}</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4">
        {cards.map((c, i) => <Card key={i} {...c} />)}
      </div>
      <div className="mt-6 text-royal/80 text-sm">
        Phase 0 shell ready. Next phases will plug in real metrics, charts & role pages.
      </div>
    </div>
  );
}
web/src/pages/NotFound.jsx
import React from 'react';
export default function NotFound() {
  return <div className="p-6">Not Found</div>;
}
web/src/styles.css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --navy: #053867;
  --royal: #253985;
  --gold: #F7BA23;
  --lightgold: #F3CE49;
}

* { font-family: 'Poppins', sans-serif; }
🚀 রান করার স্টেপস
MongoDB চালু করো (লোকাল বা Atlas URI)
টার্মিনালে:
# 1) Backend
cd primeops/api
cp .env.sample .env
npm i
npm run seed
npm run dev
# API: http://localhost:5001

# 2) Frontend
cd ../web
npm i
npm run dev
# Web: http://localhost:5173
Login
উদাহরণ: polok@primeacademy.org / password123
বাকি সব সিড ইউজারও password123।
✅ Phase 0 Acceptance (যেটা তুমি চেয়েছিলে)
রোলভিত্তিক সাইডবার/ড্যাশবোর্ড শেল ✔
JWT httpOnly অথ + /login, /profile, logout ✔
প্রোফাইল এডিট: নাম, avatar URL, পাসওয়ার্ড চেঞ্জ (current password যাচাই সহ) ✔
Super Admin/সব রোল কাজের স্টাব দেখছে ✔
Prime Academy ব্র্যান্ড কালার + Poppins, কার্ড স্টাইল ✔
CORS + Cookie credentials সেটআপ ✔
তুমি চাইলে এখন বলো “Start Phase 1” — আমি Task Module (Assign & My Task + deadline color logic) সম্পূর্ণ ফাইল-কমপ্লিট ড্রপ করবো।
You said:
MONGODB_URI=mongodb+srv://jrpolokprime_db_user:xGMeyQhtFBgDlCGh@primeops.a25zi1n.mongodb.net/primeacademyops?retryWrites=true&w=majority&appName=PrimeOPS

write env with my mongoDb uri
ChatGPT said:
দারুণ! নিচে Phase 0 অনুযায়ী দুটো .env ফাইল দিলাম—একটা API-এর জন্য, আরেকটা WEB (Vite)-এর জন্য। তোমার দেয়া MongoDB Atlas URI আমি বসিয়ে দিলাম।
api/.env
MONGO_URI=mongodb+srv://jrpolokprime_db_user:xGMeyQhtFBgDlCGh@primeops.a25zi1n.mongodb.net/primeacademyops?retryWrites=true&w=majority&appName=PrimeOPS
JWT_SECRET=please_change_this_super_secret_key
CLIENT_ORIGIN=http://localhost:5173
PORT=5001

# App settings
TIMEZONE=Asia/Dhaka
DATE_FORMAT=DD.MM.YYYY
CURRENCY=BDT
DEADLINE_THRESHOLD_DAYS=3
web/.env
VITE_API_BASE=http://localhost:5001
ব্যবহার টিপস
JWT_SECRET অবশ্যই শক্তিশালী ও ইউনিক দাও (production-এ বদলে দাও)।
CLIENT_ORIGIN লোকাল ডেভের সময় http://localhost:5173 থাকবে; ডিপ্লয় করলে ফ্রন্টএন্ডের আসল ডোমেইন দাও।
এই ফাইলগুলো তৈরি/আপডেট করার পর:
primeops/api ফোল্ডারে npm run dev
primeops/web ফোল্ডারে npm run dev
কোনো এরর দেখলে আমাকে বলো, ফিক্স করে দিচ্ছি।
You said:
jrpolok@Js-Mac-mini web % npm run dev 

> primeops-web@1.0.0 dev
> vite

failed to load config from /Users/jrpolok/Prime_OPS-P/web/vite.config.js
error when starting dev server:
Error [ERR_MODULE_NOT_FOUND]: Cannot find package '@vitejs/plugin-react' imported from /Users/jrpolok/Prime_OPS-P/web/vite.config.js.timestamp-1761044075498-44fcb8ade3878.mjs
    at Object.getPackageJSONURL (node:internal/modules/package_json_reader:266:9)
    at packageResolve (node:internal/modules/esm/resolve:767:81)
    at moduleResolve (node:internal/modules/esm/resolve:853:18)
    at defaultResolve (node:internal/modules/esm/resolve:983:11)
    at #cachedDefaultResolve (node:internal/modules/esm/loader:731:20)
    at ModuleLoader.resolve (node:internal/modules/esm/loader:708:38)
    at ModuleLoader.getModuleJobForImport (node:internal/modules/esm/loader:310:38)
    at ModuleJob._link (node:internal/modules/esm/module_job:183:49)
jrpolok@Js-Mac-mini web % 
ChatGPT said:

Thought for 6s
সমস্যাটা একদম সোজা: @vitejs/plugin-react ইনস্টল নেই—কিন্তু vite.config.js ওটা import করছে। ঠিক করতে নিচের কমান্ডটা দাও (web ফোল্ডার থেকে):
cd /Users/jrpolok/Prime_OPS-P/web
npm i -D @vitejs/plugin-react
npm run dev
যদি Node ভার্সন পুরোনো হয় (Vite v5 এর জন্য Node ≥ 18 দরকার), আগে চেক করো:
node -v
১৮-এর নিচে হলে Node আপডেট করো।
চাইলে web/package.json-এ devDependencies আপডেট করে রাখতে পারো (future installs এর সুবিধার জন্য):

{
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.14",
    "vite": "^5.4.10"
  }
}
এগুলো করার পর npm run dev দিলে সার্ভার উঠে আসবে। অন্য কিছুতে আটকে গেলে লগটা কপি করে দাও—সাথেসাথে ফিক্স করে দেব।
You said:
done. now ?
ChatGPT said:
চমৎকার Polok 💪
এর মানে তোমার Phase 0 foundation সম্পূর্ণভাবে প্রস্তুত — এখন তুমি লগইন করতে পারবে এবং রোলভিত্তিক শেল (sidebar + topbar + profile edit) একদম ব্র্যান্ড-consistentভাবে কাজ করবে।
সবকিছু টেস্ট করার জন্য দ্রুত চেকলিস্ট👇
✅ Quick Verification Checklist (Phase 0)
1️⃣ API চলছে 👉 http://localhost:5001/health → { ok:true } দেখাচ্ছে।
2️⃣ Web চলছে 👉 http://localhost:5173/
3️⃣ লগইন করো:
 polok@primeacademy.org / password123
 (তুমি Super Admin, Sidebar এ শুধু Dashboard + Assign Task (View Stub) + Leads Center (View) + Reports (View) দেখবে)।
4️⃣ Profile পেইজে গিয়ে নাম, avatar URL, বা পাসওয়ার্ড পরিবর্তন করে দেখো।
5️⃣ Logout দিলে টোকেন ক্লিয়ার হয়ে যায় কিনা চেক করো।
6️⃣ অন্য কোনো রোল (যেমন shahidul@primecademy.org) দিয়ে লগইন করলে Sidebar অন্যরকম দেখাবে।
সব ঠিক থাকলে এখন আমরা Phase 1 — Task Module শুরু করব।
ওখানে থাকবে:

Assign Task (Super Admin/Admin)
My Task (সব রোলে)
Color logic (white/gray → yellow → red → green)
Completed Task List
তুমি শুধু বলো 👉 “Start Phase 1”
তাহলেই আমি Phase 1-এর সম্পূর্ণ backend + frontend code একবারে দিয়ে দেব।
You said:
Start Phase 1
ChatGPT said:

Thought for 26s
দারুন—Phase 1 (Task Module) এখনই ডেলিভার করছি।
এতে আছে: Assign Task (Super Admin + Admin), My Task (Admin/Accountant/Admission/Recruitment/DigitalMarketing/MotionGraphics), ডেডলাইনভিত্তিক রঙের লজিক, ফিল্টার, স্ট্যাটাস আপডেট, এবং “Super Admin-কে কাউকে টাস্ক assign করা যাবে না” রুল—API ও UI দুই দিক থেকেই এনফোর্সড।
নিচের নতুন/আপডেটেড ফাইলগুলো কপি–পেস্ট করে তোমার প্রজেক্টে বসাও। (Phase 0-এর বাকি ফাইল আগের মতোই থাকবে।)

🔧 Back-end (api)
➕ api/models/Task.js (নতুন)
import mongoose from 'mongoose';

const TaskSchema = new mongoose.Schema(
  {
    title: { type: String, required: true, trim: true },
    description: { type: String, default: '' },
    category: { type: String, default: '' }, // optional, UI থেকে আসতে পারে
    assignedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    deadline: { type: Date, required: true },
    status: { type: String, enum: ['InProgress', 'Completed'], default: 'InProgress' },
    completedAt: { type: Date }
  },
  { timestamps: true }
);

export default mongoose.model('Task', TaskSchema);
➕ api/routes/tasks.js (নতুন)
import express from 'express';
import Task from '../models/Task.js';
import User from '../models/User.js';
import { requireAuth } from '../middleware/auth.js';
import { authorize } from '../middleware/authorize.js';

const router = express.Router();

/**
 * Helpers
 */
const isSuperAdmin = (u) => u?.role === 'SuperAdmin';

/**
 * Assign Task (Super Admin + Admin)
 * Rules:
 * - Super Admin can assign to anyone EXCEPT Super Admin (no one can assign to Super Admin).
 * - Admin can assign to everyone EXCEPT Super Admin.
 */
router.post('/assign', requireAuth, authorize(['SuperAdmin', 'Admin']), async (req, res) => {
  try {
    const { title, description, category, assignedTo, deadline } = req.body || {};

    if (!title || !assignedTo || !deadline) {
      return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'title, assignedTo, deadline are required' });
    }

    const toUser = await User.findById(assignedTo);
    if (!toUser || !toUser.isActive) {
      return res.status(404).json({ code: 'USER_NOT_FOUND', message: 'Assignee not found' });
    }

    // No one can assign TO SuperAdmin
    if (isSuperAdmin(toUser)) {
      return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot assign task to Super Admin' });
    }

    const task = await Task.create({
      title,
      description: description || '',
      category: category || '',
      assignedBy: req.user.id,
      assignedTo: toUser._id,
      deadline: new Date(deadline),
      status: 'InProgress'
    });

    const populated = await Task.findById(task._id).populate('assignedBy', 'name email role').populate('assignedTo', 'name email role');
    return res.status(201).json({ task: populated });
  } catch (e) {
    return res.status(500).json({ code: 'SERVER_ERROR', message: e.message });
  }
});

/**
 * List tasks (Assign Task page)
 * Only SuperAdmin/Admin can view the global assign list.
 * Query:
 *  - status=InProgress|Completed (optional)
 */
router.get('/', requireAuth, authorize(['SuperAdmin', 'Admin']), async (req, res) => {
  try {
    const { status } = req.query;
    const q = {};
    if (status && ['InProgress', 'Completed'].includes(status)) q.status = status;

    const tasks = await Task.find(q)
      .sort({ createdAt: -1 })
      .populate('assignedBy', 'name email role')
      .populate('assignedTo', 'name email role');

    return res.json({ tasks });
  } catch (e) {
    return res.status(500).json({ code: 'SERVER_ERROR', message: e.message });
  }
});

/**
 * My Tasks (for all roles except SuperAdmin)
 * Query:
 *  - status=InProgress|Completed (optional)
 */
router.get('/my', requireAuth, async (req, res) => {
  try {
    // Super Admin has no "My Task" per product rule; but still allow viewing own tasks if any exists.
    const { status } = req.query;
    const q = { assignedTo: req.user.id };
    if (status && ['InProgress', 'Completed'].includes(status)) q.status = status;

    const tasks = await Task.find(q)
      .sort({ createdAt: -1 })
      .populate('assignedBy', 'name email role')
      .populate('assignedTo', 'name email role');

    return res.json({ tasks });
  } catch (e) {
    return res.status(500).json({ code: 'SERVER_ERROR', message: e.message });
  }
});

/**
 * Create Self Task (My Task → Add My Task)
 * Everyone except SuperAdmin can self-create a task assigned to themselves.
 */
router.post('/self', requireAuth, async (req, res) => {
  try {
    // Block Super Admin from creating self tasks (product rule)
    if (req.user.role === 'SuperAdmin') {
      return res.status(403).json({ code: 'FORBIDDEN', message: 'Super Admin has no self tasks' });
    }

    const { title, description, category, deadline } = req.body || {};
    if (!title || !deadline) {
      return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'title and deadline are required' });
    }

    const task = await Task.create({
      title,
      description: description || '',
      category: category || '',
      assignedBy: req.user.id,
      assignedTo: req.user.id,
      deadline: new Date(deadline),
      status: 'InProgress'
    });

    const populated = await Task.findById(task._id).populate('assignedBy', 'name email role').populate('assignedTo', 'name email role');
    return res.status(201).json({ task: populated });
  } catch (e) {
    return res.status(500).json({ code: 'SERVER_ERROR', message: e.message });
  }
});

/**
 * Update Status (InProgress → Completed OR Completed → InProgress)
 * Only the assignee can change their task status.
 */
router.patch('/:id/status', requireAuth, async (req, res) => {
  try {
    const { status } = req.body || {};
    if (!['InProgress', 'Completed'].includes(status)) {
      return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'Invalid status' });
    }

    const task = await Task.findById(req.params.id);
    if (!task) return res.status(404).json({ code: 'NOT_FOUND', message: 'Task not found' });

    if (task.assignedTo.toString() !== req.user.id) {
      return res.status(403).json({ code: 'FORBIDDEN', message: 'Only assignee can change status' });
    }

    task.status = status;
    task.completedAt = status === 'Completed' ? new Date() : undefined;
    await task.save();

    const populated = await Task.findById(task._id).populate('assignedBy', 'name email role').populate('assignedTo', 'name email role');
    return res.json({ task: populated });
  } catch (e) {
    return res.status(500).json({ code: 'SERVER_ERROR', message: e.message });
  }
});

export default router;
✏️ api/server.js (আপডেট — tasks route যুক্ত)
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import { connectDB } from './config/db.js';
import authRoutes from './routes/auth.js';
import userRoutes from './routes/users.js';
import taskRoutes from './routes/tasks.js'; // <-- NEW

dotenv.config();

const app = express();
app.use(helmet());
app.use(morgan('dev'));
app.use(express.json({ limit: '2mb' }));
app.use(cookieParser());
app.use(cors({
  origin: process.env.CLIENT_ORIGIN || 'http://localhost:5173',
  credentials: true
}));

app.get('/health', (req, res) => res.json({ ok: true, service: 'primeops-api' }));

app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/tasks', taskRoutes); // <-- NEW

// Global error handler
app.use((err, req, res, next) => {
  console.error('Unhandled:', err);
  res.status(500).json({ code: 'SERVER_ERROR', message: 'Unexpected error' });
});

const PORT = process.env.PORT || 5001;
connectDB(process.env.MONGO_URI).then(() => {
  app.listen(PORT, () => console.log(`🚀 API running on http://localhost:${PORT}`));
});
🎨 Front-end (web)
✏️ web/src/lib/api.js (আপডেট — users & tasks API)
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

export const api = {
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST',
      credentials: 'include'
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },

  // Users (for assign modal)
  async listUsers() {
    const res = await fetch(`${API_BASE}/api/users`, { credentials: 'include' });
    if (!res.ok) throw await res.json();
    return res.json();
  },

  // Tasks
  async listAllTasks(status) {
    const q = status ? `?status=${status}` : '';
    const res = await fetch(`${API_BASE}/api/tasks${q}`, { credentials: 'include' });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async listMyTasks(status) {
    const q = status ? `?status=${status}` : '';
    const res = await fetch(`${API_BASE}/api/tasks/my${q}`, { credentials: 'include' });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async assignTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/assign`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async addSelfTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/self`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async updateTaskStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/tasks/${id}/status`, {
      method: 'PATCH',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    if (!res.ok) throw await res.json();
    return res.json();
  }
};
✏️ web/src/components/Sidebar.jsx (আপডেট — আসল রাউট)
import React from 'react';
import { useAuth } from '../context/AuthContext.jsx';
import { LayoutDashboard, Users, BookOpen, ListChecks } from 'lucide-react';
import { Link, useLocation } from 'react-router-dom';

const MENU_BY_ROLE = {
  SuperAdmin: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '/assign-tasks', label: 'Assign Task', icon: <ListChecks size={18}/> },
    { to: '/leads-center-view', label: 'Leads Center (View)', icon: <BookOpen size={18}/> },
    { to: '/reports-view', label: 'Reports (View)', icon: <BookOpen size={18}/> }
  ],
  Admin: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '/assign-tasks', label: 'Assign Task', icon: <ListChecks size={18}/> },
    { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '/employees', label: 'Employee (CRUD)', icon: <Users size={18}/> },
    { to: '/courses', label: 'Courses (CRUD)', icon: <BookOpen size={18}/> }
  ],
  Accountant: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '/fees-review', label: 'Fees Review', icon: <BookOpen size={18}/> },
    { to: '/finance', label: 'Income/Expense', icon: <BookOpen size={18}/> }
  ],
  Admission: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '/assigned-leads', label: 'Assigned Leads', icon: <BookOpen size={18}/> }
  ],
  Recruitment: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '/candidates', label: 'Candidates/Jobs', icon: <Users size={18}/> }
  ],
  DigitalMarketing: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '/lead-entry', label: 'Lead Entry / CSV', icon: <BookOpen size={18}/> },
    { to: '/leads-center', label: 'Leads Center', icon: <BookOpen size={18}/> },
    { to: '/dm-metrics', label: 'Cost / Social / SEO', icon: <BookOpen size={18}/> }
  ],
  MotionGraphics: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '/mg-output', label: 'Output Report', icon: <BookOpen size={18}/> }
  ]
};

export default function Sidebar() {
  const { user } = useAuth();
  const loc = useLocation();
  const items = MENU_BY_ROLE[user?.role] || [];

  return (
    <aside className="w-72 hidden md:flex bg-white border-r border-[#e6e8ef] min-h-screen sticky top-0 flex-col">
      <div className="h-16 flex items-center px-4 text-navy font-semibold border-b">PrimeOPS</div>
      <nav className="flex-1 p-3">
        {items.map((item, idx) => (
          <Link
            key={idx}
            to={item.to}
            className={`flex items-center gap-2 px-3 py-2 rounded-xl mb-1 hover:bg-[#f1f4fb] text-royal ${loc.pathname === item.to ? 'bg-[#eef2fb] font-semibold' : ''}`}
          >
            {item.icon}{item.label}
          </Link>
        ))}
      </nav>
      <div className="p-3 text-xs text-royal/70">© Prime Academy Bangladesh</div>
    </aside>
  );
}
➕ web/src/pages/AssignTasks.jsx (নতুন)
import React, { useEffect, useMemo, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

const fmtDateInput = (d) => new Date(d).toISOString().slice(0, 16); // for datetime-local
const todayPlusDays = (n=3) => {
  const d = new Date();
  d.setDate(d.getDate()+n);
  return fmtDateInput(d);
};

export default function AssignTasks() {
  const { user } = useAuth();
  const [users, setUsers] = useState([]);
  const [tasks, setTasks] = useState([]);
  const [status, setStatus] = useState('InProgress');
  const [open, setOpen] = useState(false);
  const [form, setForm] = useState({ title:'', description:'', category:'', assignedTo:'', deadline: todayPlusDays(3) });
  const [err, setErr] = useState(null);
  const [ok, setOk] = useState(null);

  const canAssign = user?.role === 'SuperAdmin' || user?.role === 'Admin';

  const loadUsers = async () => {
    try {
      const { users } = await api.listUsers();
      setUsers(users);
    } catch (e) { /* ignore in UI */ }
  };
  const loadTasks = async () => {
    try {
      const { tasks } = await api.listAllTasks(status);
      setTasks(tasks);
    } catch (e) { /* ignore */ }
  };

  useEffect(() => { if (canAssign) loadUsers(); }, [canAssign]);
  useEffect(() => { if (canAssign) loadTasks(); }, [status, canAssign]);

  const nonSuperAdmins = useMemo(() => users.filter(u => u.role !== 'SuperAdmin'), [users]);

  const submit = async (e) => {
    e.preventDefault();
    setErr(null); setOk(null);
    try {
      await api.assignTask({ ...form });
      setOpen(false);
      setForm({ title:'', description:'', category:'', assignedTo:'', deadline: todayPlusDays(3) });
      setOk('Task assigned');
      loadTasks();
    } catch (e) { setErr(e?.message || 'Failed to assign'); }
  };

  if (!canAssign) return <div className="text-royal">You do not have permission to view this page.</div>;

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Assign Task</h1>
        <div className="flex items-center gap-3">
          <select value={status} onChange={e=>setStatus(e.target.value)} className="border rounded-xl px-3 py-2">
            <option value="InProgress">In Progress</option>
            <option value="Completed">Completed</option>
          </select>
          <button onClick={()=>setOpen(true)} className="bg-gold text-navy rounded-xl px-4 py-2 font-semibold hover:bg-lightgold">+ Assign Task</button>
        </div>
      </div>

      {ok && <div className="mb-2 text-green-700">{ok}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="text-left p-3">Task</th>
              <th className="text-left p-3">Assignee</th>
              <th className="text-left p-3">Status</th>
              <th className="text-left p-3">Deadline</th>
              <th className="text-left p-3">Assigned By</th>
            </tr>
          </thead>
          <tbody>
            {tasks.map(t => (
              <tr key={t._id} className="border-t">
                <td className="p-3">
                  <div className="font-semibold text-navy">{t.title}</div>
                  {t.description && <div className="text-royal/80">{t.description}</div>}
                  {t.category && <div className="text-xs text-royal/70 mt-1">Category: {t.category}</div>}
                </td>
                <td className="p-3">{t.assignedTo?.name} <span className="text-xs text-royal/70">({t.assignedTo?.role})</span></td>
                <td className="p-3">{t.status === 'InProgress' ? 'In Progress' : 'Completed'}</td>
                <td className="p-3">{new Date(t.deadline).toLocaleString()}</td>
                <td className="p-3">{t.assignedBy?.name}</td>
              </tr>
            ))}
            {tasks.length === 0 && (
              <tr><td className="p-4 text-royal/70" colSpan="5">No tasks</td></tr>
            )}
          </tbody>
        </table>
      </div>

      {open && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center p-4">
          <form onSubmit={submit} className="bg-white rounded-2xl shadow-soft p-4 w-full max-w-xl">
            <h2 className="text-xl font-bold text-navy mb-3">Assign Task</h2>
            <label className="block text-sm text-royal mb-1">Title *</label>
            <input className="w-full border rounded-xl px-3 py-2 mb-3" value={form.title} onChange={e=>setForm(f=>({ ...f, title: e.target.value }))} required/>

            <label className="block text-sm text-royal mb-1">Description</label>
            <textarea className="w-full border rounded-xl px-3 py-2 mb-3" rows="3" value={form.description} onChange={e=>setForm(f=>({ ...f, description: e.target.value }))}/>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm text-royal mb-1">Category</label>
                <input className="w-full border rounded-xl px-3 py-2" value={form.category} onChange={e=>setForm(f=>({ ...f, category: e.target.value }))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Assign To *</label>
                <select className="w-full border rounded-xl px-3 py-2" value={form.assignedTo} onChange={e=>setForm(f=>({ ...f, assignedTo: e.target.value }))} required>
                  <option value="" disabled>Select user</option>
                  {nonSuperAdmins.map(u => (
                    <option key={u._id} value={u._id}>{u.name} — {u.role}</option>
                  ))}
                </select>
              </div>
            </div>

            <div className="mt-3">
              <label className="block text-sm text-royal mb-1">Deadline *</label>
              <input type="datetime-local" className="w-full border rounded-xl px-3 py-2" value={form.deadline} onChange={e=>setForm(f=>({ ...f, deadline: e.target.value }))} required/>
            </div>

            <div className="mt-4 flex items-center justify-end gap-2">
              <button type="button" onClick={()=>setOpen(false)} className="px-4 py-2 rounded-xl border">Cancel</button>
              <button className="px-4 py-2 rounded-xl bg-gold text-navy font-semibold hover:bg-lightgold">Assign</button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
}
➕ web/src/pages/MyTasks.jsx (নতুন)
import React, { useEffect, useMemo, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

const DEADLINE_THRESHOLD_DAYS = Number(import.meta.env.VITE_DEADLINE_THRESHOLD_DAYS || 3);

const toLocal = (d) => new Date(d).toLocaleString();
const fmtDateInput = (d) => new Date(d).toISOString().slice(0, 16);
const todayPlusDays = (n=3) => {
  const d = new Date();
  d.setDate(d.getDate()+n);
  return fmtDateInput(d);
};

const rowClassByDeadline = (deadline, status, completedAt) => {
  if (status === 'Completed') {
    if (completedAt && new Date(completedAt) <= new Date(deadline)) return 'bg-green-50';
    return 'bg-red-50';
  }
  const now = new Date();
  const dl = new Date(deadline);
  const diffDays = Math.floor((dl - now) / (1000*60*60*24));
  if (diffDays <= 0) return 'bg-red-50';            // overdue
  if (diffDays <= DEADLINE_THRESHOLD_DAYS) return 'bg-yellow-50'; // near
  return ''; // default white/gray via table
};

export default function MyTasks() {
  const { user } = useAuth();
  const [tasks, setTasks] = useState([]);
  const [status, setStatus] = useState('InProgress');
  const [open, setOpen] = useState(false);
  const [err, setErr] = useState(null);
  const [ok, setOk] = useState(null);
  const [form, setForm] = useState({ title:'', description:'', category:'', deadline: todayPlusDays(3) });

  const hasMyTask = user && user.role !== 'SuperAdmin'; // SA has no My Task per product rules

  const load = async () => {
    try {
      const { tasks } = await api.listMyTasks(status);
      setTasks(tasks);
    } catch (e) { /* ignore */ }
  };

  useEffect(() => { if (hasMyTask) load(); }, [status, hasMyTask]);

  const toggleStatus = async (t) => {
    try {
      const next = t.status === 'InProgress' ? 'Completed' : 'InProgress';
      await api.updateTaskStatus(t._id, next);
      setOk('Status updated');
      load();
    } catch (e) { setErr(e?.message || 'Failed to update'); }
  };

  const submit = async (e) => {
    e.preventDefault();
    setErr(null); setOk(null);
    try {
      await api.addSelfTask({ ...form });
      setOpen(false);
      setForm({ title:'', description:'', category:'', deadline: todayPlusDays(3) });
      setOk('Task added');
      load();
    } catch (e) { setErr(e?.message || 'Failed to add'); }
  };

  if (!hasMyTask) {
    return <div className="text-royal">Super Admin has no My Task.</div>;
  }

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">My Task</h1>
        <div className="flex items-center gap-3">
          <select value={status} onChange={e=>setStatus(e.target.value)} className="border rounded-xl px-3 py-2">
            <option value="InProgress">In Progress</option>
            <option value="Completed">Completed</option>
          </select>
          <button onClick={()=>setOpen(true)} className="bg-gold text-navy rounded-xl px-4 py-2 font-semibold hover:bg-lightgold">+ Add My Task</button>
        </div>
      </div>

      {ok && <div className="mb-2 text-green-700">{ok}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="text-left p-3">Task</th>
              <th className="text-left p-3">Status</th>
              <th className="text-left p-3">Deadline</th>
              <th className="text-left p-3">Completed</th>
              <th className="text-left p-3">Action</th>
            </tr>
          </thead>
          <tbody>
            {tasks.map(t => (
              <tr key={t._id} className={`border-t ${rowClassByDeadline(t.deadline, t.status, t.completedAt)}`}>
                <td className="p-3">
                  <div className="font-semibold text-navy">{t.title}</div>
                  {t.description && <div className="text-royal/80">{t.description}</div>}
                  {t.category && <div className="text-xs text-royal/70 mt-1">Category: {t.category}</div>}
                </td>
                <td className="p-3">{t.status === 'InProgress' ? 'In Progress' : 'Completed'}</td>
                <td className="p-3">{toLocal(t.deadline)}</td>
                <td className="p-3">{t.completedAt ? toLocal(t.completedAt) : '-'}</td>
                <td className="p-3">
                  <button onClick={()=>toggleStatus(t)} className="px-3 py-1 rounded-lg border hover:bg-[#f3f6ff]">
                    {t.status === 'InProgress' ? 'Mark Completed' : 'Mark In-Progress'}
                  </button>
                </td>
              </tr>
            ))}
            {tasks.length === 0 && (
              <tr><td className="p-4 text-royal/70" colSpan="5">No tasks</td></tr>
            )}
          </tbody>
        </table>
      </div>

      {open && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center p-4">
          <form onSubmit={submit} className="bg-white rounded-2xl shadow-soft p-4 w-full max-w-xl">
            <h2 className="text-xl font-bold text-navy mb-3">Add My Task</h2>
            <label className="block text-sm text-royal mb-1">Title *</label>
            <input className="w-full border rounded-xl px-3 py-2 mb-3" value={form.title} onChange={e=>setForm(f=>({ ...f, title: e.target.value }))} required/>

            <label className="block text-sm text-royal mb-1">Description</label>
            <textarea className="w-full border rounded-xl px-3 py-2 mb-3" rows="3" value={form.description} onChange={e=>setForm(f=>({ ...f, description: e.target.value }))}/>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm text-royal mb-1">Category</label>
                <input className="w-full border rounded-xl px-3 py-2" value={form.category} onChange={e=>setForm(f=>({ ...f, category: e.target.value }))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Deadline *</label>
                <input type="datetime-local" className="w-full border rounded-xl px-3 py-2" value={form.deadline} onChange={e=>setForm(f=>({ ...f, deadline: e.target.value }))} required/>
              </div>
            </div>

            <div className="mt-4 flex items-center justify-end gap-2">
              <button type="button" onClick={()=>setOpen(false)} className="px-4 py-2 rounded-xl border">Cancel</button>
              <button className="px-4 py-2 rounded-xl bg-gold text-navy font-semibold hover:bg-lightgold">Add</button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
}
✏️ web/src/App.jsx (আপডেট — নতুন রাউট যুক্ত)
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import ProtectedRoute from './components/ProtectedRoute.jsx';
import RoleRoute from './components/RoleRoute.jsx';
import Topbar from './components/Topbar.jsx';
import Sidebar from './components/Sidebar.jsx';
import Dashboard from './pages/Dashboard.jsx';
import Profile from './pages/Profile.jsx';
import AssignTasks from './pages/AssignTasks.jsx';
import MyTasks from './pages/MyTasks.jsx';

export default function App() {
  return (
    <Routes>
      <Route element={<ProtectedRoute />}>
        <Route
          path="/"
          element={
            <Layout>
              <Dashboard />
            </Layout>
          }
        />
        <Route
          path="/profile"
          element={
            <Layout>
              <Profile />
            </Layout>
          }
        />

        {/* Assign Task: only SuperAdmin & Admin */}
        <Route element={<Layout><RoleRoute roles={['SuperAdmin','Admin']} /></Layout>}>
          <Route path="/assign-tasks" element={<AssignTasks />} />
        </Route>

        {/* My Task: all roles except SuperAdmin (handled inside page too) */}
        <Route
          path="/my-tasks"
          element={
            <Layout>
              <MyTasks />
            </Layout>
          }
        />
      </Route>
      <Route path="*" element={<Navigate to="/" />} />
    </Routes>
  );
}

function Layout({ children }) {
  return (
    <div className="min-h-screen flex bg-[#f7f9fc]">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="p-4 md:p-6">{children}</main>
      </div>
    </div>
  );
}
▶️ রান/টেস্ট করার স্টেপস
API রিস্টার্ট করো (নতুন route/model যুক্ত হয়েছে):
cd primeops/api
npm run dev
WEB রিস্টার্ট দরকার নেই, কিন্তু নিরাপদে করো:
cd ../web
npm run dev
লগইন করো:
Super Admin (e.g., ikhtiar@primeacademy.org) → Sidebar-এ Assign Task দেখবে, My Task থাকবে না।
Admin (e.g., shahidul@primecademy.org) → Assign Task + My Task দুটোই থাকবে।
অন্য রোলগুলো → My Task থাকবে, Assign Task থাকবে না।
ভেরিফাই:
Super Admin/Admin → Assign Task পেজে গিয়ে Super Admin-কে assign করা যায় না—API & UI দুই লেভেলে ব্লক।
My Task পেজে status টগল করলে Completed হলে Pending লিস্ট থেকে সরে যাবে; Completed লিস্টে গেলে রঙ green (deadline-এর আগে হলে) বা red (পরে হলে) হবে। In Progress-এ ফিরালে Completed কলাম ক্লিয়ার।
সব ঠিক থাকলে বলো—Phase 2 শুরু করব (Super Admin = pure monitoring + Admin ops: Employee/Course CRUD + view-only reports)।
You said:
need little change Task Assigned By. this is need to show in table 
ChatGPT said:
চমৎকার ধরেছো Polok ✅
তুমি “Task Assigned By” কলামটা Assign Task table-এ দেখতে চাও — একদম দরকারি ফিচার, যাতে কে কারে টাস্ক দিল সেটা সবাই স্পষ্ট বুঝতে পারে।
এটার জন্য শুধু একটা ছোট আপডেট দরকার 👉 AssignTasks.jsx-এর table অংশে নতুন কলাম “Assigned By” যোগ করতে হবে। নিচে সংশোধিত টেবিল অংশটা দিচ্ছি👇

🔧 Updated Table Section (inside AssignTasks.jsx)
এই অংশটা রিপ্লেস করো (পুরো table-body অংশ):
<div className="bg-white rounded-2xl shadow-soft overflow-auto">
  <table className="min-w-full text-sm">
    <thead className="bg-[#f3f6ff] text-royal">
      <tr>
        <th className="text-left p-3">Task</th>
        <th className="text-left p-3">Assignee</th>
        <th className="text-left p-3">Assigned By</th> {/* ✅ new column */}
        <th className="text-left p-3">Status</th>
        <th className="text-left p-3">Deadline</th>
      </tr>
    </thead>
    <tbody>
      {tasks.map(t => (
        <tr key={t._id} className="border-t">
          <td className="p-3">
            <div className="font-semibold text-navy">{t.title}</div>
            {t.description && <div className="text-royal/80">{t.description}</div>}
            {t.category && <div className="text-xs text-royal/70 mt-1">Category: {t.category}</div>}
          </td>
          <td className="p-3">{t.assignedTo?.name} <span className="text-xs text-royal/70">({t.assignedTo?.role})</span></td>
          <td className="p-3">{t.assignedBy?.name} <span className="text-xs text-royal/70">({t.assignedBy?.role})</span></td> {/* ✅ show assigned by */}
          <td className="p-3">{t.status === 'InProgress' ? 'In Progress' : 'Completed'}</td>
          <td className="p-3">{new Date(t.deadline).toLocaleString()}</td>
        </tr>
      ))}
      {tasks.length === 0 && (
        <tr><td className="p-4 text-royal/70" colSpan="5">No tasks</td></tr>
      )}
    </tbody>
  </table>
</div>
💡 ফলাফল:
এখন টেবিলে “Assigned By” কলাম আসবে
প্রত্যেক টাস্কে কে অ্যাসাইন করেছে (নাম + রোল সহ) সেটি দেখাবে
বাকি লজিক (রঙ, ফিল্টার, popup form) একদম একই থাকবে
যদি চাও আমি পরের ধাপে (Phase 2) এগোবার আগে Assign Task + My Task এই দুটো পেজে একটা mini-summary card যোগ করে দিই (যেমন Total Task Assigned, Completed, Pending) — তাহলে ওটা পরের আপডেটে যুক্ত করব। বলো, যুক্ত করব?
You said:
worked, but need same thing in my task page 
ChatGPT said:

Thought for 4 seconds
চমৎকার! ✅
My Task পেজেও “Assigned By” দেখাতে নিচের টেবিল সেকশনটা রিপ্লেস করলেই হবে (API-তে ইতিমধ্যেই assignedBy populate করি, তাই ব্যাকএন্ডে কোনো পরিবর্তন লাগবে না)।
🔧 MyTasks.jsx — Updated Table Section
<div className="bg-white rounded-2xl shadow-soft overflow-auto">
  <table className="min-w-full text-sm">
    <thead className="bg-[#f3f6ff] text-royal">
      <tr>
        <th className="text-left p-3">Task</th>
        <th className="text-left p-3">Assigned By</th> {/* ✅ new column */}
        <th className="text-left p-3">Status</th>
        <th className="text-left p-3">Deadline</th>
        <th className="text-left p-3">Completed</th>
        <th className="text-left p-3">Action</th>
      </tr>
    </thead>
    <tbody>
      {tasks.map(t => (
        <tr key={t._id} className={`border-t ${rowClassByDeadline(t.deadline, t.status, t.completedAt)}`}>
          <td className="p-3">
            <div className="font-semibold text-navy">{t.title}</div>
            {t.description && <div className="text-royal/80">{t.description}</div>}
            {t.category && <div className="text-xs text-royal/70 mt-1">Category: {t.category}</div>}
          </td>
          <td className="p-3">
            {t.assignedBy?.name}
            <span className="text-xs text-royal/70"> ({t.assignedBy?.role})</span>
          </td>
          <td className="p-3">{t.status === 'InProgress' ? 'In Progress' : 'Completed'}</td>
          <td className="p-3">{toLocal(t.deadline)}</td>
          <td className="p-3">{t.completedAt ? toLocal(t.completedAt) : '-'}</td>
          <td className="p-3">
            <button onClick={()=>toggleStatus(t)} className="px-3 py-1 rounded-lg border hover:bg-[#f3f6ff]">
              {t.status === 'InProgress' ? 'Mark Completed' : 'Mark In-Progress'}
            </button>
          </td>
        </tr>
      ))}
      {tasks.length === 0 && (
        <tr><td className="p-4 text-royal/70" colSpan="6">No tasks</td></tr> {/* colSpan updated */}
      )}
    </tbody>
  </table>
</div>
নোট:
কোনো API পরিবর্তন দরকার নেই—GET /api/tasks/my ইতিমধ্যে assignedBy populate করে।
শুধু ফ্রন্টএন্ড রিফ্রেশ/হট-রিলোড হলেই দেখাবে।
আর কিছু টিউন করতে চাইলে বলো!
You said:
done
ChatGPT said:
দারুন Polok! 🔥
মানে এখন তোমার Task Module (Phase 1) পুরোপুরি কাজ করছে —
✅ Assign Task (with “Assigned By” column)
✅ My Task (with “Assigned By” column)
✅ Deadline color logic
✅ Status toggle
✅ Self Task creation
✅ Role-based permissions (Super Admin ≠ assign to Super Admin / no self task)
সবকিছু এখন একদম স্থিতিশীল।

এখন চাইলে আমরা Phase 2 শুরু করতে পারি—
👉 Super Admin & Admin-এর জন্য Reporting & Employee / Course Management অংশ।
এখানে আসবে:

Employee List CRUD
Course List CRUD
View-only Reports (Accounting, Admission, Recruitment, Digital Marketing, Motion Graphics)
Dashboard cards and graphs linking to these data
বলো — Phase 2 শুরু করব?
You said:
Phase 2
ChatGPT said:

Thought for 18s
চমৎকার—Phase 2 দিচ্ছি এখনই।
এতে আছে:
Employee List: Admin = Full CRUD, Super Admin = View-only
Courses: Admin = Full CRUD (Add/Edit/Inactive/Delete), অন্যরা পরে view-only (Phase 3+ এ)
Reports (View-only stubs): Super Admin/Admin – ভবিষ্যৎ ডাটা প্লাগের জন্য রাউট/পেজ প্রস্তুত
Leads Center (View-only stub): Super Admin/Admin – ফিল্টার UI প্রস্তুত (ডাটা Phase 3 থেকে আসবে)
নিচের ফাইলগুলো যোগ/আপডেট করো।
🔧 Back-end (api)
✏️ api/models/User.js (phone ফিল্ড যোগ)
import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true, lowercase: true, trim: true },
    password: { type: String, required: true, select: false },
    role: {
      type: String,
      required: true,
      enum: [
        'SuperAdmin',
        'Admin',
        'Accountant',
        'Admission',
        'Recruitment',
        'DigitalMarketing',
        'MotionGraphics'
      ]
    },
    department: { type: String },
    designation: { type: String },
    phone: { type: String, default: '' }, // <-- NEW
    avatar: {
      type: String,
      default: 'https://ui-avatars.com/api/?name=Prime+Academy&background=253985&color=fff'
    },
    isActive: { type: Boolean, default: true },
    joinDate: { type: Date, default: Date.now }
  },
  { timestamps: true }
);

export default mongoose.model('User', UserSchema);
✏️ api/routes/users.js (CRUD সম্পূর্ণ + Admin guard + SuperAdmin safety)
import express from 'express';
import User from '../models/User.js';
import { requireAuth } from '../middleware/auth.js';
import { authorize } from '../middleware/authorize.js';
import { hashPassword } from '../utils/hash.js';

const router = express.Router();

// List employees (Admin + SuperAdmin can view)
router.get('/', requireAuth, authorize(['Admin', 'SuperAdmin']), async (req, res) => {
  const users = await User.find().select('-password');
  return res.json({ users });
});

// Create employee (Admin only) — cannot create SuperAdmin
router.post('/', requireAuth, authorize(['Admin']), async (req, res) => {
  const { name, email, password, role, department, designation, avatar, phone } = req.body || {};
  if (role === 'SuperAdmin') {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot create Super Admin' });
  }
  const exists = await User.findOne({ email });
  if (exists) return res.status(409).json({ code: 'EMAIL_EXISTS', message: 'Email already in use' });

  const hashed = await hashPassword(password || 'password123');
  const user = await User.create({
    name, email, password: hashed, role, department, designation, avatar, phone
  });
  const { password: _, ...safe } = user.toObject();
  return res.status(201).json({ user: safe });
});

// Update employee (Admin only) — cannot modify or demote SuperAdmin
router.put('/:id', requireAuth, authorize(['Admin']), async (req, res) => {
  const target = await User.findById(req.params.id).select('+password');
  if (!target) return res.status(404).json({ code: 'NOT_FOUND', message: 'User not found' });
  if (target.role === 'SuperAdmin') {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot modify Super Admin' });
  }

  const { name, email, role, department, designation, avatar, phone, isActive, newPassword } = req.body || {};
  if (email) target.email = email;
  if (name) target.name = name;
  if (role) {
    if (role === 'SuperAdmin') {
      return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot set role Super Admin' });
    }
    target.role = role;
  }
  if (department !== undefined) target.department = department;
  if (designation !== undefined) target.designation = designation;
  if (avatar !== undefined) target.avatar = avatar;
  if (phone !== undefined) target.phone = phone;
  if (typeof isActive === 'boolean') target.isActive = isActive;
  if (newPassword) target.password = await hashPassword(newPassword);

  await target.save();
  const { password: _, ...safe } = target.toObject();
  return res.json({ user: safe });
});

// Delete employee (Admin only) — cannot delete SuperAdmin
router.delete('/:id', requireAuth, authorize(['Admin']), async (req, res) => {
  const target = await User.findById(req.params.id);
  if (!target) return res.status(404).json({ code: 'NOT_FOUND', message: 'User not found' });
  if (target.role === 'SuperAdmin') {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot delete Super Admin' });
  }
  await target.deleteOne();
  return res.json({ ok: true });
});

export default router;
➕ api/models/Course.js (নতুন)
import mongoose from 'mongoose';

const CourseSchema = new mongoose.Schema(
  {
    courseId: { type: String, required: true, unique: true, index: true },
    name: { type: String, required: true, trim: true },
    category: { type: String, default: '' },
    duration: { type: String, default: '' }, // e.g., "4 Months"
    regularFee: { type: Number, default: 0 },
    discountFee: { type: Number, default: 0 },
    teacher: { type: String, default: '' },
    details: { type: String, default: '' },
    status: { type: String, enum: ['Active', 'Inactive'], default: 'Active' }
  },
  { timestamps: true }
);

export default mongoose.model('Course', CourseSchema);
➕ api/routes/courses.js (নতুন – Admin CRUD, others later view)
import express from 'express';
import Course from '../models/Course.js';
import { requireAuth } from '../middleware/auth.js';
import { authorize } from '../middleware/authorize.js';

const router = express.Router();

const genCourseId = async () => {
  const count = await Course.countDocuments({});
  const n = (count + 1).toString().padStart(4, '0');
  return `CRS-${n}`;
};

// List (Admin + SuperAdmin view now; others will use later)
router.get('/', requireAuth, authorize(['Admin', 'SuperAdmin']), async (req, res) => {
  const courses = await Course.find().sort({ createdAt: -1 });
  return res.json({ courses });
});

// Create (Admin only)
router.post('/', requireAuth, authorize(['Admin']), async (req, res) => {
  const { name, category, duration, regularFee, discountFee, teacher, details } = req.body || {};
  if (!name) return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'Course name required' });

  const course = await Course.create({
    courseId: await genCourseId(),
    name, category, duration,
    regularFee: Number(regularFee || 0),
    discountFee: Number(discountFee || 0),
    teacher: teacher || '',
    details: details || '',
    status: 'Active'
  });
  return res.status(201).json({ course });
});

// Update (Admin only)
router.put('/:id', requireAuth, authorize(['Admin']), async (req, res) => {
  const c = await Course.findById(req.params.id);
  if (!c) return res.status(404).json({ code: 'NOT_FOUND', message: 'Course not found' });

  const { name, category, duration, regularFee, discountFee, teacher, details, status } = req.body || {};
  if (name !== undefined) c.name = name;
  if (category !== undefined) c.category = category;
  if (duration !== undefined) c.duration = duration;
  if (regularFee !== undefined) c.regularFee = Number(regularFee);
  if (discountFee !== undefined) c.discountFee = Number(discountFee);
  if (teacher !== undefined) c.teacher = teacher;
  if (details !== undefined) c.details = details;
  if (status && ['Active', 'Inactive'].includes(status)) c.status = status;

  await c.save();
  return res.json({ course: c });
});

// Delete (Admin only)
router.delete('/:id', requireAuth, authorize(['Admin']), async (req, res) => {
  const c = await Course.findById(req.params.id);
  if (!c) return res.status(404).json({ code: 'NOT_FOUND', message: 'Course not found' });
  await c.deleteOne();
  return res.json({ ok: true });
});

export default router;
✏️ api/server.js (courses route যোগ)
// ...
import courseRoutes from './routes/courses.js';
// ...
app.use('/api/users', userRoutes);
app.use('/api/tasks', taskRoutes);
app.use('/api/courses', courseRoutes); // <-- NEW
// ...
🎨 Front-end (web)
✏️ web/src/lib/api.js (users & courses endpoints)
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

export const api = {
  // auth ...
  async login(email, password) { /* unchanged */ },
  async me() { /* unchanged */ },
  async logout() { /* unchanged */ },
  async updateMe(payload) { /* unchanged */ },

  // Users
  async listUsers() {
    const res = await fetch(`${API_BASE}/api/users`, { credentials: 'include' });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async createUser(payload) {
    const res = await fetch(`${API_BASE}/api/users`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async updateUser(id, payload) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async deleteUser(id) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },

  // Tasks (unchanged for Phase 1)
  async listAllTasks(status) { /* unchanged */ },
  async listMyTasks(status) { /* unchanged */ },
  async assignTask(payload) { /* unchanged */ },
  async addSelfTask(payload) { /* unchanged */ },
  async updateTaskStatus(id, status) { /* unchanged */ },

  // Courses
  async listCourses() {
    const res = await fetch(`${API_BASE}/api/courses`, { credentials: 'include' });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async createCourse(payload) {
    const res = await fetch(`${API_BASE}/api/courses`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async updateCourse(id, payload) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) throw await res.json();
    return res.json();
  },
  async deleteCourse(id) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    if (!res.ok) throw await res.json();
    return res.json();
  }
};
➕ web/src/pages/Employees.jsx (নতুন)
import React, { useEffect, useMemo, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function Employees() {
  const { user } = useAuth();
  const [list, setList] = useState([]);
  const [open, setOpen] = useState(false);
  const [editId, setEditId] = useState(null);
  const [form, setForm] = useState({ name:'', email:'', role:'Admission', department:'', designation:'', phone:'', avatar:'' });
  const [err, setErr] = useState(null);
  const [ok, setOk] = useState(null);

  const canEdit = user?.role === 'Admin'; // SuperAdmin view-only

  const load = async () => {
    try {
      const { users } = await api.listUsers();
      setList(users);
    } catch (e) { setErr(e?.message || 'Failed to load'); }
  };
  useEffect(() => { load(); }, []);

  const startAdd = () => {
    setEditId(null);
    setForm({ name:'', email:'', role:'Admission', department:'', designation:'', phone:'', avatar:'' });
    setOpen(true);
  };

  const startEdit = (u) => {
    setEditId(u._id);
    setForm({
      name: u.name || '',
      email: u.email || '',
      role: u.role || 'Admission',
      department: u.department || '',
      designation: u.designation || '',
      phone: u.phone || '',
      avatar: u.avatar || ''
    });
    setOpen(true);
  };

  const submit = async (e) => {
    e.preventDefault();
    setErr(null); setOk(null);
    try {
      if (editId) {
        await api.updateUser(editId, { ...form });
        setOk('Employee updated');
      } else {
        await api.createUser({ ...form, password: 'password123' });
        setOk('Employee created (default password: password123)');
      }
      setOpen(false);
      load();
    } catch (e) { setErr(e?.message || 'Failed'); }
  };

  const remove = async (id) => {
    if (!confirm('Delete this employee?')) return;
    try {
      await api.deleteUser(id);
      setOk('Employee deleted');
      load();
    } catch (e) { setErr(e?.message || 'Delete failed'); }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Employee List</h1>
        {canEdit && <button onClick={startAdd} className="bg-gold text-navy rounded-xl px-4 py-2 font-semibold hover:bg-lightgold">+ Add Employee</button>}
      </div>

      {ok && <div className="mb-2 text-green-700">{ok}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="text-left p-3">Name</th>
              <th className="text-left p-3">Role</th>
              <th className="text-left p-3">Department</th>
              <th className="text-left p-3">Designation</th>
              <th className="text-left p-3">Email</th>
              <th className="text-left p-3">Phone</th>
              {canEdit && <th className="text-left p-3">Action</th>}
            </tr>
          </thead>
          <tbody>
            {list.map(u => (
              <tr key={u._id} className="border-t">
                <td className="p-3 flex items-center gap-2">
                  <img src={u.avatar} className="w-8 h-8 rounded-full border" />
                  <div>
                    <div className="font-semibold text-navy">{u.name}</div>
                  </div>
                </td>
                <td className="p-3">{u.role}</td>
                <td className="p-3">{u.department || '-'}</td>
                <td className="p-3">{u.designation || '-'}</td>
                <td className="p-3">{u.email}</td>
                <td className="p-3">{u.phone || '-'}</td>
                {canEdit && (
                  <td className="p-3">
                    <button onClick={()=>startEdit(u)} className="px-3 py-1 rounded-lg border mr-2">Edit</button>
                    {u.role !== 'SuperAdmin' && <button onClick={()=>remove(u._id)} className="px-3 py-1 rounded-lg border hover:bg-red-50">Delete</button>}
                  </td>
                )}
              </tr>
            ))}
            {list.length === 0 && (
              <tr><td className="p-4 text-royal/70" colSpan={canEdit ? 7 : 6}>No employees</td></tr>
            )}
          </tbody>
        </table>
      </div>

      {open && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center p-4">
          <form onSubmit={submit} className="bg-white rounded-2xl shadow-soft p-4 w-full max-w-xl">
            <h2 className="text-xl font-bold text-navy mb-3">{editId ? 'Edit Employee' : 'Add Employee'}</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm text-royal mb-1">Name *</label>
                <input className="w-full border rounded-xl px-3 py-2" required value={form.name} onChange={e=>setForm(f=>({...f,name:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Email *</label>
                <input className="w-full border rounded-xl px-3 py-2" required type="email" value={form.email} onChange={e=>setForm(f=>({...f,email:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Role *</label>
                <select className="w-full border rounded-xl px-3 py-2" value={form.role} onChange={e=>setForm(f=>({...f,role:e.target.value}))}>
                  <option>Admin</option>
                  <option>Accountant</option>
                  <option>Admission</option>
                  <option>Recruitment</option>
                  <option>DigitalMarketing</option>
                  <option>MotionGraphics</option>
                </select>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Department</label>
                <input className="w-full border rounded-xl px-3 py-2" value={form.department} onChange={e=>setForm(f=>({...f,department:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Designation</label>
                <input className="w-full border rounded-xl px-3 py-2" value={form.designation} onChange={e=>setForm(f=>({...f,designation:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Phone</label>
                <input className="w-full border rounded-xl px-3 py-2" value={form.phone} onChange={e=>setForm(f=>({...f,phone:e.target.value}))}/>
              </div>
            </div>
            <div className="mt-3">
              <label className="block text-sm text-royal mb-1">Avatar URL</label>
              <input className="w-full border rounded-xl px-3 py-2" value={form.avatar} onChange={e=>setForm(f=>({...f,avatar:e.target.value}))}/>
            </div>
            <div className="mt-4 flex items-center justify-end gap-2">
              <button type="button" onClick={()=>setOpen(false)} className="px-4 py-2 rounded-xl border">Cancel</button>
              {canEdit && <button className="px-4 py-2 rounded-xl bg-gold text-navy font-semibold hover:bg-lightgold">{editId?'Save':'Create'}</button>}
            </div>
          </form>
        </div>
      )}
    </div>
  );
}
➕ web/src/pages/Courses.jsx (নতুন)
import React, { useEffect, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function Courses() {
  const { user } = useAuth();
  const [list, setList] = useState([]);
  const [open, setOpen] = useState(false);
  const [editId, setEditId] = useState(null);
  const [form, setForm] = useState({ name:'', category:'', duration:'', regularFee:0, discountFee:0, teacher:'', details:'', status:'Active' });
  const [err, setErr] = useState(null);
  const [ok, setOk] = useState(null);

  const canEdit = user?.role === 'Admin'; // SuperAdmin view-only

  const load = async () => {
    try {
      const { courses } = await api.listCourses();
      setList(courses);
    } catch (e) { setErr(e?.message || 'Failed to load'); }
  };
  useEffect(() => { load(); }, []);

  const startAdd = () => {
    setEditId(null);
    setForm({ name:'', category:'', duration:'', regularFee:0, discountFee:0, teacher:'', details:'', status:'Active' });
    setOpen(true);
  };

  const startEdit = (c) => {
    setEditId(c._id);
    setForm({
      name:c.name, category:c.category, duration:c.duration, regularFee:c.regularFee, discountFee:c.discountFee,
      teacher:c.teacher, details:c.details, status:c.status
    });
    setOpen(true);
  };

  const submit = async (e) => {
    e.preventDefault();
    setErr(null); setOk(null);
    try {
      if (editId) {
        await api.updateCourse(editId, { ...form });
        setOk('Course updated');
      } else {
        await api.createCourse({ ...form });
        setOk('Course created');
      }
      setOpen(false);
      load();
    } catch (e) { setErr(e?.message || 'Failed'); }
  };

  const remove = async (id) => {
    if (!confirm('Delete this course?')) return;
    try {
      await api.deleteCourse(id);
      setOk('Course deleted');
      load();
    } catch (e) { setErr(e?.message || 'Delete failed'); }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Courses</h1>
        {canEdit && <button onClick={startAdd} className="bg-gold text-navy rounded-xl px-4 py-2 font-semibold hover:bg-lightgold">+ Add Course</button>}
      </div>

      {ok && <div className="mb-2 text-green-700">{ok}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="text-left p-3">Course ID</th>
              <th className="text-left p-3">Name</th>
              <th className="text-left p-3">Category</th>
              <th className="text-left p-3">Duration</th>
              <th className="text-left p-3">Regular Fee</th>
              <th className="text-left p-3">Discount Fee</th>
              <th className="text-left p-3">Teacher</th>
              <th className="text-left p-3">Status</th>
              {canEdit && <th className="text-left p-3">Action</th>}
            </tr>
          </thead>
          <tbody>
            {list.map(c => (
              <tr key={c._id} className="border-t">
                <td className="p-3">{c.courseId}</td>
                <td className="p-3 font-semibold text-navy">{c.name}</td>
                <td className="p-3">{c.category || '-'}</td>
                <td className="p-3">{c.duration || '-'}</td>
                <td className="p-3">৳ {c.regularFee}</td>
                <td className="p-3">৳ {c.discountFee}</td>
                <td className="p-3">{c.teacher || '-'}</td>
                <td className="p-3">{c.status}</td>
                {canEdit && (
                  <td className="p-3">
                    <button onClick={()=>startEdit(c)} className="px-3 py-1 rounded-lg border mr-2">Edit</button>
                    <button onClick={()=>remove(c._id)} className="px-3 py-1 rounded-lg border hover:bg-red-50">Delete</button>
                  </td>
                )}
              </tr>
            ))}
            {list.length === 0 && (
              <tr><td className="p-4 text-royal/70" colSpan={canEdit ? 9 : 8}>No courses</td></tr>
            )}
          </tbody>
        </table>
      </div>

      {open && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center p-4">
          <form onSubmit={submit} className="bg-white rounded-2xl shadow-soft p-4 w-full max-w-2xl">
            <h2 className="text-xl font-bold text-navy mb-3">{editId ? 'Edit Course' : 'Add Course'}</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm text-royal mb-1">Course Name *</label>
                <input className="w-full border rounded-xl px-3 py-2" required value={form.name} onChange={e=>setForm(f=>({...f,name:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Category</label>
                <input className="w-full border rounded-xl px-3 py-2" value={form.category} onChange={e=>setForm(f=>({...f,category:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Duration</label>
                <input className="w-full border rounded-xl px-3 py-2" value={form.duration} onChange={e=>setForm(f=>({...f,duration:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Regular Fee</label>
                <input type="number" className="w-full border rounded-xl px-3 py-2" value={form.regularFee} onChange={e=>setForm(f=>({...f,regularFee:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Discount Fee</label>
                <input type="number" className="w-full border rounded-xl px-3 py-2" value={form.discountFee} onChange={e=>setForm(f=>({...f,discountFee:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Teacher</label>
                <input className="w-full border rounded-xl px-3 py-2" value={form.teacher} onChange={e=>setForm(f=>({...f,teacher:e.target.value}))}/>
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm text-royal mb-1">Details</label>
                <textarea rows="3" className="w-full border rounded-xl px-3 py-2" value={form.details} onChange={e=>setForm(f=>({...f,details:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Status</label>
                <select className="w-full border rounded-xl px-3 py-2" value={form.status} onChange={e=>setForm(f=>({...f,status:e.target.value}))}>
                  <option>Active</option>
                  <option>Inactive</option>
                </select>
              </div>
            </div>

            <div className="mt-4 flex items-center justify-end gap-2">
              <button type="button" onClick={()=>setOpen(false)} className="px-4 py-2 rounded-xl border">Cancel</button>
              {canEdit && <button className="px-4 py-2 rounded-xl bg-gold text-navy font-semibold hover:bg-lightgold">{editId ? 'Save' : 'Create'}</button>}
            </div>
          </form>
        </div>
      )}
    </div>
  );
}
➕ web/src/pages/ReportsView.jsx (নতুন – View-only stubs)
import React from 'react';

export default function ReportsView() {
  return (
    <div>
      <h1 className="text-2xl font-bold text-navy mb-3">Department Reports (View-only)</h1>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
        <Card title="Accounting Report" desc="View-only mirror. (Phase 5 will populate)"/>
        <Card title="Admission Report" desc="View-only with member filter. (Phase 4 will populate)"/>
        <Card title="Recruitment Report" desc="View-only with team filter. (Phase 6 will populate)"/>
        <Card title="Digital Marketing Report" desc="View-only; Social/SEO/Leads metrics. (Phase 3)"/>
        <Card title="Motion Graphics Report" desc="View-only; Output counters. (Phase 7)"/>
      </div>
      <p className="mt-4 text-sm text-royal/80">Note: This page will automatically display live charts once respective modules are implemented.</p>
    </div>
  );
}

function Card({ title, desc }) {
  return (
    <div className="bg-white rounded-2xl shadow-soft p-4">
      <div className="text-navy font-semibold">{title}</div>
      <div className="text-royal/80 text-sm mt-1">{desc}</div>
      <div className="mt-3 h-28 rounded-xl bg-[#f3f6ff] flex items-center justify-center text-royal/60 text-xs">Chart placeholder</div>
    </div>
  );
}
➕ web/src/pages/LeadsCenterView.jsx (নতুন – SA/Admin view-only stub)
import React, { useState } from 'react';

export default function LeadsCenterView() {
  const [status, setStatus] = useState('Assigned');
  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Leads Center (View-only)</h1>
        <select value={status} onChange={e=>setStatus(e.target.value)} className="border rounded-xl px-3 py-2">
          <option>Assigned</option>
          <option>Counseling</option>
          <option>In-Follow Up</option>
          <option>Admitted</option>
          <option>Not Admitted</option>
        </select>
      </div>
      <div className="bg-white rounded-2xl shadow-soft p-4 text-royal/80">
        Data will appear after Phase 3 (Digital Marketing + Admission pipeline).
      </div>
    </div>
  );
}
✏️ web/src/components/Sidebar.jsx (Super Admin মেনুতে Employees/Reports/Leads)
// ...
const MENU_BY_ROLE = {
  SuperAdmin: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '/assign-tasks', label: 'Assign Task', icon: <ListChecks size={18}/> },
    { to: '/employees', label: 'Employee (View)', icon: <Users size={18}/> }, // <-- NEW
    { to: '/courses', label: 'Courses (View)', icon: <BookOpen size={18}/> },  // <-- NEW
    { to: '/leads-center-view', label: 'Leads Center (View)', icon: <BookOpen size={18}/> },
    { to: '/reports-view', label: 'Reports (View)', icon: <BookOpen size={18}/> }
  ],
  Admin: [
    { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
    { to: '/assign-tasks', label: 'Assign Task', icon: <ListChecks size={18}/> },
    { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
    { to: '/employees', label: 'Employee (CRUD)', icon: <Users size={18}/> },
    { to: '/courses', label: 'Courses (CRUD)', icon: <BookOpen size={18}/> },
    { to: '/reports-view', label: 'Reports (View)', icon: <BookOpen size={18}/> }
  ],
  // others unchanged ...
};
✏️ web/src/App.jsx (নতুন রাউট যোগ)
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import ProtectedRoute from './components/ProtectedRoute.jsx';
import RoleRoute from './components/RoleRoute.jsx';
import Topbar from './components/Topbar.jsx';
import Sidebar from './components/Sidebar.jsx';
import Dashboard from './pages/Dashboard.jsx';
import Profile from './pages/Profile.jsx';
import AssignTasks from './pages/AssignTasks.jsx';
import MyTasks from './pages/MyTasks.jsx';
import Employees from './pages/Employees.jsx';
import Courses from './pages/Courses.jsx';
import ReportsView from './pages/ReportsView.jsx';
import LeadsCenterView from './pages/LeadsCenterView.jsx';

export default function App() {
  return (
    <Routes>
      <Route element={<ProtectedRoute />}>
        <Route path="/" element={<Layout><Dashboard /></Layout>} />
        <Route path="/profile" element={<Layout><Profile /></Layout>} />

        {/* Assign Task: SuperAdmin & Admin */}
        <Route element={<Layout><RoleRoute roles={['SuperAdmin','Admin']} /></Layout>}>
          <Route path="/assign-tasks" element={<AssignTasks />} />
          <Route path="/leads-center-view" element={<LeadsCenterView />} />
          <Route path="/reports-view" element={<ReportsView />} />
          <Route path="/employees" element={<Employees />} />
          <Route path="/courses" element={<Courses />} />
        </Route>

        {/* My Task: all roles except SuperAdmin (handled inside) */}
        <Route path="/my-tasks" element={<Layout><MyTasks /></Layout>} />
      </Route>
      <Route path="*" element={<Navigate to="/" />} />
    </Routes>
  );
}

function Layout({ children }) {
  return (
    <div className="min-h-screen flex bg-[#f7f9fc]">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="p-4 md:p-6">{children}</main>
      </div>
    </div>
  );
}
▶️ রান করার স্টেপস
API রিস্টার্ট (নতুন মডেল/রাউট):
cd primeops/api
npm run dev
WEB রান:
cd ../web
npm run dev
টেস্ট
Super Admin (ikhtiar@primeacademy.org) → Employees/Courses পেজে view-only (Add/Edit/Delete বোতাম নেই), Reports/Leads Center view-only স্টাব দেখা যাবে।
Admin (shahidul@primecademy.org) → Employees & Courses পেজে Add/Edit/Delete কাজ করবে।
সব ঠিক থাকলে জানাও। তারপর Phase 3 (Digital Marketing — Leads Engine) শুরু করব: Lead Entry, CSV Upload (duplicate detect), Leads Center assign, Cost/Social/SEO Reports।
You said:
write full code: web/src/App.jsx
ChatGPT said:

Thought for 15s
Here’s the full file for web/src/App.jsx — updated to Phase-2 routing with proper guarded layouts and role-gated routes:
import React from 'react';
import { Routes, Route, Navigate, Outlet } from 'react-router-dom';

import ProtectedRoute from './components/ProtectedRoute.jsx';
import RoleRoute from './components/RoleRoute.jsx';
import Topbar from './components/Topbar.jsx';
import Sidebar from './components/Sidebar.jsx';

import Dashboard from './pages/Dashboard.jsx';
import Profile from './pages/Profile.jsx';
import AssignTasks from './pages/AssignTasks.jsx';
import MyTasks from './pages/MyTasks.jsx';
import Employees from './pages/Employees.jsx';
import Courses from './pages/Courses.jsx';
import ReportsView from './pages/ReportsView.jsx';
import LeadsCenterView from './pages/LeadsCenterView.jsx';

/**
 * Shell layout used for all authenticated pages.
 */
function Layout() {
  return (
    <div className="min-h-screen flex bg-[#f7f9fc]">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="p-4 md:p-6">
          <Outlet />
        </main>
      </div>
    </div>
  );
}

export default function App() {
  return (
    <Routes>
      {/* Authenticated area */}
      <Route element={<ProtectedRoute />}>
        {/* App shell */}
        <Route element={<Layout />}>
          {/* Common routes for all authenticated users */}
          <Route path="/" element={<Dashboard />} />
          <Route path="/profile" element={<Profile />} />

          {/* Role-gated routes: SuperAdmin & Admin only */}
          <Route element={<RoleRoute roles={['SuperAdmin', 'Admin']} />}>
            <Route path="/assign-tasks" element={<AssignTasks />} />
            <Route path="/employees" element={<Employees />} />
            <Route path="/courses" element={<Courses />} />
            <Route path="/reports-view" element={<ReportsView />} />
            <Route path="/leads-center-view" element={<LeadsCenterView />} />
          </Route>

          {/* My Tasks (all roles can access; page itself hides for SuperAdmin) */}
          <Route path="/my-tasks" element={<MyTasks />} />

          {/* Fallback inside shell */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Route>
      </Route>

      {/* Unauthenticated fallback */}
      <Route path="*" element={<Navigate to="/login" replace />} />
    </Routes>
  );
}
You said:

ChatGPT said:

Thought for 1m 5s
Got it — that error means our frontend tried to destructure user from an undefined login/me response. I’ll harden the client so even if the API returns an unexpected payload, the UI won’t crash and you’ll get a clear message.
Apply these two small patches:

1) Update web/src/lib/api.js (safer error handling)
Replace the api.login and api.me functions with this more defensive version:
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

export const api = {
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });

    if (!res.ok) {
      let errBody = {};
      try { errBody = await res.json(); } catch (_) {}
      const msg = errBody?.message || errBody?.code || `Login failed (${res.status})`;
      throw new Error(msg);
    }

    // ensure JSON & shape
    let data = {};
    try { data = await res.json(); } catch (_) {}
    if (!data || typeof data !== 'object') throw new Error('Invalid login response');
    return data;
  },

  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });

    if (!res.ok) {
      // caller will handle unauthenticated state
      let errBody = {};
      try { errBody = await res.json(); } catch (_) {}
      const msg = errBody?.message || errBody?.code || `Auth check failed (${res.status})`;
      throw new Error(msg);
    }

    let data = {};
    try { data = await res.json(); } catch (_) {}
    if (!data || typeof data !== 'object') throw new Error('Invalid /me response');
    return data;
  },

  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST',
      credentials: 'include'
    });
    if (!res.ok) {
      let errBody = {};
      try { errBody = await res.json(); } catch (_) {}
      throw new Error(errBody?.message || errBody?.code || 'Logout failed');
    }
    return res.json();
  },

  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) {
      let errBody = {};
      try { errBody = await res.json(); } catch (_) {}
      throw new Error(errBody?.message || errBody?.code || 'Update failed');
    }
    return res.json();
  },

  // ... (keep the rest of the methods from your current file unchanged)
};
2) Update web/src/context/AuthContext.jsx (defensive destructuring)
Replace the login method and the initial useEffect to avoid destructuring from undefined:
import React, { createContext, useContext, useEffect, useState } from 'react';
import { api } from '../lib/api.js';

const AuthCtx = createContext(null);
export const useAuth = () => useContext(AuthCtx);

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [ready, setReady] = useState(false);

  useEffect(() => {
    api.me()
      .then((data) => {
        setUser(data?.user || null);
        setReady(true);
      })
      .catch(() => setReady(true));
  }, []);

  const login = async (email, password) => {
    const data = await api.login(email, password); // may throw; Login.jsx catches
    if (!data?.user) throw new Error('Invalid login response (no user)');
    setUser(data.user);
    return data.user;
  };

  const logout = async () => {
    await api.logout();
    setUser(null);
  };

  const updateMe = async (payload) => {
    const data = await api.updateMe(payload);
    if (!data?.user) throw new Error('Invalid update response (no user)');
    setUser(data.user);
    return data.user;
  };

  return (
    <AuthCtx.Provider value={{ user, ready, login, logout, updateMe }}>
      {children}
    </AuthCtx.Provider>
  );
}
(No changes needed to ProtectedRoute.jsx or Login.jsx)
Why this fixes it
Previously we did const { user } = await api.login(...). If the response was undefined for any reason, that destructuring threw the exact error you saw.
Now we:
Throw proper Error objects with clear messages when the server returns non-2xx.
Verify the response shape and check data?.user before using it.
Guard the /me call so a bad payload won’t crash initial load.
Quick sanity checks
Ensure API is running and reachable from the web app:
curl http://localhost:5001/health → { ok: true }
Confirm your frontend env:
web/.env contains VITE_API_BASE=http://localhost:5001
CORS & cookies:
API has cors({ origin: 'http://localhost:5173', credentials: true })
Frontend fetches use credentials: 'include' (already done)
Then reload the login page and try again with:
polok@primeacademy.org / password123
or any seeded account.
If anything still pops up, paste the Network tab > Response of /api/auth/login and I’ll pinpoint fast.
You said:
web/src/lib/api.js
web/src/context/AuthContext.jsx

give me full code of those file and remember it you should always give full code of the file
ChatGPT said:

Thought for 10s
Here are the full files you asked for—copy/paste to replace your existing ones.
web/src/lib/api.js
// web/src/lib/api.js
// Centralized API client with defensive error handling.
// Make sure your web/.env has: VITE_API_BASE=http://localhost:5001

const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

async function handleJson(res, defaultMsg) {
  if (!res.ok) {
    let errBody = {};
    try { errBody = await res.json(); } catch (_) {}
    const msg = errBody?.message || errBody?.code || `${defaultMsg} (${res.status})`;
    throw new Error(msg);
  }
  let data = {};
  try { data = await res.json(); } catch (_) {}
  return data;
}

export const api = {
  // -------- Auth --------
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    const data = await handleJson(res, 'Login failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid login response');
    return data;
  },

  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });
    const data = await handleJson(res, 'Auth check failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid /me response');
    return data;
    // caller should use data?.user
  },

  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST',
      credentials: 'include'
    });
    return handleJson(res, 'Logout failed');
  },

  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await handleJson(res, 'Update failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid update response');
    return data;
  },

  // -------- Users (Employees) --------
  async listUsers() {
    const res = await fetch(`${API_BASE}/api/users`, { credentials: 'include' });
    return handleJson(res, 'Load users failed');
  },

  async createUser(payload) {
    const res = await fetch(`${API_BASE}/api/users`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create user failed');
  },

  async updateUser(id, payload) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update user failed');
  },

  async deleteUser(id) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'DELETE',
      credentials: 'include'
    });
    return handleJson(res, 'Delete user failed');
  },

  // -------- Tasks --------
  async listAllTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks${q}`, { credentials: 'include' });
    return handleJson(res, 'Load tasks failed');
  },

  async listMyTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks/my${q}`, { credentials: 'include' });
    return handleJson(res, 'Load my tasks failed');
  },

  async assignTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/assign`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Assign task failed');
  },

  async addSelfTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/self`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Add self task failed');
  },

  async updateTaskStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/tasks/${id}/status`, {
      method: 'PATCH',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update task status failed');
  },

  // -------- Courses --------
  async listCourses() {
    const res = await fetch(`${API_BASE}/api/courses`, { credentials: 'include' });
    return handleJson(res, 'Load courses failed');
  },

  async createCourse(payload) {
    const res = await fetch(`${API_BASE}/api/courses`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create course failed');
  },

  async updateCourse(id, payload) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update course failed');
  },

  async deleteCourse(id) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'DELETE',
      credentials: 'include'
    });
    return handleJson(res, 'Delete course failed');
  }
};
web/src/context/AuthContext.jsx
// web/src/context/AuthContext.jsx
import React, { createContext, useContext, useEffect, useState } from 'react';
import { api } from '../lib/api.js';

const AuthCtx = createContext(null);
export const useAuth = () => useContext(AuthCtx);

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [ready, setReady] = useState(false);

  // On app load, try to restore session
  useEffect(() => {
    let mounted = true;
    api.me()
      .then((data) => {
        if (!mounted) return;
        setUser(data?.user || null);
        setReady(true);
      })
      .catch(() => {
        if (!mounted) return;
        setReady(true);
      });
    return () => { mounted = false; };
  }, []);

  const login = async (email, password) => {
    const data = await api.login(email, password); // throws on error
    if (!data?.user) throw new Error('Invalid login response (no user)');
    setUser(data.user);
    return data.user;
  };

  const logout = async () => {
    await api.logout();
    setUser(null);
  };

  const updateMe = async (payload) => {
    const data = await api.updateMe(payload);
    if (!data?.user) throw new Error('Invalid update response (no user)');
    setUser(data.user);
    return data.user;
  };

  return (
    <AuthCtx.Provider value={{ user, ready, login, logout, updateMe }}>
      {children}
    </AuthCtx.Provider>
  );
}
You said:
done
ChatGPT said:
দারুণ! ✅
Phase 2-এর ফাইলগুলো বসে গেছে।
দ্রুত টেস্ট চেকলিস্ট

Employees (Admin): Add → Edit → Delete; Super Admin হলে view-only.
Courses (Admin): Add/Edit/Inactive/Delete; Super Admin হলে view-only.
Assign/My Tasks: আগের মতই ঠিক আছে।
Leads Center (View) + Reports (View): পেজ ও ফিল্টার স্টাব লোড হয়।
সব ঠিক থাকলে আমি Phase 3 (Digital Marketing — Leads Engine) শুরু করছি:
Lead Entry form + CSV bulk upload (ডুপ্লিকেট phone/email skip)
Leads Center: assign to Admission + status filters
Cost Entry/Expense, Social Media Reports, SEO Reports (popup form)
বললেই Phase 3-এর পূর্ণ কোড ড্রপ করছি।
You said:
now Phase 3
ChatGPT said:

Thought for 30s
Awesome — rolling out Phase 3 (Digital Marketing — Leads Engine).
Below are the full new/updated files you can drop in. They implement:
Lead Entry (form) + CSV bulk upload (duplicate phone/email skipped)
Leads Center (DM can assign to Admission; SA/Admin are view-only via previous page)
Cost Entry / Expense (CRUD for DM)
Social Media Reports (form entries by date)
SEO Reports (Date, Type of Work, Challenge, Details — add via popup)
Permissions enforced:
DigitalMarketing: create/upload leads, assign to Admission, manage DM expenses/social/SEO.
SuperAdmin/Admin: leads view-only (your existing LeadsCenterView.jsx).
Admission: status changes will come in Phase 4 (so DM cannot change lead status now).
🔧 Back-end (api)
1) api/models/Lead.js (NEW)
import mongoose from 'mongoose';

const LeadSchema = new mongoose.Schema(
  {
    leadId: { type: String, required: true, unique: true, index: true }, // e.g., LEAD-2025-0001
    name: { type: String, required: true, trim: true },
    phone: { type: String, required: true, trim: true, index: true },
    email: { type: String, default: '', trim: true, lowercase: true },
    interestedCourse: { type: String, default: '' },
    source: { type: String, enum: ['Meta Lead', 'LinkedIn Lead', 'Manually Generated Lead', 'Others'], default: 'Others' },
    assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // Admission user
    status: { type: String, enum: ['Assigned', 'Counseling', 'In Follow Up', 'Admitted', 'Not Admitted'], default: 'Assigned' },
    entryDate: { type: Date, default: Date.now }
  },
  { timestamps: true }
);

export default mongoose.model('Lead', LeadSchema);
2) api/models/DMCost.js (NEW)
import mongoose from 'mongoose';

const DMCostSchema = new mongoose.Schema(
  {
    date: { type: Date, required: true },
    purpose: { type: String, enum: ['Meta Ads', 'LinkedIn Ads', 'Software Purchase', 'Subscription', 'Others'], required: true },
    amount: { type: Number, required: true },
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }
  },
  { timestamps: true }
);

export default mongoose.model('DMCost', DMCostSchema);
3) api/models/SocialSnapshot.js (NEW)
import mongoose from 'mongoose';

const SocialSnapshotSchema = new mongoose.Schema(
  {
    date: { type: Date, required: true },
    facebookFollowers: { type: Number, default: 0 },
    instagramFollowers: { type: Number, default: 0 },
    facebookGroupMembers: { type: Number, default: 0 },
    youtubeSubscribers: { type: Number, default: 0 },
    linkedinFollowers: { type: Number, default: 0 },
    xFollowers: { type: Number, default: 0 },
    pinterestViews: { type: Number, default: 0 },
    bloggerImpressions: { type: Number, default: 0 },
    totalPeopleReach: { type: Number, default: 0 },
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }
  },
  { timestamps: true }
);

export default mongoose.model('SocialSnapshot', SocialSnapshotSchema);
4) api/models/SEOReport.js (NEW)
import mongoose from 'mongoose';

const SEOReportSchema = new mongoose.Schema(
  {
    date: { type: Date, required: true },
    typeOfWork: { type: String, enum: ['Blogpost', 'Backlink', 'Social Bookmarking', 'Keyword Research', 'Others'], required: true },
    challenge: { type: String, default: '' },
    details: { type: String, default: '' },
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }
  },
  { timestamps: true }
);

export default mongoose.model('SEOReport', SEOReportSchema);
5) api/routes/leads.js (NEW)
import express from 'express';
import Lead from '../models/Lead.js';
import User from '../models/User.js';
import { requireAuth } from '../middleware/auth.js';

const router = express.Router();

const genLeadId = async () => {
  const year = new Date().getFullYear();
  const count = await Lead.countDocuments({ leadId: { $regex: `^LEAD-${year}-` } });
  const n = (count + 1).toString().padStart(4, '0');
  return `LEAD-${year}-${n}`;
};

const isDM = (u) => u?.role === 'DigitalMarketing';
const isSA = (u) => u?.role === 'SuperAdmin';
const isAdmin = (u) => u?.role === 'Admin';

// Create single lead (DM only)
router.post('/', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'Only Digital Marketing can add leads' });
  const { name, phone, email, interestedCourse, source } = req.body || {};
  if (!name || !phone) return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'name and phone required' });

  // duplicate phone/email skip check
  const exists = await Lead.findOne({ $or: [{ phone }, ...(email ? [{ email }] : [])] });
  if (exists) return res.status(409).json({ code: 'DUPLICATE', message: 'Lead with same phone or email exists' });

  const lead = await Lead.create({
    leadId: await genLeadId(),
    name, phone, email: email || '', interestedCourse: interestedCourse || '', source: source || 'Others',
    status: 'Assigned'
  });
  return res.status(201).json({ lead });
});

// Bulk CSV upload (DM only) — CSV string in body.csv
// Expected headers: Name,Phone,Email,InterestedCourse,Source
router.post('/bulk', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'Only Digital Marketing can upload leads' });
  const { csv } = req.body || {};
  if (!csv || typeof csv !== 'string') return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'csv string required' });

  const lines = csv.split(/\r?\n/).filter(Boolean);
  if (lines.length <= 1) return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'No data rows' });

  const header = lines[0].split(',').map(h => h.trim().toLowerCase());
  const idx = {
    name: header.indexOf('name'),
    phone: header.indexOf('phone'),
    email: header.indexOf('email'),
    interestedCourse: header.indexOf('interestedcourse'),
    source: header.indexOf('source')
  };
  if (idx.name < 0 || idx.phone < 0) return res.status(400).json({ code: 'HEADER_MISSING', message: 'Name and Phone headers required' });

  const toInsert = [];
  const skipped = [];
  for (let i = 1; i < lines.length; i++) {
    const cols = lines[i].split(',').map(s => s.trim());
    const name = cols[idx.name];
    const phone = cols[idx.phone];
    const email = idx.email >= 0 ? (cols[idx.email] || '') : '';
    const interestedCourse = idx.interestedCourse >= 0 ? (cols[idx.interestedCourse] || '') : '';
    const source = idx.source >= 0 ? (cols[idx.source] || 'Others') : 'Others';
    if (!name || !phone) { skipped.push({ row: i + 1, reason: 'Missing name/phone' }); continue; }

    // duplicate check
    // eslint-disable-next-line no-await-in-loop
    const exists = await Lead.findOne({ $or: [{ phone }, ...(email ? [{ email }] : [])] });
    if (exists) { skipped.push({ row: i + 1, reason: 'Duplicate by phone/email' }); continue; }

    toInsert.push({ leadId: 'PENDING', name, phone, email, interestedCourse, source, status: 'Assigned' });
  }

  // assign leadIds
  for (let k = 0; k < toInsert.length; k++) {
    // eslint-disable-next-line no-await-in-loop
    toInsert[k].leadId = await genLeadId();
  }

  const docs = await Lead.insertMany(toInsert);
  return res.json({ inserted: docs.length, skipped });
});

// List (DM can see all; SA/Admin view-only)
router.get('/', requireAuth, async (req, res) => {
  const { status } = req.query;
  const q = {};
  if (status && ['Assigned', 'Counseling', 'In Follow Up', 'Admitted', 'Not Admitted'].includes(status)) q.status = status;

  // Everyone above can view; Admission view will be implemented in Phase 4
  if (!(isDM(req.user) || isSA(req.user) || isAdmin(req.user))) {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Not allowed to view leads' });
  }

  const leads = await Lead.find(q).sort({ createdAt: -1 }).populate('assignedTo', 'name email role');
  return res.json({ leads });
});

// Assign to Admission member (DM only)
router.patch('/:id/assign', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'Only Digital Marketing can assign' });
  const { assignedTo } = req.body || {};
  if (!assignedTo) return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'assignedTo required' });

  const assignee = await User.findById(assignedTo);
  if (!assignee || assignee.role !== 'Admission') {
    return res.status(400).json({ code: 'INVALID_ASSIGNEE', message: 'Assignee must be an Admission member' });
  }

  const lead = await Lead.findById(req.params.id);
  if (!lead) return res.status(404).json({ code: 'NOT_FOUND', message: 'Lead not found' });

  lead.assignedTo = assignedTo;
  lead.status = 'Assigned'; // initial
  await lead.save();

  const populated = await Lead.findById(lead._id).populate('assignedTo', 'name email role');
  return res.json({ lead: populated });
});

export default router;
6) api/routes/dm.js (NEW — DM metrics: costs, social, SEO)
import express from 'express';
import { requireAuth } from '../middleware/auth.js';
import DMCost from '../models/DMCost.js';
import SocialSnapshot from '../models/SocialSnapshot.js';
import SEOReport from '../models/SEOReport.js';

const router = express.Router();
const isDM = (u) => u?.role === 'DigitalMarketing';

// ----- Costs -----
router.get('/costs', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'DM only' });
  const list = await DMCost.find({ createdBy: req.user.id }).sort({ date: -1 });
  return res.json({ costs: list });
});

router.post('/costs', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'DM only' });
  const { date, purpose, amount } = req.body || {};
  if (!date || !purpose || amount === undefined) {
    return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'date, purpose, amount required' });
  }
  const row = await DMCost.create({ date: new Date(date), purpose, amount: Number(amount), createdBy: req.user.id });
  return res.status(201).json({ cost: row });
});

router.delete('/costs/:id', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'DM only' });
  const row = await DMCost.findOne({ _id: req.params.id, createdBy: req.user.id });
  if (!row) return res.status(404).json({ code: 'NOT_FOUND', message: 'Cost not found' });
  await row.deleteOne();
  return res.json({ ok: true });
});

// ----- Social snapshots -----
router.get('/social', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'DM only' });
  const list = await SocialSnapshot.find({ createdBy: req.user.id }).sort({ date: -1 });
  return res.json({ social: list });
});

router.post('/social', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'DM only' });
  const payload = req.body || {};
  if (!payload.date) return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'date required' });
  payload.createdBy = req.user.id;
  payload.date = new Date(payload.date);
  const row = await SocialSnapshot.create(payload);
  return res.status(201).json({ social: row });
});

// ----- SEO reports -----
router.get('/seo', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'DM only' });
  const list = await SEOReport.find({ createdBy: req.user.id }).sort({ date: -1 });
  return res.json({ seo: list });
});

router.post('/seo', requireAuth, async (req, res) => {
  if (!isDM(req.user)) return res.status(403).json({ code: 'FORBIDDEN', message: 'DM only' });
  const { date, typeOfWork, challenge, details } = req.body || {};
  if (!date || !typeOfWork) return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'date and typeOfWork required' });
  const row = await SEOReport.create({
    date: new Date(date),
    typeOfWork,
    challenge: challenge || '',
    details: details || '',
    createdBy: req.user.id
  });
  return res.status(201).json({ seo: row });
});

export default router;
7) api/server.js (UPDATE — mount new routes)
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import { connectDB } from './config/db.js';
import authRoutes from './routes/auth.js';
import userRoutes from './routes/users.js';
import taskRoutes from './routes/tasks.js';
import courseRoutes from './routes/courses.js';
import leadRoutes from './routes/leads.js';   // <-- NEW
import dmRoutes from './routes/dm.js';        // <-- NEW

dotenv.config();

const app = express();
app.use(helmet());
app.use(morgan('dev'));
app.use(express.json({ limit: '4mb' }));
app.use(cookieParser());
app.use(cors({
  origin: process.env.CLIENT_ORIGIN || 'http://localhost:5173',
  credentials: true
}));

app.get('/health', (req, res) => res.json({ ok: true, service: 'primeops-api' }));

app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/tasks', taskRoutes);
app.use('/api/courses', courseRoutes);
app.use('/api/leads', leadRoutes);   // <-- NEW
app.use('/api/dm', dmRoutes);        // <-- NEW

app.use((err, req, res, next) => {
  console.error('Unhandled:', err);
  res.status(500).json({ code: 'SERVER_ERROR', message: 'Unexpected error' });
});

const PORT = process.env.PORT || 5001;
connectDB(process.env.MONGO_URI).then(() => {
  app.listen(PORT, () => console.log(`🚀 API running on http://localhost:${PORT}`));
});
🎨 Front-end (web)
1) web/src/lib/api.js (UPDATE — add leads & DM metric endpoints)
Full file provided earlier; here’s the extra methods to append into that same file:
// -------- Leads (DM & SA/Admin view) --------
export const api = {
  // ...keep existing methods...

  async createLead(payload) {
    const res = await fetch(`${API_BASE}/api/leads`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create lead failed');
  },

  async bulkUploadLeads(csvText) {
    const res = await fetch(`${API_BASE}/api/leads/bulk`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ csv: csvText })
    });
    return handleJson(res, 'Bulk upload failed');
  },

  async listLeads(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/leads${q}`, { credentials: 'include' });
    return handleJson(res, 'Load leads failed');
  },

  async assignLead(id, assignedTo) {
    const res = await fetch(`${API_BASE}/api/leads/${id}/assign`, {
      method: 'PATCH',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ assignedTo })
    });
    return handleJson(res, 'Assign lead failed');
  },

  // -------- Digital Marketing Metrics --------
  async listDMCosts() {
    const res = await fetch(`${API_BASE}/api/dm/costs`, { credentials: 'include' });
    return handleJson(res, 'Load DM costs failed');
  },
  async createDMCost(payload) {
    const res = await fetch(`${API_BASE}/api/dm/costs`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create DM cost failed');
  },
  async deleteDMCost(id) {
    const res = await fetch(`${API_BASE}/api/dm/costs/${id}`, { method: 'DELETE', credentials: 'include' });
    return handleJson(res, 'Delete DM cost failed');
  },

  async listSocial() {
    const res = await fetch(`${API_BASE}/api/dm/social`, { credentials: 'include' });
    return handleJson(res, 'Load social reports failed');
  },
  async createSocial(payload) {
    const res = await fetch(`${API_BASE}/api/dm/social`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create social report failed');
  },

  async listSEO() {
    const res = await fetch(`${API_BASE}/api/dm/seo`, { credentials: 'include' });
    return handleJson(res, 'Load SEO reports failed');
  },
  async createSEO(payload) {
    const res = await fetch(`${API_BASE}/api/dm/seo`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create SEO report failed');
  }
};
(Ensure you merge these into your existing full api.js file.)
2) web/src/pages/LeadEntry.jsx (NEW)
import React, { useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function LeadEntry() {
  const { user } = useAuth();
  if (user?.role !== 'DigitalMarketing') {
    return <div className="text-royal">Only Digital Marketing can access Lead Entry.</div>;
  }

  const [form, setForm] = useState({ name:'', phone:'', email:'', interestedCourse:'', source:'Meta Lead' });
  const [csvFile, setCsvFile] = useState(null);
  const [msg, setMsg] = useState(null);
  const [err, setErr] = useState(null);

  const submit = async (e) => {
    e.preventDefault(); setMsg(null); setErr(null);
    try {
      await api.createLead(form);
      setMsg('Lead created'); setForm({ name:'', phone:'', email:'', interestedCourse:'', source:'Meta Lead' });
    } catch (e) { setErr(e.message); }
  };

  const uploadCsv = async () => {
    setMsg(null); setErr(null);
    if (!csvFile) { setErr('Choose a CSV file'); return; }
    const text = await csvFile.text();
    try {
      const res = await api.bulkUploadLeads(text);
      setMsg(`Uploaded: ${res.inserted}, Skipped: ${res.skipped?.length || 0}`);
      setCsvFile(null);
    } catch (e) { setErr(e.message); }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {/* Single Lead */}
      <div className="bg-white rounded-2xl shadow-soft p-4">
        <h1 className="text-2xl font-bold text-navy mb-3">Lead Entry</h1>
        {msg && <div className="mb-2 text-green-700">{msg}</div>}
        {err && <div className="mb-2 text-red-600">{err}</div>}
        <form onSubmit={submit} className="grid grid-cols-1 gap-3">
          <div>
            <label className="block text-sm text-royal mb-1">Name *</label>
            <input className="w-full border rounded-xl px-3 py-2" required value={form.name} onChange={e=>setForm(f=>({...f,name:e.target.value}))}/>
          </div>
          <div>
            <label className="block text-sm text-royal mb-1">Phone *</label>
            <input className="w-full border rounded-xl px-3 py-2" required value={form.phone} onChange={e=>setForm(f=>({...f,phone:e.target.value}))}/>
          </div>
          <div>
            <label className="block text-sm text-royal mb-1">Email</label>
            <input type="email" className="w-full border rounded-xl px-3 py-2" value={form.email} onChange={e=>setForm(f=>({...f,email:e.target.value}))}/>
          </div>
          <div>
            <label className="block text-sm text-royal mb-1">Interested Course</label>
            <input className="w-full border rounded-xl px-3 py-2" value={form.interestedCourse} onChange={e=>setForm(f=>({...f,interestedCourse:e.target.value}))}/>
          </div>
          <div>
            <label className="block text-sm text-royal mb-1">Source</label>
            <select className="w-full border rounded-xl px-3 py-2" value={form.source} onChange={e=>setForm(f=>({...f,source:e.target.value}))}>
              <option>Meta Lead</option>
              <option>LinkedIn Lead</option>
              <option>Manually Generated Lead</option>
              <option>Others</option>
            </select>
          </div>
          <div className="mt-2">
            <button className="bg-gold text-navy rounded-xl px-4 py-2 font-semibold hover:bg-lightgold">Save Lead</button>
          </div>
        </form>
      </div>

      {/* Bulk CSV */}
      <div className="bg-white rounded-2xl shadow-soft p-4">
        <h2 className="text-xl font-bold text-navy mb-2">Bulk Upload (CSV)</h2>
        <p className="text-sm text-royal/80 mb-2">Headers: <b>Name, Phone, Email, InterestedCourse, Source</b></p>
        <input type="file" accept=".csv" onChange={e=>setCsvFile(e.target.files?.[0] || null)} />
        <div className="mt-3">
          <button onClick={uploadCsv} className="bg-gold text-navy rounded-xl px-4 py-2 font-semibold hover:bg-lightgold">Upload CSV</button>
        </div>
      </div>
    </div>
  );
}
3) web/src/pages/LeadsCenter.jsx (NEW — DM assign to Admission)
import React, { useEffect, useMemo, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function LeadsCenter() {
  const { user } = useAuth();
  const [status, setStatus] = useState('Assigned');
  const [leads, setLeads] = useState([]);
  const [users, setUsers] = useState([]);
  const [msg, setMsg] = useState(null);
  const [err, setErr] = useState(null);

  const canAssign = user?.role === 'DigitalMarketing';

  const load = async () => {
    try {
      const [{ leads }, { users }] = await Promise.all([
        api.listLeads(status),
        api.listUsers()
      ]);
      setLeads(leads || []);
      setUsers(users || []);
    } catch (e) {
      setErr(e.message);
    }
  };

  useEffect(() => { load(); }, [status]);

  const admissionUsers = useMemo(() => users.filter(u => u.role === 'Admission'), [users]);

  const assign = async (id, assignedTo) => {
    setMsg(null); setErr(null);
    try {
      await api.assignLead(id, assignedTo);
      setMsg('Lead assigned');
      load();
    } catch (e) { setErr(e.message); }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Leads Center</h1>
        <select value={status} onChange={e=>setStatus(e.target.value)} className="border rounded-xl px-3 py-2">
          <option>Assigned</option>
          <option>Counseling</option>
          <option>In Follow Up</option>
          <option>Admitted</option>
          <option>Not Admitted</option>
        </select>
      </div>

      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="text-left p-3">Lead ID</th>
              <th className="text-left p-3">Name</th>
              <th className="text-left p-3">Phone / Email</th>
              <th className="text-left p-3">Interested Course</th>
              <th className="text-left p-3">Source</th>
              <th className="text-left p-3">Assigned To</th>
              {canAssign && <th className="text-left p-3">Action</th>}
            </tr>
          </thead>
          <tbody>
            {leads.map(l => (
              <tr key={l._id} className="border-t">
                <td className="p-3">{l.leadId}</td>
                <td className="p-3">{l.name}</td>
                <td className="p-3">
                  <div>{l.phone}</div>
                  <div className="text-xs text-royal/70">{l.email || '-'}</div>
                </td>
                <td className="p-3">{l.interestedCourse || '-'}</td>
                <td className="p-3">{l.source}</td>
                <td className="p-3">{l.assignedTo ? `${l.assignedTo.name} (${l.assignedTo.role})` : '-'}</td>
                {canAssign && (
                  <td className="p-3">
                    <AssignDropdown
                      current={l.assignedTo?._id || ''}
                      options={admissionUsers}
                      onChange={(val) => assign(l._id, val)}
                    />
                  </td>
                )}
              </tr>
            ))}
            {leads.length === 0 && (
              <tr><td className="p-4 text-royal/70" colSpan={canAssign ? 7 : 6}>No leads</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function AssignDropdown({ current, options, onChange }) {
  const [val, setVal] = useState(current || '');
  useEffect(() => setVal(current || ''), [current]);
  return (
    <div className="flex items-center gap-2">
      <select className="border rounded-xl px-3 py-2" value={val} onChange={e=>setVal(e.target.value)}>
        <option value="">Select Admission Member</option>
        {options.map(o => <option key={o._id} value={o._id}>{o.name}</option>)}
      </select>
      <button disabled={!val} onClick={()=>onChange(val)} className="px-3 py-1 rounded-lg border hover:bg-[#f3f6ff]">Assign</button>
    </div>
  );
}
4) web/src/pages/DMMetrics.jsx (NEW — Costs, Social, SEO)
import React, { useEffect, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function DMMetrics() {
  const { user } = useAuth();
  if (user?.role !== 'DigitalMarketing') {
    return <div className="text-royal">Only Digital Marketing can access this page.</div>;
  }

  return (
    <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
      <Costs />
      <Social />
      <SEOReports />
    </div>
  );
}

function Costs() {
  const [list, setList] = useState([]);
  const [form, setForm] = useState({ date: new Date().toISOString().slice(0,10), purpose:'Meta Ads', amount:0 });
  const [msg, setMsg] = useState(null); const [err, setErr] = useState(null);

  const load = async () => {
    try { const { costs } = await api.listDMCosts(); setList(costs || []); } catch (e) { setErr(e.message); }
  };
  useEffect(() => { load(); }, []);

  const add = async (e) => {
    e.preventDefault(); setMsg(null); setErr(null);
    try { await api.createDMCost(form); setMsg('Cost added'); setForm({ ...form, amount: 0 }); load(); } catch (e) { setErr(e.message); }
  };
  const remove = async (id) => {
    if (!confirm('Delete?')) return;
    try { await api.deleteDMCost(id); load(); } catch (e) { setErr(e.message); }
  };

  return (
    <div className="bg-white rounded-2xl shadow-soft p-4">
      <h2 className="text-xl font-bold text-navy mb-2">Cost Entry / Expense</h2>
      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}
      <form onSubmit={add} className="grid grid-cols-1 md:grid-cols-3 gap-2 mb-3">
        <input type="date" className="border rounded-xl px-3 py-2" value={form.date} onChange={e=>setForm(f=>({...f,date:e.target.value}))}/>
        <select className="border rounded-xl px-3 py-2" value={form.purpose} onChange={e=>setForm(f=>({...f,purpose:e.target.value}))}>
          <option>Meta Ads</option><option>LinkedIn Ads</option><option>Software Purchase</option><option>Subscription</option><option>Others</option>
        </select>
        <div className="flex gap-2">
          <input type="number" className="border rounded-xl px-3 py-2 flex-1" value={form.amount} onChange={e=>setForm(f=>({...f,amount:e.target.value}))}/>
          <button className="bg-gold text-navy rounded-xl px-4">Add</button>
        </div>
      </form>
      <div className="overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr><th className="p-2 text-left">Date</th><th className="p-2 text-left">Purpose</th><th className="p-2 text-left">Amount</th><th className="p-2 text-left">Action</th></tr>
          </thead>
          <tbody>
            {list.map(r=>(
              <tr key={r._id} className="border-t">
                <td className="p-2">{new Date(r.date).toLocaleDateString()}</td>
                <td className="p-2">{r.purpose}</td>
                <td className="p-2">৳ {r.amount}</td>
                <td className="p-2"><button onClick={()=>remove(r._id)} className="px-3 py-1 rounded-lg border hover:bg-red-50">Delete</button></td>
              </tr>
            ))}
            {list.length === 0 && <tr><td className="p-3 text-royal/70" colSpan="4">No entries</td></tr>}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function Social() {
  const [list, setList] = useState([]);
  const [form, setForm] = useState({
    date: new Date().toISOString().slice(0,10),
    facebookFollowers: 0, instagramFollowers: 0, facebookGroupMembers: 0, youtubeSubscribers: 0,
    linkedinFollowers: 0, xFollowers: 0, pinterestViews: 0, bloggerImpressions: 0, totalPeopleReach: 0
  });
  const [msg, setMsg] = useState(null); const [err, setErr] = useState(null);

  const load = async () => {
    try { const { social } = await api.listSocial(); setList(social || []); } catch (e) { setErr(e.message); }
  };
  useEffect(() => { load(); }, []);

  const add = async (e) => {
    e.preventDefault(); setMsg(null); setErr(null);
    try { await api.createSocial(form); setMsg('Social snapshot saved'); load(); } catch (e) { setErr(e.message); }
  };

  return (
    <div className="bg-white rounded-2xl shadow-soft p-4">
      <h2 className="text-xl font-bold text-navy mb-2">Social Media Reports</h2>
      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}
      <form onSubmit={add} className="grid grid-cols-2 gap-2 mb-3">
        <input type="date" className="border rounded-xl px-3 py-2 col-span-2" value={form.date} onChange={e=>setForm(f=>({...f,date:e.target.value}))}/>
        {Object.keys(form).filter(k=>k!=='date').map(k=>(
          <input key={k} type="number" className="border rounded-xl px-3 py-2"
            value={form[k]} onChange={e=>setForm(f=>({...f,[k]:Number(e.target.value)}))}
            placeholder={k}/>
        ))}
        <div className="col-span-2">
          <button className="bg-gold text-navy rounded-xl px-4 py-2">Update</button>
        </div>
      </form>

      <div className="overflow-auto">
        <table className="min-w-full text-xs">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="p-2 text-left">Date</th>
              <th className="p-2 text-left">Facebook</th>
              <th className="p-2 text-left">Instagram</th>
              <th className="p-2 text-left">Group</th>
              <th className="p-2 text-left">YouTube</th>
              <th className="p-2 text-left">LinkedIn</th>
              <th className="p-2 text-left">X</th>
              <th className="p-2 text-left">Pinterest</th>
              <th className="p-2 text-left">Blogger</th>
              <th className="p-2 text-left">Reach</th>
            </tr>
          </thead>
          <tbody>
            {list.map(r=>(
              <tr key={r._id} className="border-t">
                <td className="p-2">{new Date(r.date).toLocaleDateString()}</td>
                <td className="p-2">{r.facebookFollowers}</td>
                <td className="p-2">{r.instagramFollowers}</td>
                <td className="p-2">{r.facebookGroupMembers}</td>
                <td className="p-2">{r.youtubeSubscribers}</td>
                <td className="p-2">{r.linkedinFollowers}</td>
                <td className="p-2">{r.xFollowers}</td>
                <td className="p-2">{r.pinterestViews}</td>
                <td className="p-2">{r.bloggerImpressions}</td>
                <td className="p-2">{r.totalPeopleReach}</td>
              </tr>
            ))}
            {list.length === 0 && <tr><td className="p-3 text-royal/70" colSpan="10">No snapshots</td></tr>}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function SEOReports() {
  const [list, setList] = useState([]);
  const [open, setOpen] = useState(false);
  const [form, setForm] = useState({ date: new Date().toISOString().slice(0,10), typeOfWork:'Blogpost', challenge:'', details:'' });
  const [msg, setMsg] = useState(null); const [err, setErr] = useState(null);

  const load = async () => {
    try { const { seo } = await api.listSEO(); setList(seo || []); } catch (e) { setErr(e.message); }
  };
  useEffect(() => { load(); }, []);

  const add = async (e) => {
    e.preventDefault(); setMsg(null); setErr(null);
    try { await api.createSEO(form); setMsg('SEO report added'); setOpen(false); load(); } catch (e) { setErr(e.message); }
  };

  return (
    <div className="bg-white rounded-2xl shadow-soft p-4">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-bold text-navy mb-2">SEO Reports</h2>
        <button onClick={()=>setOpen(true)} className="bg-gold text-navy rounded-xl px-3 py-2">+ Add</button>
      </div>
      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      <div className="overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr><th className="p-2 text-left">Date</th><th className="p-2 text-left">Type</th><th className="p-2 text-left">Challenge</th><th className="p-2 text-left">Details</th></tr>
          </thead>
          <tbody>
            {list.map(r=>(
              <tr key={r._id} className="border-t">
                <td className="p-2">{new Date(r.date).toLocaleDateString()}</td>
                <td className="p-2">{r.typeOfWork}</td>
                <td className="p-2">{r.challenge || '-'}</td>
                <td className="p-2">{r.details || '-'}</td>
              </tr>
            ))}
            {list.length === 0 && <tr><td className="p-3 text-royal/70" colSpan="4">No SEO reports</td></tr>}
          </tbody>
        </table>
      </div>

      {open && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center p-4">
          <form onSubmit={add} className="bg-white rounded-2xl shadow-soft p-4 w-full max-w-xl">
            <h3 className="text-lg font-semibold text-navy mb-2">Add SEO Report</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div>
                <label className="block text-sm text-royal mb-1">Date</label>
                <input type="date" className="w-full border rounded-xl px-3 py-2" value={form.date} onChange={e=>setForm(f=>({...f,date:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Type of Work</label>
                <select className="w-full border rounded-xl px-3 py-2" value={form.typeOfWork} onChange={e=>setForm(f=>({...f,typeOfWork:e.target.value}))}>
                  <option>Blogpost</option><option>Backlink</option><option>Social Bookmarking</option><option>Keyword Research</option><option>Others</option>
                </select>
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm text-royal mb-1">Challenge</label>
                <input className="w-full border rounded-xl px-3 py-2" value={form.challenge} onChange={e=>setForm(f=>({...f,challenge:e.target.value}))}/>
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm text-royal mb-1">Details</label>
                <textarea rows="3" className="w-full border rounded-xl px-3 py-2" value={form.details} onChange={e=>setForm(f=>({...f,details:e.target.value}))}/>
              </div>
            </div>
            <div className="mt-3 flex justify-end gap-2">
              <button type="button" onClick={()=>setOpen(false)} className="px-4 py-2 rounded-xl border">Cancel</button>
              <button className="px-4 py-2 rounded-xl bg-gold text-navy font-semibold">Save</button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
}
5) web/src/App.jsx (ADD ROUTES if not present)
If your App.jsx from Phase 2 doesn’t yet include DM pages, ensure these routes exist:
// inside <Route element={<Layout />}> ... common section
<Route path="/lead-entry" element={<LeadEntry />} />
<Route path="/leads-center" element={<LeadsCenter />} />
<Route path="/dm-metrics" element={<DMMetrics />} />
(And import the components at the top.)
▶️ Run & Test
Backend: restart (new models/routes)
cd primeops/api
npm run dev
Frontend: run
cd ../web
npm run dev
Login as DM (polok@primeacademy.org / password123)
Lead Entry → add single; CSV upload (use proper headers)
Leads Center → filter by status, assign to an Admission user
DM Metrics → add Costs; Social snapshot; SEO report
Login as SA/Admin to confirm view-only leads via your existing LeadsCenterView.
If you want, next we can wire Phase 4 (Admission) to move leads through Counseling → Admitted / In Follow-Up / Not Admitted and submit Fees Collection to Accountant.
You said:

ChatGPT said:

Thought for 11s
You're seeing ReferenceError: LeadEntry is not defined because the component wasn’t imported into App.jsx. Here’s the full corrected file with all Phase-3 pages imported and routed (including DM-only routes).
web/src/App.jsx
import React from 'react';
import { Routes, Route, Navigate, Outlet } from 'react-router-dom';

import ProtectedRoute from './components/ProtectedRoute.jsx';
import RoleRoute from './components/RoleRoute.jsx';
import Topbar from './components/Topbar.jsx';
import Sidebar from './components/Sidebar.jsx';

// Common pages
import Dashboard from './pages/Dashboard.jsx';
import Profile from './pages/Profile.jsx';
import AssignTasks from './pages/AssignTasks.jsx';
import MyTasks from './pages/MyTasks.jsx';
import Employees from './pages/Employees.jsx';
import Courses from './pages/Courses.jsx';
import ReportsView from './pages/ReportsView.jsx';
import LeadsCenterView from './pages/LeadsCenterView.jsx';

// Phase 3 (Digital Marketing) pages
import LeadEntry from './pages/LeadEntry.jsx';
import LeadsCenter from './pages/LeadsCenter.jsx';
import DMMetrics from './pages/DMMetrics.jsx';

/**
 * Authenticated shell layout for the app
 */
function Layout() {
  return (
    <div className="min-h-screen flex bg-[#f7f9fc]">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="p-4 md:p-6">
          <Outlet />
        </main>
      </div>
    </div>
  );
}

export default function App() {
  return (
    <Routes>
      {/* Authenticated area */}
      <Route element={<ProtectedRoute />}>
        <Route element={<Layout />}>
          {/* Common routes for all authenticated users */}
          <Route path="/" element={<Dashboard />} />
          <Route path="/profile" element={<Profile />} />
          <Route path="/my-tasks" element={<MyTasks />} />

          {/* SuperAdmin & Admin only (view/ops) */}
          <Route element={<RoleRoute roles={['SuperAdmin', 'Admin']} />}>
            <Route path="/assign-tasks" element={<AssignTasks />} />
            <Route path="/employees" element={<Employees />} />
            <Route path="/courses" element={<Courses />} />
            <Route path="/reports-view" element={<ReportsView />} />
            <Route path="/leads-center-view" element={<LeadsCenterView />} />
          </Route>

          {/* DigitalMarketing only */}
          <Route element={<RoleRoute roles={['DigitalMarketing']} />}>
            <Route path="/lead-entry" element={<LeadEntry />} />
            <Route path="/leads-center" element={<LeadsCenter />} />
            <Route path="/dm-metrics" element={<DMMetrics />} />
          </Route>

          {/* Fallback inside shell */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Route>
      </Route>

      {/* Unauthenticated fallback */}
      <Route path="*" element={<Navigate to="/login" replace />} />
    </Routes>
  );
}
You said:

ChatGPT said:
Great catch — the 403s are from GET /api/users when a DigitalMarketing user opens Leads Center.
Backend currently allows only Admin/SuperAdmin to list all users, but DM needs Admission members to assign leads. Let’s fix this cleanly:
Add a read-only endpoint: GET /api/users/admission (allowed for Admin, SuperAdmin, DigitalMarketing).
Update the web app to call this endpoint instead of /api/users on the DM Leads Center page.
Below are the full files to replace.
api/routes/users.js (FULL FILE)
import express from 'express';
import User from '../models/User.js';
import { requireAuth } from '../middleware/auth.js';
import { authorize } from '../middleware/authorize.js';
import { hashPassword } from '../utils/hash.js';

const router = express.Router();

/**
 * List all employees
 * Admin + SuperAdmin only (full list)
 */
router.get('/', requireAuth, authorize(['Admin', 'SuperAdmin']), async (req, res) => {
  const users = await User.find().select('-password');
  return res.json({ users });
});

/**
 * List Admission users (for assigning leads)
 * Allowed: Admin, SuperAdmin, DigitalMarketing (read-only)
 */
router.get('/admission', requireAuth, authorize(['Admin', 'SuperAdmin', 'DigitalMarketing']), async (req, res) => {
  const users = await User.find({ role: 'Admission', isActive: true })
    .select('name email role avatar department designation');
  return res.json({ users });
});

/**
 * Create employee
 * Admin only — cannot create SuperAdmin
 */
router.post('/', requireAuth, authorize(['Admin']), async (req, res) => {
  const { name, email, password, role, department, designation, avatar, phone } = req.body || {};
  if (role === 'SuperAdmin') {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot create Super Admin' });
  }
  const exists = await User.findOne({ email });
  if (exists) return res.status(409).json({ code: 'EMAIL_EXISTS', message: 'Email already in use' });

  const hashed = await hashPassword(password || 'password123');
  const user = await User.create({
    name, email, password: hashed, role, department, designation, avatar, phone
  });
  const { password: _, ...safe } = user.toObject();
  return res.status(201).json({ user: safe });
});

/**
 * Update employee
 * Admin only — cannot modify/demote SuperAdmin
 */
router.put('/:id', requireAuth, authorize(['Admin']), async (req, res) => {
  const target = await User.findById(req.params.id).select('+password');
  if (!target) return res.status(404).json({ code: 'NOT_FOUND', message: 'User not found' });
  if (target.role === 'SuperAdmin') {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot modify Super Admin' });
  }

  const { name, email, role, department, designation, avatar, phone, isActive, newPassword } = req.body || {};
  if (email) target.email = email;
  if (name) target.name = name;
  if (role) {
    if (role === 'SuperAdmin') {
      return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot set role Super Admin' });
    }
    target.role = role;
  }
  if (department !== undefined) target.department = department;
  if (designation !== undefined) target.designation = designation;
  if (avatar !== undefined) target.avatar = avatar;
  if (phone !== undefined) target.phone = phone;
  if (typeof isActive === 'boolean') target.isActive = isActive;
  if (newPassword) target.password = await hashPassword(newPassword);

  await target.save();
  const { password: _, ...safe } = target.toObject();
  return res.json({ user: safe });
});

/**
 * Delete employee
 * Admin only — cannot delete SuperAdmin
 */
router.delete('/:id', requireAuth, authorize(['Admin']), async (req, res) => {
  const target = await User.findById(req.params.id);
  if (!target) return res.status(404).json({ code: 'NOT_FOUND', message: 'User not found' });
  if (target.role === 'SuperAdmin') {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot delete Super Admin' });
  }
  await target.deleteOne();
  return res.json({ ok: true });
});

export default router;
web/src/lib/api.js (FULL FILE)
// web/src/lib/api.js
// Centralized API client with defensive error handling.

const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

async function handleJson(res, defaultMsg) {
  if (!res.ok) {
    let errBody = {};
    try { errBody = await res.json(); } catch (_) {}
    const msg = errBody?.message || errBody?.code || `${defaultMsg} (${res.status})`;
    throw new Error(msg);
  }
  let data = {};
  try { data = await res.json(); } catch (_) {}
  return data;
}

export const api = {
  // -------- Auth --------
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    const data = await handleJson(res, 'Login failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid login response');
    return data;
  },

  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });
    const data = await handleJson(res, 'Auth check failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid /me response');
    return data;
  },

  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST',
      credentials: 'include'
    });
    return handleJson(res, 'Logout failed');
  },

  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await handleJson(res, 'Update failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid update response');
    return data;
  },

  // -------- Users (Employees) --------
  async listUsers() {
    const res = await fetch(`${API_BASE}/api/users`, { credentials: 'include' });
    return handleJson(res, 'Load users failed');
  },

  async listAdmissionUsers() {
    const res = await fetch(`${API_BASE}/api/users/admission`, { credentials: 'include' });
    return handleJson(res, 'Load admission users failed');
  },

  async createUser(payload) {
    const res = await fetch(`${API_BASE}/api/users`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create user failed');
  },

  async updateUser(id, payload) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update user failed');
  },

  async deleteUser(id) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'DELETE',
      credentials: 'include'
    });
    return handleJson(res, 'Delete user failed');
  },

  // -------- Tasks --------
  async listAllTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks${q}`, { credentials: 'include' });
    return handleJson(res, 'Load tasks failed');
  },

  async listMyTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks/my${q}`, { credentials: 'include' });
    return handleJson(res, 'Load my tasks failed');
  },

  async assignTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/assign`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Assign task failed');
  },

  async addSelfTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/self`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Add self task failed');
  },

  async updateTaskStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/tasks/${id}/status`, {
      method: 'PATCH',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update task status failed');
  },

  // -------- Courses --------
  async listCourses() {
    const res = await fetch(`${API_BASE}/api/courses`, { credentials: 'include' });
    return handleJson(res, 'Load courses failed');
  },

  async createCourse(payload) {
    const res = await fetch(`${API_BASE}/api/courses`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create course failed');
  },

  async updateCourse(id, payload) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'PUT',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update course failed');
  },

  async deleteCourse(id) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'DELETE',
      credentials: 'include'
    });
    return handleJson(res, 'Delete course failed');
  },

  // -------- Leads (DM & SA/Admin view) --------
  async createLead(payload) {
    const res = await fetch(`${API_BASE}/api/leads`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create lead failed');
  },

  async bulkUploadLeads(csvText) {
    const res = await fetch(`${API_BASE}/api/leads/bulk`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ csv: csvText })
    });
    return handleJson(res, 'Bulk upload failed');
  },

  async listLeads(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/leads${q}`, { credentials: 'include' });
    return handleJson(res, 'Load leads failed');
  },

  async assignLead(id, assignedTo) {
    const res = await fetch(`${API_BASE}/api/leads/${id}/assign`, {
      method: 'PATCH',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ assignedTo })
    });
    return handleJson(res, 'Assign lead failed');
  },

  // -------- Digital Marketing Metrics --------
  async listDMCosts() {
    const res = await fetch(`${API_BASE}/api/dm/costs`, { credentials: 'include' });
    return handleJson(res, 'Load DM costs failed');
  },

  async createDMCost(payload) {
    const res = await fetch(`${API_BASE}/api/dm/costs`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create DM cost failed');
  },

  async deleteDMCost(id) {
    const res = await fetch(`${API_BASE}/api/dm/costs/${id}`, {
      method: 'DELETE',
      credentials: 'include'
    });
    return handleJson(res, 'Delete DM cost failed');
  },

  async listSocial() {
    const res = await fetch(`${API_BASE}/api/dm/social`, { credentials: 'include' });
    return handleJson(res, 'Load social reports failed');
  },

  async createSocial(payload) {
    const res = await fetch(`${API_BASE}/api/dm/social`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create social report failed');
  },

  async listSEO() {
    const res = await fetch(`${API_BASE}/api/dm/seo`, { credentials: 'include' });
    return handleJson(res, 'Load SEO reports failed');
  },

  async createSEO(payload) {
    const res = await fetch(`${API_BASE}/api/dm/seo`, {
      method: 'POST',
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create SEO report failed');
  }
};
web/src/pages/LeadsCenter.jsx (FULL FILE)
import React, { useEffect, useMemo, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function LeadsCenter() {
  const { user } = useAuth();
  const [status, setStatus] = useState('Assigned');
  const [leads, setLeads] = useState([]);
  const [admissions, setAdmissions] = useState([]);
  const [msg, setMsg] = useState(null);
  const [err, setErr] = useState(null);

  const canAssign = user?.role === 'DigitalMarketing';

  const load = async () => {
    try {
      const calls = [api.listLeads(status)];
      if (canAssign) calls.push(api.listAdmissionUsers());
      const results = await Promise.all(calls);

      const leadsResp = results[0];
      const admissionsResp = canAssign ? results[1] : { users: [] };

      setLeads(leadsResp?.leads || []);
      setAdmissions(admissionsResp?.users || []);
      setErr(null);
    } catch (e) {
      setErr(e.message);
    }
  };

  useEffect(() => { load(); }, [status]); // eslint-disable-line

  const assign = async (id, assignedTo) => {
    setMsg(null); setErr(null);
    try {
      await api.assignLead(id, assignedTo);
      setMsg('Lead assigned');
      load();
    } catch (e) { setErr(e.message); }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Leads Center</h1>
        <select value={status} onChange={e=>setStatus(e.target.value)} className="border rounded-xl px-3 py-2">
          <option>Assigned</option>
          <option>Counseling</option>
          <option>In Follow Up</option>
          <option>Admitted</option>
          <option>Not Admitted</option>
        </select>
      </div>

      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="text-left p-3">Lead ID</th>
              <th className="text-left p-3">Name</th>
              <th className="text-left p-3">Phone / Email</th>
              <th className="text-left p-3">Interested Course</th>
              <th className="text-left p-3">Source</th>
              <th className="text-left p-3">Assigned To</th>
              {canAssign && <th className="text-left p-3">Action</th>}
            </tr>
          </thead>
          <tbody>
            {leads.map(l => (
              <tr key={l._id} className="border-t">
                <td className="p-3">{l.leadId}</td>
                <td className="p-3">{l.name}</td>
                <td className="p-3">
                  <div>{l.phone}</div>
                  <div className="text-xs text-royal/70">{l.email || '-'}</div>
                </td>
                <td className="p-3">{l.interestedCourse || '-'}</td>
                <td className="p-3">{l.source}</td>
                <td className="p-3">{l.assignedTo ? `${l.assignedTo.name} (${l.assignedTo.role})` : '-'}</td>
                {canAssign && (
                  <td className="p-3">
                    <AssignDropdown
                      current={l.assignedTo?._id || ''}
                      options={admissions}
                      onChange={(val) => assign(l._id, val)}
                    />
                  </td>
                )}
              </tr>
            ))}
            {leads.length === 0 && (
              <tr><td className="p-4 text-royal/70" colSpan={canAssign ? 7 : 6}>No leads</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function AssignDropdown({ current, options, onChange }) {
  const [val, setVal] = useState(current || '');
  useEffect(() => setVal(current || ''), [current]);
  return (
    <div className="flex items-center gap-2">
      <select className="border rounded-xl px-3 py-2" value={val} onChange={e=>setVal(e.target.value)}>
        <option value="">Select Admission Member</option>
        {options.map(o => <option key={o._id} value={o._id}>{o.name}</option>)}
      </select>
      <button disabled={!val} onClick={()=>onChange(val)} className="px-3 py-1 rounded-lg border hover:bg-[#f3f6ff]">Assign</button>
    </div>
  );
}
After replacing files
Restart API (new route added):
cd primeops/api
npm run dev
Refresh the web app while logged in as Digital Marketing.
Leads Center should load without 403s, and the “Assign” dropdown will be populated with Admission users only.
If you see any more errors, send me the Network tab response JSON—I’ll patch instantly.
You said:
done, next ?
ChatGPT said:

Thought for 10s
দারুণ! ✅ Phase 3 OK.
আমি Phase 4 — Admission Pipeline + Fees Collection (submit to Accountant) নিয়ে এগোতে প্রস্তাব করছি। এতে Admission টিম পুরো লিড–টু–অ্যাডমিশন ফ্লো চালাবে, আর ফি সংগ্রহ সাবমিশন করবে — Accountant Phase 5-এ approve/reject করবে।

Phase 4 — Scope (what you’ll get)
Lead Pipeline (Admission only)
Lists: Assigned Lead, Counseling, In Follow-Up, Admitted, Not Admitted
Actions from Counseling: Admitted / Follow-Up / Not Admitted
From Follow-Up: Admitted / Not Admitted
Fees Collection (Admission only)
Submit fees for an admitted lead → goes to Accountant review queue
Fields: Lead, Course, Amount, Method (Bkash/Nagad/Rocket/Bank Transfer/Cash), Payment Date, Note
Status: Pending (default) → (Phase 5: Accountant will set Approved/Rejected)
RBAC
Admission: move status + submit fees
DM/Admin/SA: view-only of these lists (as per earlier rules)
UI Pages
/admission/assigned
/admission/counseling
/admission/follow-up
/admission/admitted
/admission/not-admitted
/admission/fees-collection (list + “Collect Fees” popup)
Backend changes (high level)
Lead model: already OK (status enum fits).
NEW AdmissionFee model:
{ leadId(ref), courseName, amount, method, paymentDate, note, status: 'Pending'|'Approved'|'Rejected', submittedBy(ref User) }
Routes:
PATCH /api/leads/:id/status (Admission only; allowed transitions)
GET /api/admission/leads?status=... (Admission can see their own assigned + filter; Admin/SA view-all)
GET /api/admission/fees (Admission sees own submissions; Admin/SA view-all)
POST /api/admission/fees (Admission submits)
(Phase 5) PATCH /api/accounting/fees/:id/approve|reject
Frontend changes (high level)
Sidebar (Admission role): Dashboard, Assigned Lead, Counseling, In Follow-Up, Admitted, Not Admitted, Admission Fees Collection
Reusable table with action buttons per pipeline
Collect Fees popup with validation
Data flow
Digital Marketing assigns a lead → status Assigned.
Admission moves to Counseling → then Admitted / In Follow-Up / Not Admitted.
If Admitted, Admission uses Collect Fees to submit payment → status Pending for Accountant.
Phase 5: Accountant approves/rejects → flows into Accounting dashboard & Income.
যদি তুমি OK বলো, আমি Phase 4-এর পুরো কোড (models, routes, pages, routing updates) এক শটে দিয়ে দিচ্ছি — drop-in ready.
You said:
Phase 4
ChatGPT said:

Thought for 40s
চল শুরু করি Phase 4 — Admission Pipeline + Fees Collection.
আমি সবকিছু drop-in ready ভাবে দিচ্ছি: নতুন মডেল/রাউট (API), ফ্রন্টএন্ড পেজ, এবং রাউট/সাইডবার আপডেট। কপি–পেস্ট করে রান দিলেই কাজ করবে।
🔧 Back-end
1) api/models/AdmissionFee.js (FULL FILE — NEW)
// api/models/AdmissionFee.js
import mongoose from 'mongoose';

const AdmissionFeeSchema = new mongoose.Schema(
  {
    lead: { type: mongoose.Schema.Types.ObjectId, ref: 'Lead', required: true, index: true },
    courseName: { type: String, required: true },
    amount: { type: Number, required: true },
    method: {
      type: String,
      enum: ['Bkash', 'Nagad', 'Rocket', 'Bank Transfer', 'Cash on Hand'],
      required: true
    },
    paymentDate: { type: Date, required: true },
    note: { type: String, default: '' },
    status: { type: String, enum: ['Pending', 'Approved', 'Rejected'], default: 'Pending' },
    submittedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true }
  },
  { timestamps: true }
);

export default mongoose.model('AdmissionFee', AdmissionFeeSchema);
2) api/routes/admission.js (FULL FILE — NEW)
// api/routes/admission.js
import express from 'express';
import { requireAuth } from '../middleware/auth.js';
import Lead from '../models/Lead.js';
import AdmissionFee from '../models/AdmissionFee.js';

const router = express.Router();

const isAdmission = (u) => u?.role === 'Admission';
const isAdmin = (u) => u?.role === 'Admin';
const isSA = (u) => u?.role === 'SuperAdmin';
const isAccountant = (u) => u?.role === 'Accountant';

// ---------- Leads (Admission pipeline) ----------

// List leads for Admission (own) or Admin/SA (all)
router.get('/leads', requireAuth, async (req, res) => {
  const { status } = req.query;
  const q = {};
  if (status) q.status = status;

  if (isAdmission(req.user)) {
    q.assignedTo = req.user.id;
  } else if (!(isAdmin(req.user) || isSA(req.user))) {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Not allowed' });
  }

  const leads = await Lead.find(q).sort({ createdAt: -1 }).populate('assignedTo', 'name email');
  return res.json({ leads });
});

// Allowed transitions
// Assigned -> Counseling
// Counseling -> Admitted | In Follow Up | Not Admitted
// In Follow Up -> Admitted | Not Admitted
router.patch('/leads/:id/status', requireAuth, async (req, res) => {
  const { status } = req.body || {};
  const allowed = ['Counseling', 'Admitted', 'In Follow Up', 'Not Admitted'];
  if (!allowed.includes(status)) {
    return res.status(400).json({ code: 'INVALID_STATUS', message: 'Invalid target status' });
  }

  const lead = await Lead.findById(req.params.id);
  if (!lead) return res.status(404).json({ code: 'NOT_FOUND', message: 'Lead not found' });

  // Admission can only move own leads; Admin/SA can move any
  if (isAdmission(req.user) && String(lead.assignedTo) !== String(req.user.id)) {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot update unassigned lead' });
  }
  if (!(isAdmission(req.user) || isAdmin(req.user) || isSA(req.user))) {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Not allowed' });
  }

  const from = lead.status;
  const ok =
    (from === 'Assigned' && status === 'Counseling') ||
    (from === 'Counseling' && ['Admitted', 'In Follow Up', 'Not Admitted'].includes(status)) ||
    (from === 'In Follow Up' && ['Admitted', 'Not Admitted'].includes(status));

  if (!ok) {
    return res.status(400).json({ code: 'BAD_TRANSITION', message: `Cannot move ${from} -> ${status}` });
  }

  lead.status = status;
  await lead.save();
  return res.json({ lead });
});

// ---------- Fees Collection (Admission submit; Accountant approve in Phase 5) ----------

// List fees: Admission sees own, Admin/SA/Accountant see all
router.get('/fees', requireAuth, async (req, res) => {
  const q = {};
  if (isAdmission(req.user)) q.submittedBy = req.user.id;
  else if (!(isAdmin(req.user) || isSA(req.user) || isAccountant(req.user))) {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Not allowed' });
  }
  const rows = await AdmissionFee.find(q)
    .sort({ createdAt: -1 })
    .populate('lead', 'leadId name phone email status');
  return res.json({ fees: rows });
});

// Create fee (Admission only)
router.post('/fees', requireAuth, async (req, res) => {
  if (!isAdmission(req.user)) {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Admission only' });
  }
  const { leadId, courseName, amount, method, paymentDate, note } = req.body || {};
  if (!leadId || !courseName || amount === undefined || !method || !paymentDate) {
    return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'Missing required fields' });
  }

  const lead = await Lead.findById(leadId);
  if (!lead) return res.status(404).json({ code: 'NOT_FOUND', message: 'Lead not found' });

  if (String(lead.assignedTo) !== String(req.user.id)) {
    return res.status(403).json({ code: 'FORBIDDEN', message: 'Cannot submit fee for unassigned lead' });
  }
  if (lead.status !== 'Admitted') {
    return res.status(400).json({ code: 'INVALID_STATE', message: 'Lead must be Admitted' });
  }

  const row = await AdmissionFee.create({
    lead: lead._id,
    courseName,
    amount: Number(amount),
    method,
    paymentDate: new Date(paymentDate),
    note: note || '',
    status: 'Pending',
    submittedBy: req.user.id
  });

  const populated = await AdmissionFee.findById(row._id).populate('lead', 'leadId name phone email status');
  return res.status(201).json({ fee: populated });
});

export default router;
3) api/server.js (FULL FILE — UPDATED to mount Admission routes)
// api/server.js
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import { connectDB } from './config/db.js';

import authRoutes from './routes/auth.js';
import userRoutes from './routes/users.js';
import taskRoutes from './routes/tasks.js';
import courseRoutes from './routes/courses.js';
import leadRoutes from './routes/leads.js';
import dmRoutes from './routes/dm.js';
import admissionRoutes from './routes/admission.js'; // <-- NEW

dotenv.config();

const app = express();
app.use(helmet());
app.use(morgan('dev'));
app.use(express.json({ limit: '5mb' }));
app.use(cookieParser());
app.use(cors({
  origin: process.env.CLIENT_ORIGIN || 'http://localhost:5173',
  credentials: true
}));

app.get('/health', (req, res) => res.json({ ok: true, service: 'primeops-api' }));

app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/tasks', taskRoutes);
app.use('/api/courses', courseRoutes);
app.use('/api/leads', leadRoutes);
app.use('/api/dm', dmRoutes);
app.use('/api/admission', admissionRoutes); // <-- NEW

app.use((err, req, res, next) => {
  console.error('Unhandled:', err);
  res.status(500).json({ code: 'SERVER_ERROR', message: 'Unexpected error' });
});

const PORT = process.env.PORT || 5001;
connectDB(process.env.MONGO_URI).then(() => {
  app.listen(PORT, () => console.log(`🚀 API running on http://localhost:${PORT}`));
});
Run API: cd api && npm run dev
🎨 Front-end
1) web/src/lib/api.js (FULL FILE — UPDATED with Admission methods)
// web/src/lib/api.js
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

async function handleJson(res, defaultMsg) {
  if (!res.ok) {
    let errBody = {};
    try { errBody = await res.json(); } catch (_) {}
    const msg = errBody?.message || errBody?.code || `${defaultMsg} (${res.status})`;
    throw new Error(msg);
  }
  let data = {};
  try { data = await res.json(); } catch (_) {}
  return data;
}

export const api = {
  // ---- Auth ----
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    const data = await handleJson(res, 'Login failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid login response');
    return data;
  },
  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });
    const data = await handleJson(res, 'Auth check failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid /me response');
    return data;
  },
  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST', credentials: 'include'
    });
    return handleJson(res, 'Logout failed');
  },
  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await handleJson(res, 'Update failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid update response');
    return data;
  },

  // ---- Users ----
  async listUsers() {
    const res = await fetch(`${API_BASE}/api/users`, { credentials: 'include' });
    return handleJson(res, 'Load users failed');
  },
  async listAdmissionUsers() {
    const res = await fetch(`${API_BASE}/api/users/admission`, { credentials: 'include' });
    return handleJson(res, 'Load admission users failed');
  },
  async createUser(payload) {
    const res = await fetch(`${API_BASE}/api/users`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create user failed');
  },
  async updateUser(id, payload) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update user failed');
  },
  async deleteUser(id) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete user failed');
  },

  // ---- Tasks ----
  async listAllTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks${q}`, { credentials: 'include' });
    return handleJson(res, 'Load tasks failed');
  },
  async listMyTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks/my${q}`, { credentials: 'include' });
    return handleJson(res, 'Load my tasks failed');
  },
  async assignTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/assign`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Assign task failed');
  },
  async addSelfTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/self`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Add self task failed');
  },
  async updateTaskStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/tasks/${id}/status`, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update task status failed');
  },

  // ---- Courses ----
  async listCourses() {
    const res = await fetch(`${API_BASE}/api/courses`, { credentials: 'include' });
    return handleJson(res, 'Load courses failed');
  },
  async createCourse(payload) {
    const res = await fetch(`${API_BASE}/api/courses`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create course failed');
  },
  async updateCourse(id, payload) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update course failed');
  },
  async deleteCourse(id) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete course failed');
  },

  // ---- Leads (DM & SA/Admin view) ----
  async listLeads(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/leads${q}`, { credentials: 'include' });
    return handleJson(res, 'Load leads failed');
  },
  async assignLead(id, assignedTo) {
    const res = await fetch(`${API_BASE}/api/leads/${id}/assign`, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ assignedTo })
    });
    return handleJson(res, 'Assign lead failed');
  },
  async createLead(payload) {
    const res = await fetch(`${API_BASE}/api/leads`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create lead failed');
  },
  async bulkUploadLeads(csvText) {
    const res = await fetch(`${API_BASE}/api/leads/bulk`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ csv: csvText })
    });
    return handleJson(res, 'Bulk upload failed');
  },

  // ---- Admission pipeline ----
  async listAdmissionLeads(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/admission/leads${q}`, { credentials: 'include' });
    return handleJson(res, 'Load admission leads failed');
  },
  async updateLeadStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/admission/leads/${id}/status`, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update lead status failed');
  },

  // ---- Admission fees ----
  async listAdmissionFees() {
    const res = await fetch(`${API_BASE}/api/admission/fees`, { credentials: 'include' });
    return handleJson(res, 'Load fees failed');
  },
  async createAdmissionFee(payload) {
    const res = await fetch(`${API_BASE}/api/admission/fees`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create fee failed');
  }
};
2) web/src/pages/AdmissionPipeline.jsx (FULL FILE — NEW)
// web/src/pages/AdmissionPipeline.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { useLocation, Link } from 'react-router-dom';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

const STATUS_TABS = [
  { key: 'Assigned', path: '/admission/assigned', label: 'Assigned Lead' },
  { key: 'Counseling', path: '/admission/counseling', label: 'Counseling' },
  { key: 'In Follow Up', path: '/admission/follow-up', label: 'In Follow-Up' },
  { key: 'Admitted', path: '/admission/admitted', label: 'Admitted' },
  { key: 'Not Admitted', path: '/admission/not-admitted', label: 'Not Admitted' }
];

export default function AdmissionPipeline() {
  const { user } = useAuth();
  const loc = useLocation();

  const active = useMemo(() => {
    const found = STATUS_TABS.find(t => t.path === loc.pathname);
    return found ? found.key : 'Assigned';
  }, [loc.pathname]);

  if (user?.role !== 'Admission' && user?.role !== 'Admin' && user?.role !== 'SuperAdmin') {
    return <div className="text-royal">Access denied</div>;
  }

  return (
    <div>
      <h1 className="text-2xl font-bold text-navy mb-3">Admission Pipeline</h1>
      <div className="flex gap-2 mb-4 flex-wrap">
        {STATUS_TABS.map(t => (
          <Link key={t.key} to={t.path}
            className={`px-3 py-1.5 rounded-xl border ${active===t.key ? 'bg-gold text-navy border-gold' : 'hover:bg-[#f3f6ff]'}`}>
            {t.label}
          </Link>
        ))}
        {active === 'Admitted' && user?.role === 'Admission' && (
          <Link to="/admission/fees" className="ml-auto px-3 py-1.5 rounded-xl bg-gold text-navy font-semibold">Admission Fees</Link>
        )}
      </div>
      <PipelineTable status={active} canAct={user?.role === 'Admission'} />
    </div>
  );
}

function PipelineTable({ status, canAct }) {
  const [rows, setRows] = useState([]);
  const [msg, setMsg] = useState(null);
  const [err, setErr] = useState(null);

  const load = async () => {
    try {
      const { leads } = await api.listAdmissionLeads(status);
      setRows(leads || []);
      setErr(null);
    } catch (e) { setErr(e.message); }
  };

  useEffect(() => { load(); }, [status]); // eslint-disable-line

  const act = async (id, action) => {
    setMsg(null); setErr(null);
    try {
      await api.updateLeadStatus(id, action);
      setMsg(`Status updated to ${action}`);
      load();
    } catch (e) { setErr(e.message); }
  };

  const actions = (row) => {
    if (!canAct) return null;
    if (status === 'Assigned') {
      return <ActionBtn onClick={()=>act(row._id,'Counseling')}>Start Counseling</ActionBtn>;
    }
    if (status === 'Counseling') {
      return (
        <div className="flex gap-2">
          <ActionBtn onClick={()=>act(row._id,'Admitted')}>Admitted</ActionBtn>
          <ActionBtn onClick={()=>act(row._id,'In Follow Up')}>Follow-Up</ActionBtn>
          <ActionBtn variant="danger" onClick={()=>act(row._id,'Not Admitted')}>Not Admitted</ActionBtn>
        </div>
      );
    }
    if (status === 'In Follow Up') {
      return (
        <div className="flex gap-2">
          <ActionBtn onClick={()=>act(row._id,'Admitted')}>Admitted</ActionBtn>
          <ActionBtn variant="danger" onClick={()=>act(row._id,'Not Admitted')}>Not Admitted</ActionBtn>
        </div>
      );
    }
    return <span className="text-royal/60">—</span>;
  };

  return (
    <div>
      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}
      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="p-3 text-left">Lead ID</th>
              <th className="p-3 text-left">Name</th>
              <th className="p-3 text-left">Phone / Email</th>
              <th className="p-3 text-left">Course</th>
              <th className="p-3 text-left">Source</th>
              <th className="p-3 text-left">Assigned To</th>
              <th className="p-3 text-left">Action</th>
            </tr>
          </thead>
          <tbody>
            {rows.map(r => (
              <tr key={r._id} className="border-t">
                <td className="p-3">{r.leadId}</td>
                <td className="p-3">{r.name}</td>
                <td className="p-3">
                  <div>{r.phone}</div>
                  <div className="text-xs text-royal/70">{r.email || '-'}</div>
                </td>
                <td className="p-3">{r.interestedCourse || '-'}</td>
                <td className="p-3">{r.source}</td>
                <td className="p-3">{r.assignedTo ? r.assignedTo.name : '-'}</td>
                <td className="p-3">{actions(r)}</td>
              </tr>
            ))}
            {rows.length === 0 && (
              <tr><td className="p-4 text-royal/70" colSpan="7">No leads</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function ActionBtn({ children, onClick, variant = 'default' }) {
  const cls =
    variant === 'danger'
      ? 'px-3 py-1 rounded-lg border text-red-700 hover:bg-red-50'
      : 'px-3 py-1 rounded-lg border hover:bg-[#f3f6ff]';
  return <button onClick={onClick} className={cls}>{children}</button>;
}
3) web/src/pages/AdmissionFees.jsx (FULL FILE — NEW)
// web/src/pages/AdmissionFees.jsx
import React, { useEffect, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function AdmissionFees() {
  const { user } = useAuth();
  if (user?.role !== 'Admission' && user?.role !== 'Admin' && user?.role !== 'SuperAdmin' && user?.role !== 'Accountant') {
    return <div className="text-royal">Access denied</div>;
  }

  const [fees, setFees] = useState([]);
  const [admitted, setAdmitted] = useState([]);
  const [open, setOpen] = useState(false);
  const [msg, setMsg] = useState(null);
  const [err, setErr] = useState(null);
  const [form, setForm] = useState({
    leadId: '', courseName:'', amount:0, method:'Bkash',
    paymentDate: new Date().toISOString().slice(0,10), note:''
  });

  const canSubmit = user?.role === 'Admission';

  const load = async () => {
    try {
      const [{ fees }, leadsResp] = await Promise.all([
        api.listAdmissionFees(),
        api.listAdmissionLeads('Admitted')
      ]);
      setFees(fees || []);
      setAdmitted(leadsResp?.leads || []);
    } catch (e) { setErr(e.message); }
  };

  useEffect(() => { load(); }, []); // eslint-disable-line

  const submit = async (e) => {
    e.preventDefault(); setMsg(null); setErr(null);
    try {
      await api.createAdmissionFee(form);
      setMsg('Fee submitted for review');
      setOpen(false);
      setForm({ leadId:'', courseName:'', amount:0, method:'Bkash', paymentDate:new Date().toISOString().slice(0,10), note:'' });
      load();
    } catch (e) { setErr(e.message); }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Admission Fees Collection</h1>
        {canSubmit && <button onClick={()=>setOpen(true)} className="bg-gold text-navy rounded-xl px-4 py-2 font-semibold">Collect Fees</button>}
      </div>

      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="p-3 text-left">Lead</th>
              <th className="p-3 text-left">Course</th>
              <th className="p-3 text-left">Amount</th>
              <th className="p-3 text-left">Method</th>
              <th className="p-3 text-left">Payment Date</th>
              <th className="p-3 text-left">Status</th>
              <th className="p-3 text-left">Note</th>
            </tr>
          </thead>
          <tbody>
            {fees.map(f => (
              <tr key={f._id} className="border-t">
                <td className="p-3">
                  {f.lead?.leadId} — {f.lead?.name}
                  <div className="text-xs text-royal/70">{f.lead?.phone} {f.lead?.email ? `• ${f.lead.email}` : ''}</div>
                </td>
                <td className="p-3">{f.courseName}</td>
                <td className="p-3">৳ {f.amount}</td>
                <td className="p-3">{f.method}</td>
                <td className="p-3">{new Date(f.paymentDate).toLocaleDateString()}</td>
                <td className="p-3">{f.status}</td>
                <td className="p-3">{f.note || '-'}</td>
              </tr>
            ))}
            {fees.length === 0 && (
              <tr><td className="p-4 text-royal/70" colSpan="7">No fees yet</td></tr>
            )}
          </tbody>
        </table>
      </div>

      {open && canSubmit && (
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center p-4">
          <form onSubmit={submit} className="bg-white rounded-2xl shadow-soft p-4 w-full max-w-xl">
            <h3 className="text-lg font-semibold text-navy mb-2">Collect Fees</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <div className="md:col-span-2">
                <label className="block text-sm text-royal mb-1">Lead (Admitted)*</label>
                <select className="w-full border rounded-xl px-3 py-2" required
                  value={form.leadId} onChange={e=>setForm(f=>({...f,leadId:e.target.value}))}>
                  <option value="">Select lead</option>
                  {admitted.map(l => <option key={l._id} value={l._id}>{l.leadId} — {l.name}</option>)}
                </select>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Course Name *</label>
                <input className="w-full border rounded-xl px-3 py-2" required
                  value={form.courseName} onChange={e=>setForm(f=>({...f,courseName:e.target.value}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Amount *</label>
                <input type="number" className="w-full border rounded-xl px-3 py-2" required
                  value={form.amount} onChange={e=>setForm(f=>({...f,amount:Number(e.target.value)}))}/>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Method *</label>
                <select className="w-full border rounded-xl px-3 py-2" value={form.method} onChange={e=>setForm(f=>({...f,method:e.target.value}))}>
                  <option>Bkash</option><option>Nagad</option><option>Rocket</option><option>Bank Transfer</option><option>Cash on Hand</option>
                </select>
              </div>
              <div>
                <label className="block text-sm text-royal mb-1">Payment Date *</label>
                <input type="date" className="w-full border rounded-xl px-3 py-2" required
                  value={form.paymentDate} onChange={e=>setForm(f=>({...f,paymentDate:e.target.value}))}/>
              </div>
              <div className="md:col-span-2">
                <label className="block text-sm text-royal mb-1">Note</label>
                <textarea rows="3" className="w-full border rounded-xl px-3 py-2"
                  value={form.note} onChange={e=>setForm(f=>({...f,note:e.target.value}))}/>
              </div>
            </div>
            <div className="mt-3 flex justify-end gap-2">
              <button type="button" onClick={()=>setOpen(false)} className="px-4 py-2 rounded-xl border">Cancel</button>
              <button className="px-4 py-2 rounded-xl bg-gold text-navy font-semibold">Submit</button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
}
4) web/src/components/Sidebar.jsx (FULL FILE — UPDATED: Admission menu)
// web/src/components/Sidebar.jsx
import React from 'react';
import { NavLink } from 'react-router-dom';
import { useAuth } from '../context/AuthContext.jsx';
import { LayoutDashboard, ListChecks, Users, BookOpen, FolderOpen } from 'lucide-react';

const Item = ({ to, icon, label }) => (
  <NavLink
    to={to}
    className={({ isActive }) =>
      `flex items-center gap-2 px-4 py-2 rounded-xl mx-3 my-1 ${
        isActive ? 'bg-[#e6eeff] text-navy' : 'text-royal hover:bg-[#f3f6ff]'
      }`
    }
  >
    {icon}<span>{label}</span>
  </NavLink>
);

export default function Sidebar() {
  const { user } = useAuth();

  const MENU_BY_ROLE = {
    SuperAdmin: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/assign-tasks', label: 'Assign Task', icon: <ListChecks size={18}/> },
      { to: '/employees', label: 'Employee (View)', icon: <Users size={18}/> },
      { to: '/courses', label: 'Courses (View)', icon: <BookOpen size={18}/> },
      { to: '/leads-center-view', label: 'Leads Center (View)', icon: <FolderOpen size={18}/> },
      { to: '/reports-view', label: 'Reports (View)', icon: <FolderOpen size={18}/> }
    ],
    Admin: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/assign-tasks', label: 'Assign Task', icon: <ListChecks size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
      { to: '/employees', label: 'Employee (CRUD)', icon: <Users size={18}/> },
      { to: '/courses', label: 'Courses (CRUD)', icon: <BookOpen size={18}/> },
      { to: '/reports-view', label: 'Reports (View)', icon: <FolderOpen size={18}/> }
    ],
    DigitalMarketing: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
      { to: '/lead-entry', label: 'Lead Entry / CSV', icon: <FolderOpen size={18}/> },
      { to: '/leads-center', label: 'Leads Center', icon: <FolderOpen size={18}/> },
      { to: '/dm-metrics', label: 'Cost / Social / SEO', icon: <FolderOpen size={18}/> }
    ],
    Admission: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
      { to: '/admission/assigned', label: 'Assigned Lead', icon: <FolderOpen size={18}/> },
      { to: '/admission/counseling', label: 'Counseling', icon: <FolderOpen size={18}/> },
      { to: '/admission/follow-up', label: 'In Follow-Up', icon: <FolderOpen size={18}/> },
      { to: '/admission/admitted', label: 'Admitted', icon: <FolderOpen size={18}/> },
      { to: '/admission/not-admitted', label: 'Not Admitted', icon: <FolderOpen size={18}/> },
      { to: '/admission/fees', label: 'Admission Fees', icon: <FolderOpen size={18}/> }
    ],
    Recruitment: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> }
    ],
    Accountant: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> }
    ],
    MotionGraphics: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> }
    ]
  };

  const items = MENU_BY_ROLE[user?.role] || [];
  return (
    <aside className="w-72 hidden md:flex bg-white border-r min-h-screen sticky top-0 flex-col">
      <div className="px-4 py-4 text-xl font-extrabold text-navy">PrimeOPS</div>
      <nav className="flex-1">
        {items.map((m) => <Item key={m.to} {...m} />)}
      </nav>
    </aside>
  );
}
5) web/src/App.jsx (FULL FILE — UPDATED with Admission routes)
// web/src/App.jsx
import React from 'react';
import { Routes, Route, Navigate, Outlet } from 'react-router-dom';

import ProtectedRoute from './components/ProtectedRoute.jsx';
import RoleRoute from './components/RoleRoute.jsx';
import Topbar from './components/Topbar.jsx';
import Sidebar from './components/Sidebar.jsx';

import Dashboard from './pages/Dashboard.jsx';
import Profile from './pages/Profile.jsx';
import AssignTasks from './pages/AssignTasks.jsx';
import MyTasks from './pages/MyTasks.jsx';
import Employees from './pages/Employees.jsx';
import Courses from './pages/Courses.jsx';
import ReportsView from './pages/ReportsView.jsx';
import LeadsCenterView from './pages/LeadsCenterView.jsx';

import LeadEntry from './pages/LeadEntry.jsx';
import LeadsCenter from './pages/LeadsCenter.jsx';
import DMMetrics from './pages/DMMetrics.jsx';

import AdmissionPipeline from './pages/AdmissionPipeline.jsx';
import AdmissionFees from './pages/AdmissionFees.jsx';

function Layout() {
  return (
    <div className="min-h-screen flex bg-[#f7f9fc]">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="p-4 md:p-6"><Outlet /></main>
      </div>
    </div>
  );
}

export default function App() {
  return (
    <Routes>
      <Route element={<ProtectedRoute />}>
        <Route element={<Layout />}>
          <Route path="/" element={<Dashboard />} />
          <Route path="/profile" element={<Profile />} />
          <Route path="/my-tasks" element={<MyTasks />} />

          {/* SA/Admin */}
          <Route element={<RoleRoute roles={['SuperAdmin', 'Admin']} />}>
            <Route path="/assign-tasks" element={<AssignTasks />} />
            <Route path="/employees" element={<Employees />} />
            <Route path="/courses" element={<Courses />} />
            <Route path="/reports-view" element={<ReportsView />} />
            <Route path="/leads-center-view" element={<LeadsCenterView />} />
          </Route>

          {/* Digital Marketing */}
          <Route element={<RoleRoute roles={['DigitalMarketing']} />}>
            <Route path="/lead-entry" element={<LeadEntry />} />
            <Route path="/leads-center" element={<LeadsCenter />} />
            <Route path="/dm-metrics" element={<DMMetrics />} />
          </Route>

          {/* Admission */}
          <Route element={<RoleRoute roles={['Admission','Admin','SuperAdmin']} />}>
            <Route path="/admission/assigned" element={<AdmissionPipeline />} />
            <Route path="/admission/counseling" element={<AdmissionPipeline />} />
            <Route path="/admission/follow-up" element={<AdmissionPipeline />} />
            <Route path="/admission/admitted" element={<AdmissionPipeline />} />
            <Route path="/admission/not-admitted" element={<AdmissionPipeline />} />
            <Route path="/admission/fees" element={<AdmissionFees />} />
          </Route>

          <Route path="*" element={<Navigate to="/" replace />} />
        </Route>
      </Route>

      <Route path="*" element={<Navigate to="/login" replace />} />
    </Routes>
  );
}
▶️ কীভাবে চালাবেন
API
নতুন মডেল/রাউট যুক্ত হয়েছে:
cd api
npm run dev
WEB
cd ../web
npm run dev
টেস্ট ফ্লো (Admission user)
/admission/assigned → Start Counseling
/admission/counseling → Admitted / In Follow-Up / Not Admitted
/admission/follow-up → Admitted / Not Admitted
/admission/admitted → Admission Fees বাটন → /admission/fees → Collect Fees submit (status: Pending)
Phase 5-এ Accountant Approve/Reject করবে—Income মডিউলে যাবে। চাইলে এখনই Phase 5 শুরু করি।
You said:

ChatGPT said:

Thought for 24s
ERR_CONNECTION_REFUSED দেখাচ্ছে কারণ ফ্রন্টএন্ড :5001/api/... এ হিট করছে—মানে API base URL ভুল/খালি হয়ে গেছে (স্ক্রিনশটে host ছাড়াই :5001). দুইটা কাজ করুন:
1) .env ঠিক করুন
web/.env
VITE_API_BASE=http://localhost:5001
নোট: :5001 বা //localhost:5001 দেবেন না। পুরো http://localhost:5001 দিন।
তারপর Vite রিস্টার্ট করুন:
cd web
npm run dev
api/.env
PORT=5001
CLIENT_ORIGIN=http://localhost:5173
MONGO_URI=<your Mongo URI>
API চালু আছে কিনা চেক করুন:
cd api
npm run dev
# টার্মিনালে দেখাবে: API running on http://localhost:5001
# ব্রাউজার/টার্মিনাল থেকে যাচাই:
# http://localhost:5001/health  ->  {"ok":true,"service":"primeops-api"}
2) (ঐচ্ছিক কিন্তু ভালো) api.js-এ base URL নরমালাইজ করুন
যদি ভুলে .env এ ভুল বসে যায়, এই কোড নিজেই সেফ ডিফল্ট নেবে। পুরো ফাইলটি রিপ্লেস করুন।
web/src/lib/api.js (full file)
// web/src/lib/api.js
// Centralized API client with defensive error handling + robust base URL normalization.

function normalizeBase(raw) {
  let base = (raw || '').trim();
  if (!base) return 'http://localhost:5001';
  // If user put just "localhost:5001" or ":5001", fix it
  if (base.startsWith(':')) base = `http://localhost${base}`;
  if (!/^https?:\/\//i.test(base)) base = `http://${base}`;
  try {
    const u = new URL(base);
    return u.origin; // strip any trailing path
  } catch {
    return 'http://localhost:5001';
  }
}

const API_BASE = normalizeBase(import.meta.env.VITE_API_BASE);

async function handleJson(res, defaultMsg) {
  if (!res.ok) {
    let errBody = {};
    try { errBody = await res.json(); } catch (_) {}
    const msg = errBody?.message || errBody?.code || `${defaultMsg} (${res.status})`;
    throw new Error(msg);
  }
  let data = {};
  try { data = await res.json(); } catch (_) {}
  return data;
}

export const api = {
  // ---- Auth ----
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    const data = await handleJson(res, 'Login failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid login response');
    return data;
  },
  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });
    const data = await handleJson(res, 'Auth check failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid /me response');
    return data;
  },
  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST', credentials: 'include'
    });
    return handleJson(res, 'Logout failed');
  },
  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await handleJson(res, 'Update failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid update response');
    return data;
  },

  // ---- Users ----
  async listUsers() {
    const res = await fetch(`${API_BASE}/api/users`, { credentials: 'include' });
    return handleJson(res, 'Load users failed');
  },
  async listAdmissionUsers() {
    const res = await fetch(`${API_BASE}/api/users/admission`, { credentials: 'include' });
    return handleJson(res, 'Load admission users failed');
  },
  async createUser(payload) {
    const res = await fetch(`${API_BASE}/api/users`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create user failed');
  },
  async updateUser(id, payload) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update user failed');
  },
  async deleteUser(id) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete user failed');
  },

  // ---- Tasks ----
  async listAllTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks${q}`, { credentials: 'include' });
    return handleJson(res, 'Load tasks failed');
  },
  async listMyTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks/my${q}`, { credentials: 'include' });
    return handleJson(res, 'Load my tasks failed');
  },
  async assignTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/assign`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Assign task failed');
  },
  async addSelfTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/self`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Add self task failed');
  },
  async updateTaskStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/tasks/${id}/status`, {
      method: 'PATCH', credentials: '
You said:
done
ChatGPT said:
দারুণ 👍
যেহেতু “Failed to fetch” আর “connection refused” error গুলো চলে গেছে — এখন ঠিকঠাক কাজ করা উচিত, যদি দুইটা সার্ভারই চলছে:
✅ Step-by-step checklist এখন যা confirm করবে:

🔹 ১. API সার্ভার চলছে কিনা
টার্মিনালে cd api তারপর চালাও:
npm run dev
এখন দেখবে এমন কিছু:
🚀 API running on http://localhost:5001
MongoDB Connected
ব্রাউজারে গিয়ে খুলে দেখো:
👉 http://localhost:5001/health
যদি দেখায়:
{"ok":true,"service":"primeops-api"}
তাহলে API ঠিক আছে।
🔹 ২. Web server চলছে কিনা
অন্য টার্মিনালে:
cd web
npm run dev
এখন ব্রাউজারে http://localhost:5173/login খুলে দেখো।
Login form এ সঠিক credentials দিলে কাজ করবে।
🔹 ৩. যদি এখনো “Failed to fetch” আসে
তাহলে .env আবার check করো —
web/.env ফাইলে exactly এইভাবে থাকা চাই 👇
VITE_API_BASE=http://localhost:5001
আর api/.env এ থাকতে হবে:
PORT=5001
CLIENT_ORIGIN=http://localhost:5173
MONGO_URI=<your Mongo URI>
তারপর দুটো সার্ভার রিস্টার্ট করো।
🔹 ৪. যদি কাজ করে ✅
তাহলে আমরা এগোবো → Phase 5 (Accountant Approval / Income & Expense System)
এতে Accountant pending fees approve/reject করতে পারবে, আর automatic Income list-এ চলে যাবে।
তুমি কি এখন Login সফলভাবে করতে পারছো (মানে dashboard দেখা যাচ্ছে)?
যদি হ্যাঁ — আমি সাথে সাথেই Phase 5 setup শুরু করে দিই।
ChatGPT said:
চমৎকার! ✅ এখন সব সার্ভার–কনফিগ ঠিক আছে।
আমি Phase 5 — Accountant Approval & Accounting Dashboard শুরু করতে প্রস্তুত। এতে পাবেন:

Fees Approval (Accountant)
/accounting/fees → Pending list (Admission submitted)
Action: Approve / Reject (note optional)
Approve হলে Income টেবিলে অটো-এন্ট্রি
Accounting Dashboard (Accountant only)
Cards: Income, Expense, Profit, Balance in My Hand
Graph: Income vs Expense (date range filter)
Income
Admission Fees থেকে অটো-লগ (read-only)
Manual add option (Accountant)
Expense
CRUD (Accountant)
RBAC
Accountant: full for accounting
Admin/SuperAdmin: view-only dashboards & reports
বলুন—Phase 5 কোড এখনই দিয়ে দিই?
You said:

ChatGPT said:
বেশ! এখনকার 404 error (“Assign lead failed (404)”) মানে হলো Digital Marketing প্যানেল থেকে যখন তুমি “Assign” চাপ দিচ্ছো তখন ফ্রন্টএন্ড /api/leads/:id/assign এ হিট করছে, কিন্তু ব্যাকএন্ডে ওই endpoint টা এখনো নেই — তাই Not Found হচ্ছে।
📍তাহলে আমরা যা করতে হবে:
✅ Fix: Create Lead Assignment Endpoint
নতুন route যোগ করো api/routes/leads.js ফাইলে।
🔸 পুরো কোড (updated api/routes/leads.js):
// api/routes/leads.js
import express from "express";
import { requireAuth } from "../middleware/auth.js";
import Lead from "../models/Lead.js";

const router = express.Router();

// helper
const isDM = (u) => u?.role === "DigitalMarketing";
const isAdmin = (u) => u?.role === "Admin";
const isSA = (u) => u?.role === "SuperAdmin";
const isAdmission = (u) => u?.role === "Admission";

// 🟢 list leads (for DM or Admin/SA)
router.get("/", requireAuth, async (req, res) => {
  const { status } = req.query;
  const q = {};
  if (status) q.status = status;

  if (isDM(req.user)) {
    // DM can see own leads
    q.createdBy = req.user.id;
  } else if (!(isAdmin(req.user) || isSA(req.user))) {
    return res.status(403).json({ message: "Forbidden" });
  }

  const leads = await Lead.find(q)
    .sort({ createdAt: -1 })
    .populate("assignedTo", "name email");
  res.json({ leads });
});

// 🟡 assign lead to Admission member
router.patch("/:id/assign", requireAuth, async (req, res) => {
  const { assignedTo } = req.body;
  if (!assignedTo)
    return res.status(400).json({ message: "assignedTo is required" });

  // only DM, Admin, SA can assign
  if (!(isDM(req.user) || isAdmin(req.user) || isSA(req.user))) {
    return res.status(403).json({ message: "Not allowed" });
  }

  const lead = await Lead.findById(req.params.id);
  if (!lead) return res.status(404).json({ message: "Lead not found" });

  lead.assignedTo = assignedTo;
  lead.status = "Assigned";
  await lead.save();

  const populated = await Lead.findById(lead._id).populate(
    "assignedTo",
    "name email"
  );
  res.json({ lead: populated });
});

export default router;
✅ তারপর api/server.js এ যাচাই করো
লাইনটা থাকা চাই:
app.use('/api/leads', leadRoutes);
✅ সার্ভার রিস্টার্ট করো
cd api
npm run dev
✅ আবার টেস্ট করো
লগইন করো Digital Marketing user হিসেবে।
/leads-center এ গিয়ে “Assign” চাপ দাও।
এখন লিড “Assigned” হয়ে যাবে ও Admission প্যানেলে দেখা যাবে।
চাইলে এরপর আমরা Phase 5 (Accountant Approval) শুরু করতে পারি।
তুমি চাইছো এখন assign lead ঠিক করে টেস্ট করে নিই, নাকি সরাসরি Phase 5 শুরু করব?
You said:
import express from 'express';
import Lead from '../models/Lead.js';
import User from '../models/User.js';
import { requireAuth } from '../middleware/auth.js';
import { authorize } from '../middleware/authorize.js';

const router = express.Router();

const genLeadId = async () => {
  const y = new Date().getFullYear();
  const count = await Lead.countDocuments({ leadId: new RegExp(^LEAD-${y}-) });
  const n = (count + 1).toString().padStart(4, '0');
  return LEAD-${y}-${n};
};

// Create single lead (DM only)
router.post('/', requireAuth, authorize(['DigitalMarketing']), async (req, res) => {
  const { name, phone, email, interestedCourse, source } = req.body || {};
  if (!name) return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'Name required' });

  // simple dedupe guard: same phone OR email within last 180 days
  const since = new Date(); since.setDate(since.getDate() - 180);
  const dup = await Lead.findOne({
    $and: [
      { createdAt: { $gte: since } },
      { $or: [{ phone: phone || null }, { email: email?.toLowerCase() || null }] }
    ]
  });
  if (dup) return res.status(409).json({ code: 'DUPLICATE', message: 'Duplicate phone/email in recent leads' });

  const lead = await Lead.create({
    leadId: await genLeadId(),
    name, phone, email, interestedCourse, source,
    status: 'Assigned',
    assignedBy: req.user.id
  });

  return res.status(201).json({ lead });
});

// Bulk upload CSV (string body) — DM only
// CSV headers: Name,Phone,Email,InterestedCourse,Source
router.post('/bulk', requireAuth, authorize(['DigitalMarketing']), async (req, res) => {
  try {
    const { csv } = req.body || {};
    if (!csv || typeof csv !== 'string') {
      return res.status(400).json({ code: 'VALIDATION_ERROR', message: 'csv string required' });
    }
    const lines = csv.split(/\r?\n/).filter(Boolean);
    if (lines.length <= 1) return res.status(400).json({ code: 'NO_ROWS', message: 'No data rows' });

    const header = lines[0].split(',').map(h => h.trim());
    const idx = {
      Name: header.indexOf('Name'),
      Phone: header.indexOf('Phone'),
      Email: header.indexOf('Email'),
      InterestedCourse: header.indexOf('InterestedCourse'),
      Source: header.indexOf('Source')
    };
    if (Object.values(idx).some(v => v < 0)) {
      return res.status(400).json({ code: 'HEADER_MISSING', message: 'Headers must be Name,Phone,Email,InterestedCourse,Source' });
    }

    const since = new Date(); since.setDate(since.getDate() - 180);
    let created = 0, skipped = 0;
    for (let i = 1; i < lines.length; i++) {
      const parts = lines[i].split(',').map(x => x.trim());
      if (!parts.length || parts.join('') === '') continue;

      const name = parts[idx.Name];
      const phone = parts[idx.Phone] || null;
      const email = (parts[idx.Email] || '').toLowerCase() || null;
      const interestedCourse = parts[idx.InterestedCourse] || '';
      const source = parts[idx.Source] || 'Others';

      if (!name) { skipped++; continue; }

      const dup = await Lead.findOne({
        $and: [
          { createdAt: { $gte: since } },
          { $or: [{ phone }, { email }] }
        ]
      });

      if (dup) { skipped++; continue; }

      await Lead.create({
        leadId: await genLeadId(),
        name, phone, email, interestedCourse, source,
        status: 'Assigned',
        assignedBy: req.user.id
      });
      created++;
    }

    return res.json({ ok: true, created, skipped });
  } catch (e) {
    return res.status(500).json({ code: 'SERVER_ERROR', message: e.message });
  }
});

// List leads (DM full view; Admin/SuperAdmin view-only)
router.get('/', requireAuth, authorize(['DigitalMarketing', 'Admin', 'SuperAdmin']), async (req, res) => {
  const { status } = req.query;
  const q = {};
  if (status) q.status = status;
  const leads = await Lead.find(q)
    .sort({ createdAt: -1 })
    .populate('assignedTo', 'name email role')
    .populate('assignedBy', 'name email role');
  return res.json({ leads });
});

// Assign to Admission member (DM only)
router.post('/:id/assign', requireAuth, authorize(['DigitalMarketing']), async (req, res) => {
  const { assignedTo } = req.body || {};
  const lead = await Lead.findById(req.params.id);
  if (!lead) return res.status(404).json({ code: 'NOT_FOUND', message: 'Lead not found' });

  const user = await User.findById(assignedTo);
  if (!user || user.role !== 'Admission') {
    return res.status(400).json({ code: 'INVALID_ASSIGNEE', message: 'Assignee must be Admission member' });
  }

  lead.assignedTo = user._id;
  lead.status = 'Assigned';
  await lead.save();

  const populated = await Lead.findById(lead._id).populate('assignedTo', 'name email role').populate('assignedBy', 'name email role');
  return res.json({ lead: populated });
});

// Update status (DM only for now; Phase 4: Admission will change from their side)
router.patch('/:id/status', requireAuth, authorize(['DigitalMarketing']), async (req, res) => {
  const { status, notes } = req.body || {};
  const allowed = ['Assigned', 'Counseling', 'In Follow Up', 'Admitted', 'Not Admitted', 'Interested'];
  if (!allowed.includes(status)) {
    return res.status(400).json({ code: 'INVALID_STATUS', message: 'Invalid status' });
  }
  const lead = await Lead.findById(req.params.id);
  if (!lead) return res.status(404).json({ code: 'NOT_FOUND', message: 'Lead not found' });
  lead.status = status;
  if (notes !== undefined) lead.notes = notes;
  await lead.save();
  const populated = await Lead.findById(lead._id).populate('assignedTo', 'name email role').populate('assignedBy', 'name email role');
  return res.json({ lead: populated });
});

export default router;


previous api/routes/leads.js 

if I replace the code with your recent code many function will be not work , what do you think ?
ChatGPT said:

Thought for 22s
You're right—not a good idea to replace your current api/routes/leads.js.
The 404 came from a method mismatch:
Backend (yours): POST /api/leads/:id/assign
Frontend (mine earlier): PATCH /api/leads/:id/assign
Express has no PATCH route, so it returns 404. Keep your server file as-is. Just change the frontend to use POST.
Fix (frontend)
Edit web/src/lib/api.js → update the assignLead method to POST
// replace the existing assignLead with this version
async assignLead(id, assignedTo) {
  const res = await fetch(`${API_BASE}/api/leads/${id}/assign`, {
    method: 'POST',                           // <-- was PATCH
    credentials: 'include',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ assignedTo })
  });
  return handleJson(res, 'Assign lead failed');
},
That’s it. No other changes needed.
After this change, refresh your app and try assigning again—the request will hit your POST /:id/assign route and succeed.
If anything else errors, share the Network tab response JSON for the assign call and I’ll patch fast.

You said:
done, start next phase
ChatGPT said:

Thought for 16s
চলুন Phase 5 — Accountant Approval & Accounting Dashboard ডেলিভার করি।
এখানে সবকিছু drop-in ready দেওয়া হলো: নতুন মডেল/রাউট (API), ওয়েব পেজ, এবং রাউট/সাইডবার আপডেট। যেখানে “FULL FILE” লেখা আছে—সেটা কপি–পেস্ট করে রিপ্লেস করবেন।
🔧 Back-end
1) api/models/Income.js — FULL FILE (NEW)
// api/models/Income.js
import mongoose from 'mongoose';

const IncomeSchema = new mongoose.Schema(
  {
    date: { type: Date, required: true },
    source: { type: String, required: true }, // e.g., "Admission Fee", "Other"
    amount: { type: Number, required: true },
    refType: { type: String, enum: ['AdmissionFee', 'Manual'], default: 'Manual' },
    refId: { type: mongoose.Schema.Types.ObjectId, default: null }, // link to AdmissionFee when applicable
    addedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    note: { type: String, default: '' }
  },
  { timestamps: true }
);

export default mongoose.model('Income', IncomeSchema);
2) api/models/Expense.js — FULL FILE (NEW)
// api/models/Expense.js
import mongoose from 'mongoose';

const ExpenseSchema = new mongoose.Schema(
  {
    date: { type: Date, required: true },
    purpose: { type: String, required: true },
    amount: { type: Number, required: true },
    addedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    note: { type: String, default: '' }
  },
  { timestamps: true }
);

export default mongoose.model('Expense', ExpenseSchema);
3) api/routes/accounting.js — FULL FILE (NEW)
// api/routes/accounting.js
import express from 'express';
import { requireAuth } from '../middleware/auth.js';
import { authorize } from '../middleware/authorize.js';
import AdmissionFee from '../models/AdmissionFee.js';
import Income from '../models/Income.js';
import Expense from '../models/Expense.js';

const router = express.Router();
const onlyAcc = [ 'Accountant' ];
const accOrAdmin = [ 'Accountant', 'Admin', 'SuperAdmin' ];

// ---------- Fees Approval ----------

// List fees: Accountant sees all; Admin/SA can view-only
router.get('/fees', requireAuth, authorize(accOrAdmin), async (req, res) => {
  const { status } = req.query;
  const q = {};
  if (status) q.status = status;
  const rows = await AdmissionFee
    .find(q)
    .sort({ createdAt: -1 })
    .populate('lead', 'leadId name phone email status')
    .populate('submittedBy', 'name email');
  res.json({ fees: rows });
});

// Approve a fee -> create Income if not already created
router.patch('/fees/:id/approve', requireAuth, authorize(onlyAcc), async (req, res) => {
  const fee = await AdmissionFee.findById(req.params.id);
  if (!fee) return res.status(404).json({ code:'NOT_FOUND', message:'Fee not found' });

  fee.status = 'Approved';
  await fee.save();

  // if there's no income linked to this fee, create one
  const exists = await Income.findOne({ refType: 'AdmissionFee', refId: fee._id });
  if (!exists) {
    await Income.create({
      date: fee.paymentDate,
      source: 'Admission Fee',
      amount: fee.amount,
      refType: 'AdmissionFee',
      refId: fee._id,
      addedBy: req.user.id,
      note: `${fee.lead?.leadId || ''} ${fee.courseName || ''}`.trim()
    });
  }

  const populated = await AdmissionFee
    .findById(fee._id)
    .populate('lead', 'leadId name phone email status')
    .populate('submittedBy', 'name email');

  res.json({ fee: populated });
});

// Reject a fee (no income created)
router.patch('/fees/:id/reject', requireAuth, authorize(onlyAcc), async (req, res) => {
  const fee = await AdmissionFee.findById(req.params.id);
  if (!fee) return res.status(404).json({ code:'NOT_FOUND', message:'Fee not found' });
  fee.status = 'Rejected';
  await fee.save();

  const populated = await AdmissionFee
    .findById(fee._id)
    .populate('lead', 'leadId name phone email status')
    .populate('submittedBy', 'name email');

  res.json({ fee: populated });
});

// ---------- Income ----------

router.get('/income', requireAuth, authorize(accOrAdmin), async (req, res) => {
  const list = await Income.find().sort({ date: -1 });
  res.json({ income: list });
});

router.post('/income', requireAuth, authorize(onlyAcc), async (req, res) => {
  const { date, source, amount, note } = req.body || {};
  if (!date || !source || amount === undefined) {
    return res.status(400).json({ code:'VALIDATION_ERROR', message:'date, source, amount required' });
  }
  const row = await Income.create({
    date: new Date(date),
    source,
    amount: Number(amount),
    refType: 'Manual',
    refId: null,
    addedBy: req.user.id,
    note: note || ''
  });
  res.status(201).json({ income: row });
});

// ---------- Expense ----------

router.get('/expense', requireAuth, authorize(accOrAdmin), async (req, res) => {
  const list = await Expense.find().sort({ date: -1 });
  res.json({ expenses: list });
});

router.post('/expense', requireAuth, authorize(onlyAcc), async (req, res) => {
  const { date, purpose, amount, note } = req.body || {};
  if (!date || !purpose || amount === undefined) {
    return res.status(400).json({ code:'VALIDATION_ERROR', message:'date, purpose, amount required' });
  }
  const row = await Expense.create({
    date: new Date(date),
    purpose,
    amount: Number(amount),
    addedBy: req.user.id,
    note: note || ''
  });
  res.status(201).json({ expense: row });
});

router.delete('/expense/:id', requireAuth, authorize(onlyAcc), async (req, res) => {
  const row = await Expense.findById(req.params.id);
  if (!row) return res.status(404).json({ code:'NOT_FOUND', message:'Expense not found' });
  await row.deleteOne();
  res.json({ ok: true });
});

// ---------- Summary (Dashboard) ----------

router.get('/summary', requireAuth, authorize(accOrAdmin), async (req, res) => {
  const { from, to } = req.query;
  const start = from ? new Date(from) : new Date(new Date().getFullYear(), 0, 1);
  const end = to ? new Date(to) : new Date();

  const [incomeRows, expenseRows] = await Promise.all([
    Income.find({ date: { $gte: start, $lte: end } }),
    Expense.find({ date: { $gte: start, $lte: end } })
  ]);

  const totalIncome = incomeRows.reduce((s, r) => s + r.amount, 0);
  const totalExpense = expenseRows.reduce((s, r) => s + r.amount, 0);

  // Simple time-series by date (yyyy-mm-dd)
  const bucket = (acc, d, amt) => {
    const key = new Date(d).toISOString().slice(0,10);
    acc[key] = (acc[key] || 0) + amt;
  };
  const incomeSeries = {};
  const expenseSeries = {};
  incomeRows.forEach(r => bucket(incomeSeries, r.date, r.amount));
  expenseRows.forEach(r => bucket(expenseSeries, r.date, r.amount));

  res.json({
    totalIncome,
    totalExpense,
    profit: totalIncome - totalExpense,
    incomeSeries,
    expenseSeries
  });
});

export default router;
4) api/server.js — FULL FILE (UPDATED to mount accounting routes)
// api/server.js
import express from 'express';
import dotenv from 'dotenv';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import { connectDB } from './config/db.js';

import authRoutes from './routes/auth.js';
import userRoutes from './routes/users.js';
import taskRoutes from './routes/tasks.js';
import courseRoutes from './routes/courses.js';
import leadRoutes from './routes/leads.js';
import dmRoutes from './routes/dm.js';
import admissionRoutes from './routes/admission.js';
import accountingRoutes from './routes/accounting.js'; // <-- NEW

dotenv.config();

const app = express();
app.use(helmet());
app.use(morgan('dev'));
app.use(express.json({ limit: '5mb' }));
app.use(cookieParser());
app.use(cors({
  origin: process.env.CLIENT_ORIGIN || 'http://localhost:5173',
  credentials: true
}));

app.get('/health', (req, res) => res.json({ ok: true, service: 'primeops-api' }));

app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/tasks', taskRoutes);
app.use('/api/courses', courseRoutes);
app.use('/api/leads', leadRoutes);
app.use('/api/dm', dmRoutes);
app.use('/api/admission', admissionRoutes);
app.use('/api/accounting', accountingRoutes); // <-- NEW

app.use((err, req, res, next) => {
  console.error('Unhandled:', err);
  res.status(500).json({ code: 'SERVER_ERROR', message: 'Unexpected error' });
});

const PORT = process.env.PORT || 5001;
connectDB(process.env.MONGO_URI).then(() => {
  app.listen(PORT, () => console.log(`🚀 API running on http://localhost:${PORT}`));
});
API রিস্টার্ট দিন:
cd api
npm run dev
🎨 Front-end
1) web/src/lib/api.js — FULL FILE (UPDATED with accounting methods)
// web/src/lib/api.js
function normalizeBase(raw) {
  let base = (raw || '').trim();
  if (!base) return 'http://localhost:5001';
  if (base.startsWith(':')) base = `http://localhost${base}`;
  if (!/^https?:\/\//i.test(base)) base = `http://${base}`;
  try { return new URL(base).origin; } catch { return 'http://localhost:5001'; }
}
const API_BASE = normalizeBase(import.meta.env.VITE_API_BASE);

async function handleJson(res, defaultMsg) {
  if (!res.ok) {
    let errBody = {};
    try { errBody = await res.json(); } catch (_) {}
    const msg = errBody?.message || errBody?.code || `${defaultMsg} (${res.status})`;
    throw new Error(msg);
  }
  let data = {};
  try { data = await res.json(); } catch (_) {}
  return data;
}

export const api = {
  // ---- Auth ----
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    const data = await handleJson(res, 'Login failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid login response');
    return data;
  },
  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });
    const data = await handleJson(res, 'Auth check failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid /me response');
    return data;
  },
  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, { method:'POST', credentials:'include' });
    return handleJson(res, 'Logout failed');
  },
  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT', credentials:'include',
      headers: { 'Content-Type':'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await handleJson(res, 'Update failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid update response');
    return data;
  },

  // ---- Users ----
  async listUsers() { return handleJson(await fetch(`${API_BASE}/api/users`, { credentials:'include' }), 'Load users failed'); },
  async listAdmissionUsers() { return handleJson(await fetch(`${API_BASE}/api/users/admission`, { credentials:'include' }), 'Load admission users failed'); },

  // ---- Tasks ----
  async listAllTasks(status) { const q=status?`?status=${encodeURIComponent(status)}`:''; return handleJson(await fetch(`${API_BASE}/api/tasks${q}`,{credentials:'include'}),'Load tasks failed'); },
  async listMyTasks(status) { const q=status?`?status=${encodeURIComponent(status)}`:''; return handleJson(await fetch(`${API_BASE}/api/tasks/my${q}`,{credentials:'include'}),'Load my tasks failed'); },
  async assignTask(payload){ return handleJson(await fetch(`${API_BASE}/api/tasks/assign`,{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}),'Assign task failed'); },
  async addSelfTask(payload){ return handleJson(await fetch(`${API_BASE}/api/tasks/self`,{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}),'Add self task failed'); },
  async updateTaskStatus(id,status){ return handleJson(await fetch(`${API_BASE}/api/tasks/${id}/status`,{method:'PATCH',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify({status})}),'Update task status failed'); },

  // ---- Courses ----
  async listCourses(){ return handleJson(await fetch(`${API_BASE}/api/courses`,{credentials:'include'}),'Load courses failed'); },
  async createCourse(payload){ return handleJson(await fetch(`${API_BASE}/api/courses`,{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}),'Create course failed'); },
  async updateCourse(id,payload){ return handleJson(await fetch(`${API_BASE}/api/courses/${id}`,{method:'PUT',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}),'Update course failed'); },
  async deleteCourse(id){ return handleJson(await fetch(`${API_BASE}/api/courses/${id}`,{method:'DELETE',credentials:'include'}),'Delete course failed'); },

  // ---- Leads (DM/Admin/SA view) ----
  async listLeads(status){ const q=status?`?status=${encodeURIComponent(status)}`:''; return handleJson(await fetch(`${API_BASE}/api/leads${q}`,{credentials:'include'}),'Load leads failed'); },
  async assignLead(id,assignedTo){ return handleJson(await fetch(`${API_BASE}/api/leads/${id}/assign`,{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify({assignedTo})}),'Assign lead failed'); },
  async createLead(payload){ return handleJson(await fetch(`${API_BASE}/api/leads`,{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}),'Create lead failed'); },
  async bulkUploadLeads(csv){ return handleJson(await fetch(`${API_BASE}/api/leads/bulk`,{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify({csv})}),'Bulk upload failed'); },

  // ---- Admission ----
  async listAdmissionLeads(status){ const q=status?`?status=${encodeURIComponent(status)}`:''; return handleJson(await fetch(`${API_BASE}/api/admission/leads${q}`,{credentials:'include'}),'Load admission leads failed'); },
  async updateLeadStatus(id,status){ return handleJson(await fetch(`${API_BASE}/api/admission/leads/${id}/status`,{method:'PATCH',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify({status})}),'Update lead status failed'); },
  async listAdmissionFees(){ return handleJson(await fetch(`${API_BASE}/api/admission/fees`,{credentials:'include'}),'Load fees failed'); },
  async createAdmissionFee(payload){ return handleJson(await fetch(`${API_BASE}/api/admission/fees`,{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}),'Create fee failed'); },

  // ---- Accounting (Accountant/Admin/SA view; Accountant write) ----
  async listFeesForApproval(status){ const q=status?`?status=${encodeURIComponent(status)}`:''; return handleJson(await fetch(`${API_BASE}/api/accounting/fees${q}`,{credentials:'include'}),'Load fees failed'); },
  async approveFee(id){ return handleJson(await fetch(`${API_BASE}/api/accounting/fees/${id}/approve`,{method:'PATCH',credentials:'include'}),'Approve failed'); },
  async rejectFee(id){ return handleJson(await fetch(`${API_BASE}/api/accounting/fees/${id}/reject`,{method:'PATCH',credentials:'include'}),'Reject failed'); },

  async listIncome(){ return handleJson(await fetch(`${API_BASE}/api/accounting/income`,{credentials:'include'}),'Load income failed'); },
  async addIncome(payload){ return handleJson(await fetch(`${API_BASE}/api/accounting/income`,{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}),'Add income failed'); },

  async listExpenses(){ return handleJson(await fetch(`${API_BASE}/api/accounting/expense`,{credentials:'include'}),'Load expenses failed'); },
  async addExpense(payload){ return handleJson(await fetch(`${API_BASE}/api/accounting/expense`,{method:'POST',credentials:'include',headers:{'Content-Type':'application/json'},body:JSON.stringify(payload)}),'Add expense failed'); },
  async deleteExpense(id){ return handleJson(await fetch(`${API_BASE}/api/accounting/expense/${id}`,{method:'DELETE',credentials:'include'}),'Delete expense failed'); },

  async accountingSummary(from,to){ 
    const params = new URLSearchParams();
    if(from) params.set('from', from);
    if(to) params.set('to', to);
    const q = params.toString() ? `?${params.toString()}` : '';
    return handleJson(await fetch(`${API_BASE}/api/accounting/summary${q}`,{credentials:'include'}),'Load summary failed');
  },
};
2) web/src/pages/AccountingDashboard.jsx — FULL FILE (NEW)
import React, { useEffect, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function AccountingDashboard() {
  const { user } = useAuth();
  if (user?.role !== 'Accountant') {
    return <div className="text-royal">Only Accountant can access this dashboard.</div>;
  }

  const [range, setRange] = useState({
    from: new Date(new Date().getFullYear(),0,1).toISOString().slice(0,10),
    to: new Date().toISOString().slice(0,10)
  });
  const [data, setData] = useState({ totalIncome:0, totalExpense:0, profit:0 });
  const [err, setErr] = useState(null);

  const load = async () => {
    try {
      const d = await api.accountingSummary(range.from, range.to);
      setData(d);
    } catch (e) { setErr(e.message); }
  };

  useEffect(() => { load(); }, []); // eslint-disable-line

  return (
    <div>
      <h1 className="text-2xl font-bold text-navy mb-3">Accounting Dashboard</h1>
      {err && <div className="mb-2 text-red-600">{err}</div>}
      <div className="flex gap-2 mb-4 items-end">
        <div>
          <label className="block text-sm text-royal mb-1">From</label>
          <input type="date" className="border rounded-xl px-3 py-2" value={range.from} onChange={e=>setRange(r=>({...r,from:e.target.value}))}/>
        </div>
        <div>
          <label className="block text-sm text-royal mb-1">To</label>
          <input type="date" className="border rounded-xl px-3 py-2" value={range.to} onChange={e=>setRange(r=>({...r,to:e.target.value}))}/>
        </div>
        <button onClick={load} className="bg-gold text-navy rounded-xl px-4 py-2 font-semibold">Apply</button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <Card title="Income" value={`৳ ${data.totalIncome || 0}`} />
        <Card title="Expense" value={`৳ ${data.totalExpense || 0}`} />
        <Card title="Profit" value={`৳ ${data.profit || 0}`} />
        <Card title="Balance in My Hand" value={`৳ ${(data.totalIncome||0) - (data.totalExpense||0)}`} />
      </div>

      {/* You can add a chart later; for now we keep it simple per your performance guidance */}
    </div>
  );
}

function Card({ title, value }) {
  return (
    <div className="bg-white rounded-2xl shadow-soft p-4">
      <div className="text-royal text-sm mb-1">{title}</div>
      <div className="text-2xl font-extrabold text-navy">{value}</div>
    </div>
  );
}
3) web/src/pages/FeesApproval.jsx — FULL FILE (NEW)
import React, { useEffect, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function FeesApproval() {
  const { user } = useAuth();
  if (user?.role !== 'Accountant') {
    return <div className="text-royal">Only Accountant can approve fees.</div>;
  }

  const [status, setStatus] = useState('Pending');
  const [rows, setRows] = useState([]);
  const [msg, setMsg] = useState(null);
  const [err, setErr] = useState(null);

  const load = async () => {
    try {
      const { fees } = await api.listFeesForApproval(status);
      setRows(fees || []);
      setErr(null);
    } catch (e) { setErr(e.message); }
  };

  useEffect(() => { load(); }, [status]); // eslint-disable-line

  const approve = async (id) => {
    setMsg(null); setErr(null);
    try { await api.approveFee(id); setMsg('Approved'); load(); } catch (e) { setErr(e.message); }
  };
  const reject = async (id) => {
    setMsg(null); setErr(null);
    try { await api.rejectFee(id); setMsg('Rejected'); load(); } catch (e) { setErr(e.message); }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Fees Approval</h1>
        <select value={status} onChange={e=>setStatus(e.target.value)} className="border rounded-xl px-3 py-2">
          <option>Pending</option>
          <option>Approved</option>
          <option>Rejected</option>
        </select>
      </div>
      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr>
              <th className="p-3 text-left">Lead</th>
              <th className="p-3 text-left">Course</th>
              <th className="p-3 text-left">Amount</th>
              <th className="p-3 text-left">Method</th>
              <th className="p-3 text-left">Payment Date</th>
              <th className="p-3 text-left">Submitted By</th>
              <th className="p-3 text-left">Status</th>
              {status === 'Pending' && <th className="p-3 text-left">Action</th>}
            </tr>
          </thead>
          <tbody>
            {rows.map(f => (
              <tr key={f._id} className="border-t">
                <td className="p-3">
                  {f.lead?.leadId} — {f.lead?.name}
                  <div className="text-xs text-royal/70">{f.lead?.phone} {f.lead?.email ? `• ${f.lead.email}` : ''}</div>
                </td>
                <td className="p-3">{f.courseName}</td>
                <td className="p-3">৳ {f.amount}</td>
                <td className="p-3">{f.method}</td>
                <td className="p-3">{new Date(f.paymentDate).toLocaleDateString()}</td>
                <td className="p-3">{f.submittedBy?.name || '-'}</td>
                <td className="p-3">{f.status}</td>
                {status === 'Pending' && (
                  <td className="p-3">
                    <div className="flex gap-2">
                      <button onClick={()=>approve(f._id)} className="px-3 py-1 rounded-lg border hover:bg-[#f0fff4]">Approve</button>
                      <button onClick={()=>reject(f._id)} className="px-3 py-1 rounded-lg border hover:bg-red-50 text-red-700">Reject</button>
                    </div>
                  </td>
                )}
              </tr>
            ))}
            {rows.length === 0 && <tr><td className="p-4 text-royal/70" colSpan="8">No items</td></tr>}
          </tbody>
        </table>
      </div>
    </div>
  );
}
4) web/src/pages/Income.jsx — FULL FILE (NEW)
import React, { useEffect, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function IncomePage() {
  const { user } = useAuth();
  const isAcc = user?.role === 'Accountant';
  if (!isAcc && user?.role !== 'Admin' && user?.role !== 'SuperAdmin') {
    return <div className="text-royal">Access denied</div>;
  }

  const [rows, setRows] = useState([]);
  const [form, setForm] = useState({ date: new Date().toISOString().slice(0,10), source:'Other', amount:0, note:'' });
  const [msg, setMsg] = useState(null);
  const [err, setErr] = useState(null);

  const load = async () => {
    try { const { income } = await api.listIncome(); setRows(income || []); } catch (e) { setErr(e.message); }
  };
  useEffect(() => { load(); }, []); // eslint-disable-line

  const add = async (e) => {
    e.preventDefault(); setMsg(null); setErr(null);
    try { await api.addIncome(form); setMsg('Income added'); setForm({ ...form, amount:0 }); load(); } catch (e) { setErr(e.message); }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Income</h1>
      </div>
      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      {isAcc && (
        <form onSubmit={add} className="grid grid-cols-1 md:grid-cols-4 gap-2 mb-3 bg-white rounded-2xl shadow-soft p-3">
          <input type="date" className="border rounded-xl px-3 py-2" value={form.date} onChange={e=>setForm(f=>({...f,date:e.target.value}))}/>
          <input className="border rounded-xl px-3 py-2" placeholder="Source" value={form.source} onChange={e=>setForm(f=>({...f,source:e.target.value}))}/>
          <input type="number" className="border rounded-xl px-3 py-2" placeholder="Amount" value={form.amount} onChange={e=>setForm(f=>({...f,amount:Number(e.target.value)}))}/>
          <div className="flex gap-2">
            <input className="border rounded-xl px-3 py-2 flex-1" placeholder="Note" value={form.note} onChange={e=>setForm(f=>({...f,note:e.target.value}))}/>
            <button className="bg-gold text-navy rounded-xl px-4">Add</button>
          </div>
        </form>
      )}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr><th className="p-3 text-left">Date</th><th className="p-3 text-left">Source</th><th className="p-3 text-left">Amount</th><th className="p-3 text-left">Note</th></tr>
          </thead>
          <tbody>
            {rows.map(r=>(
              <tr key={r._id} className="border-t">
                <td className="p-3">{new Date(r.date).toLocaleDateString()}</td>
                <td className="p-3">{r.source}</td>
                <td className="p-3">৳ {r.amount}</td>
                <td className="p-3">{r.note || '-'}</td>
              </tr>
            ))}
            {rows.length === 0 && <tr><td className="p-4 text-royal/70" colSpan="4">No entries</td></tr>}
          </tbody>
        </table>
      </div>
    </div>
  );
}
5) web/src/pages/Expense.jsx — FULL FILE (NEW)
import React, { useEffect, useState } from 'react';
import { api } from '../lib/api.js';
import { useAuth } from '../context/AuthContext.jsx';

export default function ExpensePage() {
  const { user } = useAuth();
  const isAcc = user?.role === 'Accountant';
  if (!isAcc && user?.role !== 'Admin' && user?.role !== 'SuperAdmin') {
    return <div className="text-royal">Access denied</div>;
  }

  const [rows, setRows] = useState([]);
  const [form, setForm] = useState({ date: new Date().toISOString().slice(0,10), purpose:'', amount:0, note:'' });
  const [msg, setMsg] = useState(null);
  const [err, setErr] = useState(null);

  const load = async () => {
    try { const { expenses } = await api.listExpenses(); setRows(expenses || []); } catch (e) { setErr(e.message); }
  };
  useEffect(() => { load(); }, []); // eslint-disable-line

  const add = async (e) => {
    e.preventDefault(); setMsg(null); setErr(null);
    try { await api.addExpense(form); setMsg('Expense added'); setForm({ ...form, purpose:'', amount:0, note:'' }); load(); } catch (e) { setErr(e.message); }
  };
  const remove = async (id) => {
    if (!confirm('Delete expense?')) return;
    try { await api.deleteExpense(id); load(); } catch (e) { setErr(e.message); }
  };

  return (
    <div>
      <div className="flex items-center justify-between mb-3">
        <h1 className="text-2xl font-bold text-navy">Expense</h1>
      </div>
      {msg && <div className="mb-2 text-green-700">{msg}</div>}
      {err && <div className="mb-2 text-red-600">{err}</div>}

      {isAcc && (
        <form onSubmit={add} className="grid grid-cols-1 md:grid-cols-5 gap-2 mb-3 bg-white rounded-2xl shadow-soft p-3">
          <input type="date" className="border rounded-xl px-3 py-2" value={form.date} onChange={e=>setForm(f=>({...f,date:e.target.value}))}/>
          <input className="border rounded-xl px-3 py-2" placeholder="Purpose" value={form.purpose} onChange={e=>setForm(f=>({...f,purpose:e.target.value}))}/>
          <input type="number" className="border rounded-xl px-3 py-2" placeholder="Amount" value={form.amount} onChange={e=>setForm(f=>({...f,amount:Number(e.target.value)}))}/>
          <input className="border rounded-xl px-3 py-2" placeholder="Note" value={form.note} onChange={e=>setForm(f=>({...f,note:e.target.value}))}/>
          <button className="bg-gold text-navy rounded-xl px-4">Add</button>
        </form>
      )}

      <div className="bg-white rounded-2xl shadow-soft overflow-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-[#f3f6ff] text-royal">
            <tr><th className="p-3 text-left">Date</th><th className="p-3 text-left">Purpose</th><th className="p-3 text-left">Amount</th><th className="p-3 text-left">Note</th>{isAcc && <th className="p-3 text-left">Action</th>}</tr>
          </thead>
          <tbody>
            {rows.map(r=>(
              <tr key={r._id} className="border-t">
                <td className="p-3">{new Date(r.date).toLocaleDateString()}</td>
                <td className="p-3">{r.purpose}</td>
                <td className="p-3">৳ {r.amount}</td>
                <td className="p-3">{r.note || '-'}</td>
                {isAcc && <td className="p-3"><button onClick={()=>remove(r._id)} className="px-3 py-1 rounded-lg border hover:bg-red-50 text-red-700">Delete</button></td>}
              </tr>
            ))}
            {rows.length === 0 && <tr><td className="p-4 text-royal/70" colSpan={isAcc?5:4}>No entries</td></tr>}
          </tbody>
        </table>
      </div>
    </div>
  );
}
6) web/src/components/Sidebar.jsx — FULL FILE (UPDATED: Accountant menu)
// web/src/components/Sidebar.jsx
import React from 'react';
import { NavLink } from 'react-router-dom';
import { useAuth } from '../context/AuthContext.jsx';
import { LayoutDashboard, ListChecks, Users, BookOpen, FolderOpen, Wallet } from 'lucide-react';

const Item = ({ to, icon, label }) => (
  <NavLink
    to={to}
    className={({ isActive }) =>
      `flex items-center gap-2 px-4 py-2 rounded-xl mx-3 my-1 ${
        isActive ? 'bg-[#e6eeff] text-navy' : 'text-royal hover:bg-[#f3f6ff]'
      }`
    }
  >
    {icon}<span>{label}</span>
  </NavLink>
);

export default function Sidebar() {
  const { user } = useAuth();

  const MENU_BY_ROLE = {
    SuperAdmin: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/assign-tasks', label: 'Assign Task', icon: <ListChecks size={18}/> },
      { to: '/employees', label: 'Employee (View)', icon: <Users size={18}/> },
      { to: '/courses', label: 'Courses (View)', icon: <BookOpen size={18}/> },
      { to: '/leads-center-view', label: 'Leads Center (View)', icon: <FolderOpen size={18}/> },
      { to: '/reports-view', label: 'Reports (View)', icon: <FolderOpen size={18}/> }
    ],
    Admin: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/assign-tasks', label: 'Assign Task', icon: <ListChecks size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
      { to: '/employees', label: 'Employee (CRUD)', icon: <Users size={18}/> },
      { to: '/courses', label: 'Courses (CRUD)', icon: <BookOpen size={18}/> },
      { to: '/reports-view', label: 'Reports (View)', icon: <FolderOpen size={18}/> }
    ],
    DigitalMarketing: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
      { to: '/lead-entry', label: 'Lead Entry / CSV', icon: <FolderOpen size={18}/> },
      { to: '/leads-center', label: 'Leads Center', icon: <FolderOpen size={18}/> },
      { to: '/dm-metrics', label: 'Cost / Social / SEO', icon: <FolderOpen size={18}/> }
    ],
    Admission: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
      { to: '/admission/assigned', label: 'Assigned Lead', icon: <FolderOpen size={18}/> },
      { to: '/admission/counseling', label: 'Counseling', icon: <FolderOpen size={18}/> },
      { to: '/admission/follow-up', label: 'In Follow-Up', icon: <FolderOpen size={18}/> },
      { to: '/admission/admitted', label: 'Admitted', icon: <FolderOpen size={18}/> },
      { to: '/admission/not-admitted', label: 'Not Admitted', icon: <FolderOpen size={18}/> },
      { to: '/admission/fees', label: 'Admission Fees', icon: <FolderOpen size={18}/> }
    ],
    Accountant: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> },
      { to: '/accounting/dashboard', label: 'Accounts Dashboard', icon: <Wallet size={18}/> },
      { to: '/accounting/fees', label: 'Fees Approval', icon: <FolderOpen size={18}/> },
      { to: '/accounting/income', label: 'Income', icon: <FolderOpen size={18}/> },
      { to: '/accounting/expense', label: 'Expense', icon: <FolderOpen size={18}/> }
    ],
    Recruitment: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> }
    ],
    MotionGraphics: [
      { to: '/', label: 'Dashboard', icon: <LayoutDashboard size={18}/> },
      { to: '/my-tasks', label: 'My Task', icon: <ListChecks size={18}/> }
    ]
  };

  const items = MENU_BY_ROLE[user?.role] || [];
  return (
    <aside className="w-72 hidden md:flex bg-white border-r min-h-screen sticky top-0 flex-col">
      <div className="px-4 py-4 text-xl font-extrabold text-navy">PrimeOPS</div>
      <nav className="flex-1">
        {items.map((m) => <Item key={m.to} {...m} />)}
      </nav>
    </aside>
  );
}
7) web/src/App.jsx — FULL FILE (UPDATED: Accountant routes)
import React from 'react';
import { Routes, Route, Navigate, Outlet } from 'react-router-dom';

import ProtectedRoute from './components/ProtectedRoute.jsx';
import RoleRoute from './components/RoleRoute.jsx';
import Topbar from './components/Topbar.jsx';
import Sidebar from './components/Sidebar.jsx';

import Dashboard from './pages/Dashboard.jsx';
import Profile from './pages/Profile.jsx';
import AssignTasks from './pages/AssignTasks.jsx';
import MyTasks from './pages/MyTasks.jsx';
import Employees from './pages/Employees.jsx';
import Courses from './pages/Courses.jsx';
import ReportsView from './pages/ReportsView.jsx';
import LeadsCenterView from './pages/LeadsCenterView.jsx';

import LeadEntry from './pages/LeadEntry.jsx';
import LeadsCenter from './pages/LeadsCenter.jsx';
import DMMetrics from './pages/DMMetrics.jsx';

import AdmissionPipeline from './pages/AdmissionPipeline.jsx';
import AdmissionFees from './pages/AdmissionFees.jsx';

import AccountingDashboard from './pages/AccountingDashboard.jsx';
import FeesApproval from './pages/FeesApproval.jsx';
import IncomePage from './pages/Income.jsx';
import ExpensePage from './pages/Expense.jsx';

function Layout() {
  return (
    <div className="min-h-screen flex bg-[#f7f9fc]">
      <Sidebar />
      <div className="flex-1 flex flex-col">
        <Topbar />
        <main className="p-4 md:p-6"><Outlet /></main>
      </div>
    </div>
  );
}

export default function App() {
  return (
    <Routes>
      <Route element={<ProtectedRoute />}>
        <Route element={<Layout />}>
          <Route path="/" element={<Dashboard />} />
          <Route path="/profile" element={<Profile />} />
          <Route path="/my-tasks" element={<MyTasks />} />

          {/* SA/Admin */}
          <Route element={<RoleRoute roles={['SuperAdmin', 'Admin']} />}>
            <Route path="/assign-tasks" element={<AssignTasks />} />
            <Route path="/employees" element={<Employees />} />
            <Route path="/courses" element={<Courses />} />
            <Route path="/reports-view" element={<ReportsView />} />
            <Route path="/leads-center-view" element={<LeadsCenterView />} />
          </Route>

          {/* Digital Marketing */}
          <Route element={<RoleRoute roles={['DigitalMarketing']} />}>
            <Route path="/lead-entry" element={<LeadEntry />} />
            <Route path="/leads-center" element={<LeadsCenter />} />
            <Route path="/dm-metrics" element={<DMMetrics />} />
          </Route>

          {/* Admission */}
          <Route element={<RoleRoute roles={['Admission','Admin','SuperAdmin']} />}>
            <Route path="/admission/assigned" element={<AdmissionPipeline />} />
            <Route path="/admission/counseling" element={<AdmissionPipeline />} />
            <Route path="/admission/follow-up" element={<AdmissionPipeline />} />
            <Route path="/admission/admitted" element={<AdmissionPipeline />} />
            <Route path="/admission/not-admitted" element={<AdmissionPipeline />} />
            <Route path="/admission/fees" element={<AdmissionFees />} />
          </Route>

          {/* Accountant */}
          <Route element={<RoleRoute roles={['Accountant']} />}>
            <Route path="/accounting/dashboard" element={<AccountingDashboard />} />
            <Route path="/accounting/fees" element={<FeesApproval />} />
            <Route path="/accounting/income" element={<IncomePage />} />
            <Route path="/accounting/expense" element={<ExpensePage />} />
          </Route>

          <Route path="*" element={<Navigate to="/" replace />} />
        </Route>
      </Route>

      <Route path="*" element={<Navigate to="/login" replace />} />
    </Routes>
  );
}
▶️ কীভাবে টেস্ট করবেন
API restart (নতুন রাউট/মডেল):
cd api && npm run dev
WEB restart (নতুন পেজ/রাউট):
cd web && npm run dev
Login → Accountant (mahbub@primeacademy.org / password123)
Fees Approval: Pending → Approve → Income পেজে নতুন রো এসেছে কিনা দেখুন
Expense: নতুন খরচ Add/Delete
Accounts Dashboard: কার্ডে totals/profit আপডেট
Admin/SuperAdmin চাইলে শুধু view করতে পারবে তাদের existing “Reports (View)” থেকে; write-ops শুধু Accountant।
কোনো এরর দেখালে Network tab response দিন—আমি সাথে সাথে ঠিক করে দিচ্ছি।
You said:
// web/src/lib/api.js
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

async function handleJson(res, defaultMsg) {
  if (!res.ok) {
    let errBody = {};
    try { errBody = await res.json(); } catch (_) {}
    const msg = errBody?.message || errBody?.code || ${defaultMsg} (${res.status});
    throw new Error(msg);
  }
  let data = {};
  try { data = await res.json(); } catch (_) {}
  return data;
}

export const api = {
  // ---- Auth ----
  async login(email, password) {
    const res = await fetch(${API_BASE}/api/auth/login, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    const data = await handleJson(res, 'Login failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid login response');
    return data;
  },
  async me() {
    const res = await fetch(${API_BASE}/api/auth/me, { credentials: 'include' });
    const data = await handleJson(res, 'Auth check failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid /me response');
    return data;
  },
  async logout() {
    const res = await fetch(${API_BASE}/api/auth/logout, {
      method: 'POST', credentials: 'include'
    });
    return handleJson(res, 'Logout failed');
  },
  async updateMe(payload) {
    const res = await fetch(${API_BASE}/api/auth/me, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await handleJson(res, 'Update failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid update response');
    return data;
  },

  // ---- Users ----
  async listUsers() {
    const res = await fetch(${API_BASE}/api/users, { credentials: 'include' });
    return handleJson(res, 'Load users failed');
  },
  async listAdmissionUsers() {
    const res = await fetch(${API_BASE}/api/users/admission, { credentials: 'include' });
    return handleJson(res, 'Load admission users failed');
  },
  async createUser(payload) {
    const res = await fetch(${API_BASE}/api/users, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create user failed');
  },
  async updateUser(id, payload) {
    const res = await fetch(${API_BASE}/api/users/${id}, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update user failed');
  },
  async deleteUser(id) {
    const res = await fetch(${API_BASE}/api/users/${id}, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete user failed');
  },

  // ---- Tasks ----
  async listAllTasks(status) {
    const q = status ? ?status=${encodeURIComponent(status)} : '';
    const res = await fetch(${API_BASE}/api/tasks${q}, { credentials: 'include' });
    return handleJson(res, 'Load tasks failed');
  },
  async listMyTasks(status) {
    const q = status ? ?status=${encodeURIComponent(status)} : '';
    const res = await fetch(${API_BASE}/api/tasks/my${q}, { credentials: 'include' });
    return handleJson(res, 'Load my tasks failed');
  },
  async assignTask(payload) {
    const res = await fetch(${API_BASE}/api/tasks/assign, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Assign task failed');
  },
  async addSelfTask(payload) {
    const res = await fetch(${API_BASE}/api/tasks/self, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Add self task failed');
  },
  async updateTaskStatus(id, status) {
    const res = await fetch(${API_BASE}/api/tasks/${id}/status, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update task status failed');
  },

  // ---- Courses ----
  async listCourses() {
    const res = await fetch(${API_BASE}/api/courses, { credentials: 'include' });
    return handleJson(res, 'Load courses failed');
  },
  async createCourse(payload) {
    const res = await fetch(${API_BASE}/api/courses, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create course failed');
  },
  async updateCourse(id, payload) {
    const res = await fetch(${API_BASE}/api/courses/${id}, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update course failed');
  },
  async deleteCourse(id) {
    const res = await fetch(${API_BASE}/api/courses/${id}, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete course failed');
  },

  // ---- Leads (DM & SA/Admin view) ----
  async listLeads(status) {
    const q = status ? ?status=${encodeURIComponent(status)} : '';
    const res = await fetch(${API_BASE}/api/leads${q}, { credentials: 'include' });
    return handleJson(res, 'Load leads failed');
  },
  async assignLead(id, assignedTo) {
    const res = await fetch(${API_BASE}/api/leads/${id}/assign, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ assignedTo })
    });
    return handleJson(res, 'Assign lead failed');
  },
  async createLead(payload) {
    const res = await fetch(${API_BASE}/api/leads, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create lead failed');
  },
  async bulkUploadLeads(csvText) {
    const res = await fetch(${API_BASE}/api/leads/bulk, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ csv: csvText })
    });
    return handleJson(res, 'Bulk upload failed');
  },

  // ---- Admission pipeline ----
  async listAdmissionLeads(status) {
    const q = status ? ?status=${encodeURIComponent(status)} : '';
    const res = await fetch(${API_BASE}/api/admission/leads${q}, { credentials: 'include' });
    return handleJson(res, 'Load admission leads failed');
  },
  async updateLeadStatus(id, status) {
    const res = await fetch(${API_BASE}/api/admission/leads/${id}/status, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update lead status failed');
  },

  // ---- Admission fees ----
  async listAdmissionFees() {
    const res = await fetch(${API_BASE}/api/admission/fees, { credentials: 'include' });
    return handleJson(res, 'Load fees failed');
  },
  async createAdmissionFee(payload) {
    const res = await fetch(${API_BASE}/api/admission/fees, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create fee failed');
  }
};

if I replace my existing code it will safe ?
ChatGPT said:

Thought for 8s
Short answer: not safe as-is — your assignLead still uses PATCH, but your backend route is POST /api/leads/:id/assign. That mismatch will keep causing 404.
Here’s the full, corrected file (only change: assignLead now uses POST). Paste it over web/src/lib/api.js.

// web/src/lib/api.js
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

async function handleJson(res, defaultMsg) {
  if (!res.ok) {
    let errBody = {};
    try { errBody = await res.json(); } catch (_) {}
    const msg = errBody?.message || errBody?.code || `${defaultMsg} (${res.status})`;
    throw new Error(msg);
  }
  let data = {};
  try { data = await res.json(); } catch (_) {}
  return data;
}

export const api = {
  // ---- Auth ----
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    const data = await handleJson(res, 'Login failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid login response');
    return data;
  },
  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });
    const data = await handleJson(res, 'Auth check failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid /me response');
    return data;
  },
  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST', credentials: 'include'
    });
    return handleJson(res, 'Logout failed');
  },
  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await handleJson(res, 'Update failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid update response');
    return data;
  },

  // ---- Users ----
  async listUsers() {
    const res = await fetch(`${API_BASE}/api/users`, { credentials: 'include' });
    return handleJson(res, 'Load users failed');
  },
  async listAdmissionUsers() {
    const res = await fetch(`${API_BASE}/api/users/admission`, { credentials: 'include' });
    return handleJson(res, 'Load admission users failed');
  },
  async createUser(payload) {
    const res = await fetch(`${API_BASE}/api/users`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create user failed');
  },
  async updateUser(id, payload) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update user failed');
  },
  async deleteUser(id) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete user failed');
  },

  // ---- Tasks ----
  async listAllTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks${q}`, { credentials: 'include' });
    return handleJson(res, 'Load tasks failed');
  },
  async listMyTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks/my${q}`, { credentials: 'include' });
    return handleJson(res, 'Load my tasks failed');
  },
  async assignTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/assign`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Assign task failed');
  },
  async addSelfTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/self`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Add self task failed');
  },
  async updateTaskStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/tasks/${id}/status`, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update task status failed');
  },

  // ---- Courses ----
  async listCourses() {
    const res = await fetch(`${API_BASE}/api/courses`, { credentials: 'include' });
    return handleJson(res, 'Load courses failed');
  },
  async createCourse(payload) {
    const res = await fetch(`${API_BASE}/api/courses`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create course failed');
  },
  async updateCourse(id, payload) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update course failed');
  },
  async deleteCourse(id) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete course failed');
  },

  // ---- Leads (DM & SA/Admin view) ----
  async listLeads(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/leads${q}`, { credentials: 'include' });
    return handleJson(res, 'Load leads failed');
  },
  async assignLead(id, assignedTo) {
    const res = await fetch(`${API_BASE}/api/leads/${id}/assign`, {
      method: 'POST', // <-- FIXED: was PATCH
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ assignedTo })
    });
    return handleJson(res, 'Assign lead failed');
  },
  async createLead(payload) {
    const res = await fetch(`${API_BASE}/api/leads`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create lead failed');
  },
  async bulkUploadLeads(csvText) {
    const res = await fetch(`${API_BASE}/api/leads/bulk`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ csv: csvText })
    });
    return handleJson(res, 'Bulk upload failed');
  },

  // ---- Admission pipeline ----
  async listAdmissionLeads(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/admission/leads${q}`, { credentials: 'include' });
    return handleJson(res, 'Load admission leads failed');
  },
  async updateLeadStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/admission/leads/${id}/status`, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update lead status failed');
  },

  // ---- Admission fees ----
  async listAdmissionFees() {
    const res = await fetch(`${API_BASE}/api/admission/fees`, { credentials: 'include' });
    return handleJson(res, 'Load fees failed');
  },
  async createAdmissionFee(payload) {
    const res = await fetch(`${API_BASE}/api/admission/fees`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create fee failed');
  }
};
If you want the extra safety we discussed earlier (auto-normalizing VITE_API_BASE to avoid :5001 issues), I can share that variant too.
You said:
where is the code for accounting in web/rc/lib/api.js ?
ChatGPT said:
ভালো প্রশ্ন Polok 🔥
বর্তমান web/src/lib/api.js-এ এখনো Accounting endpoints যোগ করা হয়নি — Phase 5 শুরু করার সময় আমি সেগুলো যুক্ত করব।
তখন নিচের মতো নতুন API ফাংশনগুলো যুক্ত হবে (backend /api/accounting/* রাউটগুলোর জন্য):

🧾 Upcoming Accounting Section (to be added soon)
// ---- Accounting ----
async listIncome() {
  const res = await fetch(`${API_BASE}/api/accounting/income`, { credentials: 'include' });
  return handleJson(res, 'Load income failed');
},
async listExpense() {
  const res = await fetch(`${API_BASE}/api/accounting/expense`, { credentials: 'include' });
  return handleJson(res, 'Load expense failed');
},
async createExpense(payload) {
  const res = await fetch(`${API_BASE}/api/accounting/expense`, {
    method: 'POST', credentials: 'include',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });
  return handleJson(res, 'Create expense failed');
},
async updateExpense(id, payload) {
  const res = await fetch(`${API_BASE}/api/accounting/expense/${id}`, {
    method: 'PUT', credentials: 'include',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });
  return handleJson(res, 'Update expense failed');
},
async deleteExpense(id) {
  const res = await fetch(`${API_BASE}/api/accounting/expense/${id}`, {
    method: 'DELETE', credentials: 'include'
  });
  return handleJson(res, 'Delete expense failed');
},
async listReports() {
  const res = await fetch(`${API_BASE}/api/accounting/reports`, { credentials: 'include' });
  return handleJson(res, 'Load reports failed');
}
✅ এগুলো যুক্ত করলে Accountant Dashboard-এর জন্য সমস্ত ডেটা (Income, Expense, Profit Summary ইত্যাদি) ফ্রন্টএন্ড থেকে লোড করা যাবে।
তুমি চাইলে আমি এখনই Phase 5 শুরু করে এই API গুলো + Accountant Dashboard UI তৈরি করে দিতে পারি।
বল — Phase 5 শুরু করবো?

ChatGPT said:
Looks like a small typo — you meant web/src/lib/api.js.
Here’s the full file with the Accounting endpoints added (and assignLead fixed to POST):
// web/src/lib/api.js
const API_BASE = import.meta.env.VITE_API_BASE || 'http://localhost:5001';

async function handleJson(res, defaultMsg) {
  if (!res.ok) {
    let errBody = {};
    try { errBody = await res.json(); } catch (_) {}
    const msg = errBody?.message || errBody?.code || `${defaultMsg} (${res.status})`;
    throw new Error(msg);
  }
  let data = {};
  try { data = await res.json(); } catch (_) {}
  return data;
}

export const api = {
  // ---- Auth ----
  async login(email, password) {
    const res = await fetch(`${API_BASE}/api/auth/login`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    });
    const data = await handleJson(res, 'Login failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid login response');
    return data;
  },
  async me() {
    const res = await fetch(`${API_BASE}/api/auth/me`, { credentials: 'include' });
    const data = await handleJson(res, 'Auth check failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid /me response');
    return data;
  },
  async logout() {
    const res = await fetch(`${API_BASE}/api/auth/logout`, {
      method: 'POST', credentials: 'include'
    });
    return handleJson(res, 'Logout failed');
  },
  async updateMe(payload) {
    const res = await fetch(`${API_BASE}/api/auth/me`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    const data = await handleJson(res, 'Update failed');
    if (!data || typeof data !== 'object') throw new Error('Invalid update response');
    return data;
  },

  // ---- Users ----
  async listUsers() {
    const res = await fetch(`${API_BASE}/api/users`, { credentials: 'include' });
    return handleJson(res, 'Load users failed');
  },
  async listAdmissionUsers() {
    const res = await fetch(`${API_BASE}/api/users/admission`, { credentials: 'include' });
    return handleJson(res, 'Load admission users failed');
  },
  async createUser(payload) {
    const res = await fetch(`${API_BASE}/api/users`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create user failed');
  },
  async updateUser(id, payload) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update user failed');
  },
  async deleteUser(id) {
    const res = await fetch(`${API_BASE}/api/users/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete user failed');
  },

  // ---- Tasks ----
  async listAllTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks${q}`, { credentials: 'include' });
    return handleJson(res, 'Load tasks failed');
  },
  async listMyTasks(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/tasks/my${q}`, { credentials: 'include' });
    return handleJson(res, 'Load my tasks failed');
  },
  async assignTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/assign`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Assign task failed');
  },
  async addSelfTask(payload) {
    const res = await fetch(`${API_BASE}/api/tasks/self`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Add self task failed');
  },
  async updateTaskStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/tasks/${id}/status`, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update task status failed');
  },

  // ---- Courses ----
  async listCourses() {
    const res = await fetch(`${API_BASE}/api/courses`, { credentials: 'include' });
    return handleJson(res, 'Load courses failed');
  },
  async createCourse(payload) {
    const res = await fetch(`${API_BASE}/api/courses`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create course failed');
  },
  async updateCourse(id, payload) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'PUT', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Update course failed');
  },
  async deleteCourse(id) {
    const res = await fetch(`${API_BASE}/api/courses/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete course failed');
  },

  // ---- Leads (DM & SA/Admin view) ----
  async listLeads(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/leads${q}`, { credentials: 'include' });
    return handleJson(res, 'Load leads failed');
  },
  async assignLead(id, assignedTo) {
    const res = await fetch(`${API_BASE}/api/leads/${id}/assign`, {
      method: 'POST', // must be POST to match backend
      credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ assignedTo })
    });
    return handleJson(res, 'Assign lead failed');
  },
  async createLead(payload) {
    const res = await fetch(`${API_BASE}/api/leads`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create lead failed');
  },
  async bulkUploadLeads(csvText) {
    const res = await fetch(`${API_BASE}/api/leads/bulk`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ csv: csvText })
    });
    return handleJson(res, 'Bulk upload failed');
  },

  // ---- Admission pipeline ----
  async listAdmissionLeads(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/admission/leads${q}`, { credentials: 'include' });
    return handleJson(res, 'Load admission leads failed');
  },
  async updateLeadStatus(id, status) {
    const res = await fetch(`${API_BASE}/api/admission/leads/${id}/status`, {
      method: 'PATCH', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status })
    });
    return handleJson(res, 'Update lead status failed');
  },

  // ---- Admission fees ----
  async listAdmissionFees() {
    const res = await fetch(`${API_BASE}/api/admission/fees`, { credentials: 'include' });
    return handleJson(res, 'Load fees failed');
  },
  async createAdmissionFee(payload) {
    const res = await fetch(`${API_BASE}/api/admission/fees`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Create fee failed');
  },

  // ---- Accounting (Accountant/Admin/SA) ----
  async listFeesForApproval(status) {
    const q = status ? `?status=${encodeURIComponent(status)}` : '';
    const res = await fetch(`${API_BASE}/api/accounting/fees${q}`, { credentials: 'include' });
    return handleJson(res, 'Load fees failed');
  },
  async approveFee(id) {
    const res = await fetch(`${API_BASE}/api/accounting/fees/${id}/approve`, {
      method: 'PATCH', credentials: 'include'
    });
    return handleJson(res, 'Approve failed');
  },
  async rejectFee(id) {
    const res = await fetch(`${API_BASE}/api/accounting/fees/${id}/reject`, {
      method: 'PATCH', credentials: 'include'
    });
    return handleJson(res, 'Reject failed');
  },

  async listIncome() {
    const res = await fetch(`${API_BASE}/api/accounting/income`, { credentials: 'include' });
    return handleJson(res, 'Load income failed');
  },
  async addIncome(payload) {
    const res = await fetch(`${API_BASE}/api/accounting/income`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Add income failed');
  },

  async listExpenses() {
    const res = await fetch(`${API_BASE}/api/accounting/expense`, { credentials: 'include' });
    return handleJson(res, 'Load expenses failed');
  },
  async addExpense(payload) {
    const res = await fetch(`${API_BASE}/api/accounting/expense`, {
      method: 'POST', credentials: 'include',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    return handleJson(res, 'Add expense failed');
  },
  async deleteExpense(id) {
    const res = await fetch(`${API_BASE}/api/accounting/expense/${id}`, {
      method: 'DELETE', credentials: 'include'
    });
    return handleJson(res, 'Delete expense failed');
  },

  async accountingSummary(from, to) {
    const params = new URLSearchParams();
    if (from) params.set('from', from);
    if (to) params.set('to', to);
    const q = params.toString() ? `?${params.toString()}` : '';
    const res = await fetch(`${API_BASE}/api/accounting/summary${q}`, { credentials: 'include' });
    return handleJson(res, 'Load summary failed');
  }
};
এটাই সেই “accounting” অংশ—/api/accounting/* রাউটগুলোকে কল করার সব মেথড এখানে আছে।
পেস্ট করে সেভ করুন, তারপর ফ্রন্টএন্ড রিস্টার্ট করলে (যদি দরকার হয়) Accountant পেজগুলো ডেটা লোড করবে।
You said:
okay done, start phase 6
ChatGPT said:
Unable to display this message due to an error.
You said:
okay done, start phase 6
ChatGPT said:

